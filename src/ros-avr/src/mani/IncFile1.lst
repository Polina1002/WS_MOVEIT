   1               		.file	"IncFile1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	Nastroika
  13               	Nastroika:
  14               	.LFB11:
  15               		.file 1 "mani/IncFile1.c"
   1:mani/IncFile1.c **** #include <avr/io.h>
   2:mani/IncFile1.c **** #include <util/delay.h>
   3:mani/IncFile1.c **** #include <stdio.h>
   4:mani/IncFile1.c **** #include <stdlib.h>
   5:mani/IncFile1.c **** #include <math.h>
   6:mani/IncFile1.c **** #include "IncFile1.h"
   7:mani/IncFile1.c **** 
   8:mani/IncFile1.c **** 
   9:mani/IncFile1.c **** //11059200/50 = 221184 NO!!! -> 11059200/8/50 = 27648 OK!
  10:mani/IncFile1.c **** 
  11:mani/IncFile1.c **** uint32_t centr = 2900;
  12:mani/IncFile1.c **** uint32_t  alfa;
  13:mani/IncFile1.c **** uint32_t  beta;
  14:mani/IncFile1.c **** uint32_t x;
  15:mani/IncFile1.c **** uint32_t  y;
  16:mani/IncFile1.c **** uint32_t  z;
  17:mani/IncFile1.c **** 
  18:mani/IncFile1.c **** void Nastroika(void){
  16               		.loc 1 18 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  19:mani/IncFile1.c **** 	DDRB = (1<<5) | (1<<6);
  22               		.loc 1 19 0
  23 0000 80E6      		ldi r24,lo8(96)
  24 0002 84B9      		out 0x4,r24
  20:mani/IncFile1.c **** 	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½: ICR, ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï
  21:mani/IncFile1.c **** 	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);
  25               		.loc 1 21 0
  26 0004 82EA      		ldi r24,lo8(-94)
  27 0006 8093 8000 		sts 128,r24
  22:mani/IncFile1.c **** 	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);
  28               		.loc 1 22 0
  29 000a 8AE1      		ldi r24,lo8(26)
  30 000c 8093 8100 		sts 129,r24
  23:mani/IncFile1.c **** 	ICR1 = ICR_VAL;
  31               		.loc 1 23 0
  32 0010 8FE3      		ldi r24,lo8(63)
  33 0012 9CE9      		ldi r25,lo8(-100)
  34 0014 9093 8700 		sts 134+1,r25
  35 0018 8093 8600 		sts 134,r24
  36 001c 0895      		ret
  37               		.cfi_endproc
  38               	.LFE11:
  40               	.global	__floatunsisf
  41               	.global	__mulsf3
  42               	.global	__addsf3
  43               	.global	__fixunssfsi
  44               	.global	SetAngle1
  46               	SetAngle1:
  47               	.LFB12:
  24:mani/IncFile1.c **** }
  25:mani/IncFile1.c **** 	
  26:mani/IncFile1.c **** 	//v=pow(L1,2)-pow(L2,2)+pow(x,2)+pow(y,2);
  27:mani/IncFile1.c **** 	//n=2*L1*sqrt(pow(x,2)+pow(y,2));
  28:mani/IncFile1.c **** 	//Q1 = (acos(x/(sqrt(pow(x,2)+pow(y,2))))*180/3.14)-(acos(v/n))*180/3.14;
  29:mani/IncFile1.c **** 	//Q11=acos(x/(sqrt(pow(x,2)+pow(y,2))))-acos(pow(L1,2)-pow(L2,2))+(pow(x,2)+pow(y,2))/(2*L1*sqrt(p
  30:mani/IncFile1.c **** 	//Q2 = 3.14-acos(pow(L1,2)+pow(L2,2)-(pow(x,2)+pow(y,2))/(2*sqrt(pow(x,2)+pow(y,2))*L1));//ï¿½ï¿½ï
  31:mani/IncFile1.c **** 	
  32:mani/IncFile1.c **** 	//ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½
  33:mani/IncFile1.c **** 	void SetAngle1(int angle1){
  48               		.loc 1 33 0
  49               		.cfi_startproc
  50               	.LVL0:
  51 001e 8F92      		push r8
  52               	.LCFI0:
  53               		.cfi_def_cfa_offset 4
  54               		.cfi_offset 8, -3
  55 0020 9F92      		push r9
  56               	.LCFI1:
  57               		.cfi_def_cfa_offset 5
  58               		.cfi_offset 9, -4
  59 0022 AF92      		push r10
  60               	.LCFI2:
  61               		.cfi_def_cfa_offset 6
  62               		.cfi_offset 10, -5
  63 0024 BF92      		push r11
  64               	.LCFI3:
  65               		.cfi_def_cfa_offset 7
  66               		.cfi_offset 11, -6
  67 0026 CF92      		push r12
  68               	.LCFI4:
  69               		.cfi_def_cfa_offset 8
  70               		.cfi_offset 12, -7
  71 0028 DF92      		push r13
  72               	.LCFI5:
  73               		.cfi_def_cfa_offset 9
  74               		.cfi_offset 13, -8
  75 002a EF92      		push r14
  76               	.LCFI6:
  77               		.cfi_def_cfa_offset 10
  78               		.cfi_offset 14, -9
  79 002c FF92      		push r15
  80               	.LCFI7:
  81               		.cfi_def_cfa_offset 11
  82               		.cfi_offset 15, -10
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 8 */
  86               	.L__stack_usage = 8
  34:mani/IncFile1.c **** 		x=angle1;
  87               		.loc 1 34 0
  88 002e 6C01      		movw r12,r24
  89 0030 990F      		lsl r25
  90 0032 EE08      		sbc r14,r14
  91 0034 FF08      		sbc r15,r15
  92 0036 C092 0000 		sts x,r12
  93 003a D092 0000 		sts x+1,r13
  94 003e E092 0000 		sts x+2,r14
  95 0042 F092 0000 		sts x+3,r15
  35:mani/IncFile1.c **** 		alfa=centr+x*21.67;
  96               		.loc 1 35 0
  97 0046 6091 0000 		lds r22,centr
  98 004a 7091 0000 		lds r23,centr+1
  99 004e 8091 0000 		lds r24,centr+2
 100 0052 9091 0000 		lds r25,centr+3
 101 0056 0E94 0000 		call __floatunsisf
 102               	.LVL1:
 103 005a 4B01      		movw r8,r22
 104 005c 5C01      		movw r10,r24
 105 005e C701      		movw r24,r14
 106 0060 B601      		movw r22,r12
 107 0062 0E94 0000 		call __floatunsisf
 108               	.LVL2:
 109 0066 29E2      		ldi r18,lo8(41)
 110 0068 3CE5      		ldi r19,lo8(92)
 111 006a 4DEA      		ldi r20,lo8(-83)
 112 006c 51E4      		ldi r21,lo8(65)
 113 006e 0E94 0000 		call __mulsf3
 114               	.LVL3:
 115 0072 9B01      		movw r18,r22
 116 0074 AC01      		movw r20,r24
 117 0076 C501      		movw r24,r10
 118 0078 B401      		movw r22,r8
 119 007a 0E94 0000 		call __addsf3
 120               	.LVL4:
 121 007e 0E94 0000 		call __fixunssfsi
 122               	.LVL5:
 123 0082 6093 0000 		sts alfa,r22
 124 0086 7093 0000 		sts alfa+1,r23
 125 008a 8093 0000 		sts alfa+2,r24
 126 008e 9093 0000 		sts alfa+3,r25
  36:mani/IncFile1.c **** 		OCR1A=alfa;
 127               		.loc 1 36 0
 128 0092 7093 8900 		sts 136+1,r23
 129 0096 6093 8800 		sts 136,r22
 130               	.LVL6:
 131               	.LBB6:
 132               	.LBB7:
 133               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 134               		.loc 2 187 0
 135 009a 2FEF      		ldi r18,lo8(3199999)
 136 009c 83ED      		ldi r24,hi8(3199999)
 137 009e 90E3      		ldi r25,hlo8(3199999)
 138 00a0 2150      	1:	subi r18,1
 139 00a2 8040      		sbci r24,0
 140 00a4 9040      		sbci r25,0
 141 00a6 01F4      		brne 1b
 142 00a8 00C0      		rjmp .
 143 00aa 0000      		nop
 144               	.LVL7:
 145               	/* epilogue start */
 146               	.LBE7:
 147               	.LBE6:
  37:mani/IncFile1.c **** 		_delay_ms(1000);
  38:mani/IncFile1.c **** 	}
 148               		.loc 1 38 0
 149 00ac FF90      		pop r15
 150 00ae EF90      		pop r14
 151 00b0 DF90      		pop r13
 152 00b2 CF90      		pop r12
 153               	.LVL8:
 154 00b4 BF90      		pop r11
 155 00b6 AF90      		pop r10
 156 00b8 9F90      		pop r9
 157 00ba 8F90      		pop r8
 158 00bc 0895      		ret
 159               		.cfi_endproc
 160               	.LFE12:
 162               	.global	SetAngle2
 164               	SetAngle2:
 165               	.LFB13:
  39:mani/IncFile1.c **** 	void SetAngle2(int angle2){
 166               		.loc 1 39 0
 167               		.cfi_startproc
 168               	.LVL9:
 169 00be 8F92      		push r8
 170               	.LCFI8:
 171               		.cfi_def_cfa_offset 4
 172               		.cfi_offset 8, -3
 173 00c0 9F92      		push r9
 174               	.LCFI9:
 175               		.cfi_def_cfa_offset 5
 176               		.cfi_offset 9, -4
 177 00c2 AF92      		push r10
 178               	.LCFI10:
 179               		.cfi_def_cfa_offset 6
 180               		.cfi_offset 10, -5
 181 00c4 BF92      		push r11
 182               	.LCFI11:
 183               		.cfi_def_cfa_offset 7
 184               		.cfi_offset 11, -6
 185 00c6 CF92      		push r12
 186               	.LCFI12:
 187               		.cfi_def_cfa_offset 8
 188               		.cfi_offset 12, -7
 189 00c8 DF92      		push r13
 190               	.LCFI13:
 191               		.cfi_def_cfa_offset 9
 192               		.cfi_offset 13, -8
 193 00ca EF92      		push r14
 194               	.LCFI14:
 195               		.cfi_def_cfa_offset 10
 196               		.cfi_offset 14, -9
 197 00cc FF92      		push r15
 198               	.LCFI15:
 199               		.cfi_def_cfa_offset 11
 200               		.cfi_offset 15, -10
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 8 */
 204               	.L__stack_usage = 8
  40:mani/IncFile1.c **** 		y=angle2;	
 205               		.loc 1 40 0
 206 00ce 6C01      		movw r12,r24
 207 00d0 990F      		lsl r25
 208 00d2 EE08      		sbc r14,r14
 209 00d4 FF08      		sbc r15,r15
 210 00d6 C092 0000 		sts y,r12
 211 00da D092 0000 		sts y+1,r13
 212 00de E092 0000 		sts y+2,r14
 213 00e2 F092 0000 		sts y+3,r15
  41:mani/IncFile1.c **** 		beta=centr+y*21.67;
 214               		.loc 1 41 0
 215 00e6 6091 0000 		lds r22,centr
 216 00ea 7091 0000 		lds r23,centr+1
 217 00ee 8091 0000 		lds r24,centr+2
 218 00f2 9091 0000 		lds r25,centr+3
 219 00f6 0E94 0000 		call __floatunsisf
 220               	.LVL10:
 221 00fa 4B01      		movw r8,r22
 222 00fc 5C01      		movw r10,r24
 223 00fe C701      		movw r24,r14
 224 0100 B601      		movw r22,r12
 225 0102 0E94 0000 		call __floatunsisf
 226               	.LVL11:
 227 0106 29E2      		ldi r18,lo8(41)
 228 0108 3CE5      		ldi r19,lo8(92)
 229 010a 4DEA      		ldi r20,lo8(-83)
 230 010c 51E4      		ldi r21,lo8(65)
 231 010e 0E94 0000 		call __mulsf3
 232               	.LVL12:
 233 0112 9B01      		movw r18,r22
 234 0114 AC01      		movw r20,r24
 235 0116 C501      		movw r24,r10
 236 0118 B401      		movw r22,r8
 237 011a 0E94 0000 		call __addsf3
 238               	.LVL13:
 239 011e 0E94 0000 		call __fixunssfsi
 240               	.LVL14:
 241 0122 6093 0000 		sts beta,r22
 242 0126 7093 0000 		sts beta+1,r23
 243 012a 8093 0000 		sts beta+2,r24
 244 012e 9093 0000 		sts beta+3,r25
  42:mani/IncFile1.c **** 		OCR1B=beta;
 245               		.loc 1 42 0
 246 0132 7093 8B00 		sts 138+1,r23
 247 0136 6093 8A00 		sts 138,r22
 248               	.LVL15:
 249               	.LBB8:
 250               	.LBB9:
 251               		.loc 2 187 0
 252 013a 2FEF      		ldi r18,lo8(3199999)
 253 013c 83ED      		ldi r24,hi8(3199999)
 254 013e 90E3      		ldi r25,hlo8(3199999)
 255 0140 2150      	1:	subi r18,1
 256 0142 8040      		sbci r24,0
 257 0144 9040      		sbci r25,0
 258 0146 01F4      		brne 1b
 259 0148 00C0      		rjmp .
 260 014a 0000      		nop
 261               	.LVL16:
 262               	/* epilogue start */
 263               	.LBE9:
 264               	.LBE8:
  43:mani/IncFile1.c **** 		_delay_ms(1000);
  44:mani/IncFile1.c **** 	}
 265               		.loc 1 44 0
 266 014c FF90      		pop r15
 267 014e EF90      		pop r14
 268 0150 DF90      		pop r13
 269 0152 CF90      		pop r12
 270               	.LVL17:
 271 0154 BF90      		pop r11
 272 0156 AF90      		pop r10
 273 0158 9F90      		pop r9
 274 015a 8F90      		pop r8
 275 015c 0895      		ret
 276               		.cfi_endproc
 277               	.LFE13:
 279               	.global	SetAngle3
 281               	SetAngle3:
 282               	.LFB14:
  45:mani/IncFile1.c **** 	void SetAngle3(int angle3){
 283               		.loc 1 45 0
 284               		.cfi_startproc
 285               	.LVL18:
 286 015e 8F92      		push r8
 287               	.LCFI16:
 288               		.cfi_def_cfa_offset 4
 289               		.cfi_offset 8, -3
 290 0160 9F92      		push r9
 291               	.LCFI17:
 292               		.cfi_def_cfa_offset 5
 293               		.cfi_offset 9, -4
 294 0162 AF92      		push r10
 295               	.LCFI18:
 296               		.cfi_def_cfa_offset 6
 297               		.cfi_offset 10, -5
 298 0164 BF92      		push r11
 299               	.LCFI19:
 300               		.cfi_def_cfa_offset 7
 301               		.cfi_offset 11, -6
 302 0166 CF92      		push r12
 303               	.LCFI20:
 304               		.cfi_def_cfa_offset 8
 305               		.cfi_offset 12, -7
 306 0168 DF92      		push r13
 307               	.LCFI21:
 308               		.cfi_def_cfa_offset 9
 309               		.cfi_offset 13, -8
 310 016a EF92      		push r14
 311               	.LCFI22:
 312               		.cfi_def_cfa_offset 10
 313               		.cfi_offset 14, -9
 314 016c FF92      		push r15
 315               	.LCFI23:
 316               		.cfi_def_cfa_offset 11
 317               		.cfi_offset 15, -10
 318               	/* prologue: function */
 319               	/* frame size = 0 */
 320               	/* stack size = 8 */
 321               	.L__stack_usage = 8
  46:mani/IncFile1.c **** 		z=angle3;
 322               		.loc 1 46 0
 323 016e 6C01      		movw r12,r24
 324 0170 990F      		lsl r25
 325 0172 EE08      		sbc r14,r14
 326 0174 FF08      		sbc r15,r15
 327 0176 C092 0000 		sts z,r12
 328 017a D092 0000 		sts z+1,r13
 329 017e E092 0000 		sts z+2,r14
 330 0182 F092 0000 		sts z+3,r15
 331               	.LVL19:
  47:mani/IncFile1.c **** 		uint32_t gamma;
  48:mani/IncFile1.c **** 		gamma=centr+z*21.67;
  49:mani/IncFile1.c **** 		OCR2A=gamma;
 332               		.loc 1 49 0
 333 0186 6091 0000 		lds r22,centr
 334 018a 7091 0000 		lds r23,centr+1
 335 018e 8091 0000 		lds r24,centr+2
 336 0192 9091 0000 		lds r25,centr+3
 337 0196 0E94 0000 		call __floatunsisf
 338               	.LVL20:
 339 019a 4B01      		movw r8,r22
 340 019c 5C01      		movw r10,r24
 341 019e C701      		movw r24,r14
 342 01a0 B601      		movw r22,r12
 343 01a2 0E94 0000 		call __floatunsisf
 344               	.LVL21:
 345 01a6 29E2      		ldi r18,lo8(41)
 346 01a8 3CE5      		ldi r19,lo8(92)
 347 01aa 4DEA      		ldi r20,lo8(-83)
 348 01ac 51E4      		ldi r21,lo8(65)
 349 01ae 0E94 0000 		call __mulsf3
 350               	.LVL22:
 351 01b2 9B01      		movw r18,r22
 352 01b4 AC01      		movw r20,r24
 353 01b6 C501      		movw r24,r10
 354 01b8 B401      		movw r22,r8
 355 01ba 0E94 0000 		call __addsf3
 356               	.LVL23:
 357 01be 0E94 0000 		call __fixunssfsi
 358               	.LVL24:
 359 01c2 6093 B300 		sts 179,r22
 360               	/* epilogue start */
  50:mani/IncFile1.c **** 	}
 361               		.loc 1 50 0
 362 01c6 FF90      		pop r15
 363 01c8 EF90      		pop r14
 364 01ca DF90      		pop r13
 365 01cc CF90      		pop r12
 366               	.LVL25:
 367 01ce BF90      		pop r11
 368 01d0 AF90      		pop r10
 369 01d2 9F90      		pop r9
 370 01d4 8F90      		pop r8
 371 01d6 0895      		ret
 372               		.cfi_endproc
 373               	.LFE14:
 375               		.comm	z,4,1
 376               		.comm	y,4,1
 377               		.comm	x,4,1
 378               		.comm	beta,4,1
 379               		.comm	alfa,4,1
 380               	.global	centr
 381               		.data
 384               	centr:
 385 0000 54        		.byte	84
 386 0001 0B        		.byte	11
 387 0002 00        		.byte	0
 388 0003 00        		.byte	0
 389               		.text
 390               	.Letext0:
 391               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 IncFile1.c
     /tmp/cc5bwaym.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5bwaym.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5bwaym.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5bwaym.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc5bwaym.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5bwaym.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5bwaym.s:13     .text:0000000000000000 Nastroika
     /tmp/cc5bwaym.s:46     .text:000000000000001e SetAngle1
                            *COM*:0000000000000004 x
     /tmp/cc5bwaym.s:384    .data:0000000000000000 centr
                            *COM*:0000000000000004 alfa
     /tmp/cc5bwaym.s:164    .text:00000000000000be SetAngle2
                            *COM*:0000000000000004 y
                            *COM*:0000000000000004 beta
     /tmp/cc5bwaym.s:281    .text:000000000000015e SetAngle3
                            *COM*:0000000000000004 z

UNDEFINED SYMBOLS
__floatunsisf
__mulsf3
__addsf3
__fixunssfsi
__do_copy_data
__do_clear_bss
