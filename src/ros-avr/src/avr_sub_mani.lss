
avr_sub_mani.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800200  00002d76  00002e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fb  00800444  00800444  0000304e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000304e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003060  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000593a  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018da  00000000  00000000  00008bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016fb  00000000  00000000  0000a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b40  00000000  00000000  0000bbc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031e3  00000000  00000000  0000c700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003548  00000000  00000000  0000f8e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00012e2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_23>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      68:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      6c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      84:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      98:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      ac:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      b0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      b4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      b8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      bc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      cc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      dc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>
      e8:	0c 94 92 04 	jmp	0x924	; 0x924 <_ZN8std_msgs4Time11deserializeEPh>
      ec:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>
      f0:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>
      f4:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>
      f8:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
      fc:	0c 94 84 07 	jmp	0xf08	; 0xf08 <_ZNK14rosserial_msgs3Log9serializeEPh>
     100:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
     104:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>
     108:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
     10c:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
     110:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>
     114:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>
     118:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>
     11c:	0c 94 8e 11 	jmp	0x231c	; 0x231c <_GLOBAL__sub_I___cxa_pure_virtual>
     120:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_ZN8std_msgs16MultiArrayLayout7getTypeEv>
     124:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <_Z9messageCbRKN8std_msgs17Float32MultiArrayE>
     128:	0c 94 70 06 	jmp	0xce0	; 0xce0 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>
     12c:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE9connectedEv>
     130:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_ZN14rosserial_msgs3Log6getMD5Ev>
     134:	0c 94 93 09 	jmp	0x1326	; 0x1326 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
     138:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_ZN8std_msgs4Time7getTypeEv>
     13c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_ZN8std_msgs4Time6getMD5Ev>
     140:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <_ZNK8std_msgs4Time9serializeEPh>
     144:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>
     148:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <_ZN14rosserial_msgs3Log11deserializeEPh>
     14c:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>
     150:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>
     154:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_ZN14rosserial_msgs3Log7getTypeEv>
     158:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>
     15c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>
     160:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>
     164:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
     168:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
     16c:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>
     170:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>
     174:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>

00000178 <__ctors_start>:
     178:	8e 11       	cpse	r24, r14

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d1 e2       	ldi	r29, 0x21	; 33
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61
     186:	00 e0       	ldi	r16, 0x00	; 0
     188:	0c bf       	out	0x3c, r16	; 60

0000018a <__do_copy_data>:
     18a:	14 e0       	ldi	r17, 0x04	; 4
     18c:	a0 e0       	ldi	r26, 0x00	; 0
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	e6 e7       	ldi	r30, 0x76	; 118
     192:	fd e2       	ldi	r31, 0x2D	; 45
     194:	00 e0       	ldi	r16, 0x00	; 0
     196:	0b bf       	out	0x3b, r16	; 59
     198:	02 c0       	rjmp	.+4      	; 0x19e <__do_copy_data+0x14>
     19a:	07 90       	elpm	r0, Z+
     19c:	0d 92       	st	X+, r0
     19e:	a4 34       	cpi	r26, 0x44	; 68
     1a0:	b1 07       	cpc	r27, r17
     1a2:	d9 f7       	brne	.-10     	; 0x19a <__do_copy_data+0x10>

000001a4 <__do_clear_bss>:
     1a4:	29 e0       	ldi	r18, 0x09	; 9
     1a6:	a4 e4       	ldi	r26, 0x44	; 68
     1a8:	b4 e0       	ldi	r27, 0x04	; 4
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
     1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
     1ae:	af 33       	cpi	r26, 0x3F	; 63
     1b0:	b2 07       	cpc	r27, r18
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>

000001b4 <__do_global_ctors>:
     1b4:	10 e0       	ldi	r17, 0x00	; 0
     1b6:	cd eb       	ldi	r28, 0xBD	; 189
     1b8:	d0 e0       	ldi	r29, 0x00	; 0
     1ba:	00 e0       	ldi	r16, 0x00	; 0
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <__do_global_ctors+0x16>
     1be:	21 97       	sbiw	r28, 0x01	; 1
     1c0:	01 09       	sbc	r16, r1
     1c2:	80 2f       	mov	r24, r16
     1c4:	fe 01       	movw	r30, r28
     1c6:	0e 94 93 14 	call	0x2926	; 0x2926 <__tablejump2__>
     1ca:	cc 3b       	cpi	r28, 0xBC	; 188
     1cc:	d1 07       	cpc	r29, r17
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	08 07       	cpc	r16, r24
     1d2:	a9 f7       	brne	.-22     	; 0x1be <__do_global_ctors+0xa>
     1d4:	0e 94 3f 11 	call	0x227e	; 0x227e <main>
     1d8:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <__vector_23>:
volatile static uint32_t timer0_ticks = 0;
volatile static uint32_t overflow_ms = 0;

// The Timer0 overflow interrupt handler
ISR(TIMER0_OVF_vect)
{
     1e0:	1f 92       	push	r1
     1e2:	0f 92       	push	r0
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	0f 92       	push	r0
     1e8:	11 24       	eor	r1, r1
     1ea:	2f 93       	push	r18
     1ec:	8f 93       	push	r24
     1ee:	9f 93       	push	r25
     1f0:	af 93       	push	r26
     1f2:	bf 93       	push	r27
  // Add an overflow's worth of time
  timer0_ticks += CLOCK_TICKS_PER_TIMER0_OVERFLOW;
     1f4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <timer0_ticks>
     1f8:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <timer0_ticks+0x1>
     1fc:	a0 91 4a 04 	lds	r26, 0x044A	; 0x80044a <timer0_ticks+0x2>
     200:	b0 91 4b 04 	lds	r27, 0x044B	; 0x80044b <timer0_ticks+0x3>
     204:	90 5c       	subi	r25, 0xC0	; 192
     206:	af 4f       	sbci	r26, 0xFF	; 255
     208:	bf 4f       	sbci	r27, 0xFF	; 255
  for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
     20a:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <timer0_ticks>
     20e:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <timer0_ticks+0x1>
     212:	a0 93 4a 04 	sts	0x044A, r26	; 0x80044a <timer0_ticks+0x2>
     216:	b0 93 4b 04 	sts	0x044B, r27	; 0x80044b <timer0_ticks+0x3>
     21a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <timer0_ticks>
     21e:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <timer0_ticks+0x1>
     222:	a0 91 4a 04 	lds	r26, 0x044A	; 0x80044a <timer0_ticks+0x2>
     226:	b0 91 4b 04 	lds	r27, 0x044B	; 0x80044b <timer0_ticks+0x3>
     22a:	81 38       	cpi	r24, 0x81	; 129
     22c:	9e 43       	sbci	r25, 0x3E	; 62
     22e:	a1 05       	cpc	r26, r1
     230:	b1 05       	cpc	r27, r1
     232:	00 f1       	brcs	.+64     	; 0x274 <__vector_23+0x94>
  {
    overflow_ms++;
     234:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <__data_end>
     238:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <__data_end+0x1>
     23c:	a0 91 46 04 	lds	r26, 0x0446	; 0x800446 <__data_end+0x2>
     240:	b0 91 47 04 	lds	r27, 0x0447	; 0x800447 <__data_end+0x3>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	a1 1d       	adc	r26, r1
     248:	b1 1d       	adc	r27, r1
     24a:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <__data_end>
     24e:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <__data_end+0x1>
     252:	a0 93 46 04 	sts	0x0446, r26	; 0x800446 <__data_end+0x2>
     256:	b0 93 47 04 	sts	0x0447, r27	; 0x800447 <__data_end+0x3>
// The Timer0 overflow interrupt handler
ISR(TIMER0_OVF_vect)
{
  // Add an overflow's worth of time
  timer0_ticks += CLOCK_TICKS_PER_TIMER0_OVERFLOW;
  for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
     25a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <timer0_ticks>
     25e:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <timer0_ticks+0x1>
     262:	a0 91 4a 04 	lds	r26, 0x044A	; 0x80044a <timer0_ticks+0x2>
     266:	b0 91 4b 04 	lds	r27, 0x044B	; 0x80044b <timer0_ticks+0x3>
     26a:	80 58       	subi	r24, 0x80	; 128
     26c:	9e 43       	sbci	r25, 0x3E	; 62
     26e:	a1 09       	sbc	r26, r1
     270:	b1 09       	sbc	r27, r1
     272:	cb cf       	rjmp	.-106    	; 0x20a <__vector_23+0x2a>
  {
    overflow_ms++;
  }
}
     274:	bf 91       	pop	r27
     276:	af 91       	pop	r26
     278:	9f 91       	pop	r25
     27a:	8f 91       	pop	r24
     27c:	2f 91       	pop	r18
     27e:	0f 90       	pop	r0
     280:	0f be       	out	0x3f, r0	; 63
     282:	0f 90       	pop	r0
     284:	1f 90       	pop	r1
     286:	18 95       	reti

00000288 <avr_time_init>:

// Initialize the 8-bit Timer 0.
void avr_time_init(void)
{
  // Prescale Timer 0 to divide by 64
  TCCR0B |= _BV(CS01) | _BV(CS00);
     288:	85 b5       	in	r24, 0x25	; 37
     28a:	83 60       	ori	r24, 0x03	; 3
     28c:	85 bd       	out	0x25, r24	; 37
  // Enable Timer 0 overflow interrupt
  TIMSK0 |= _BV(TOIE0);
     28e:	ee e6       	ldi	r30, 0x6E	; 110
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	08 95       	ret

0000029a <avr_time_now>:
uint32_t avr_time_now(void)
{
  uint32_t now;

  // Disable interrupts 
  cli();
     29a:	f8 94       	cli
  now = overflow_ms;
     29c:	60 91 44 04 	lds	r22, 0x0444	; 0x800444 <__data_end>
     2a0:	70 91 45 04 	lds	r23, 0x0445	; 0x800445 <__data_end+0x1>
     2a4:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <__data_end+0x2>
     2a8:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <__data_end+0x3>
  sei();
     2ac:	78 94       	sei

  return now;
     2ae:	08 95       	ret

000002b0 <avr_uart_init>:

// Initialize the UART
void avr_uart_init(void)
{
  // Enable bidirectional UART
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
     2b0:	e1 ec       	ldi	r30, 0xC1	; 193
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	88 61       	ori	r24, 0x18	; 24
     2b8:	80 83       	st	Z, r24
  // Use 8-bit characters
  UCSR0C |= _BV(UCSZ00) | _BV(UCSZ01);
     2ba:	e2 ec       	ldi	r30, 0xC2	; 194
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	86 60       	ori	r24, 0x06	; 6
     2c2:	80 83       	st	Z, r24
  // Set the Baud rate
  UBRR0H = (UBRR_VAL >> 8);
     2c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
  UBRR0L = UBRR_VAL;
     2c8:	80 e1       	ldi	r24, 0x10	; 16
     2ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     2ce:	08 95       	ret

000002d0 <avr_uart_send_byte>:

// Send one char (blocking)
void avr_uart_send_byte(uint8_t tx_byte)
{
  // Wait to be able to transmit
  while((UCSR0A & _BV(UDRE0)) == 0)
     2d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     2d4:	95 fd       	sbrc	r25, 5
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <avr_uart_send_byte+0xc>
    asm volatile("nop"::);
     2d8:	00 00       	nop
     2da:	fa cf       	rjmp	.-12     	; 0x2d0 <avr_uart_send_byte>
  // Put the data into the send buffer
  UDR0 = tx_byte;
     2dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     2e0:	08 95       	ret

000002e2 <avr_uart_receive_byte>:


// Get one char if available, otherwise -1
int16_t avr_uart_receive_byte(void)
{
  if((UCSR0A & _BV(RXC0)) != 0)
     2e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     2e6:	87 ff       	sbrs	r24, 7
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <avr_uart_receive_byte+0x10>
  {
    return UDR0;
     2ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	08 95       	ret
  }
  else
  {
    return -1;
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
     2f6:	08 95       	ret

000002f8 <Nastroika>:
uint32_t x;
uint32_t  y;
uint32_t  z;

void Nastroika(void){
	DDRB = (1<<5) | (1<<6);
     2f8:	80 e6       	ldi	r24, 0x60	; 96
     2fa:	84 b9       	out	0x04, r24	; 4
	//������� ���, ������ �����: ICR, ������������: 8
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);
     2fc:	82 ea       	ldi	r24, 0xA2	; 162
     2fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);
     302:	8a e1       	ldi	r24, 0x1A	; 26
     304:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	ICR1 = ICR_VAL;
     308:	8f e3       	ldi	r24, 0x3F	; 63
     30a:	9c e9       	ldi	r25, 0x9C	; 156
     30c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     310:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     314:	08 95       	ret

00000316 <SetAngle1>:
	//Q1 = (acos(x/(sqrt(pow(x,2)+pow(y,2))))*180/3.14)-(acos(v/n))*180/3.14;
	//Q11=acos(x/(sqrt(pow(x,2)+pow(y,2))))-acos(pow(L1,2)-pow(L2,2))+(pow(x,2)+pow(y,2))/(2*L1*sqrt(pow(x,2)+pow(y,2)));//���� ������� ������� ����� �� ��
	//Q2 = 3.14-acos(pow(L1,2)+pow(L2,2)-(pow(x,2)+pow(y,2))/(2*sqrt(pow(x,2)+pow(y,2))*L1));//���� ������� �������� ����� �� ��� �����������
	
	//��� ������� � ������� �����
	void SetAngle1(int angle1){
     316:	8f 92       	push	r8
     318:	9f 92       	push	r9
     31a:	af 92       	push	r10
     31c:	bf 92       	push	r11
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
		x=angle1;
     326:	6c 01       	movw	r12, r24
     328:	99 0f       	add	r25, r25
     32a:	ee 08       	sbc	r14, r14
     32c:	ff 08       	sbc	r15, r15
     32e:	c0 92 27 09 	sts	0x0927, r12	; 0x800927 <x>
     332:	d0 92 28 09 	sts	0x0928, r13	; 0x800928 <x+0x1>
     336:	e0 92 29 09 	sts	0x0929, r14	; 0x800929 <x+0x2>
     33a:	f0 92 2a 09 	sts	0x092A, r15	; 0x80092a <x+0x3>
		alfa=centr+x*21.67;
     33e:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     342:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     346:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     34a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     34e:	0e 94 14 13 	call	0x2628	; 0x2628 <__floatunsisf>
     352:	4b 01       	movw	r8, r22
     354:	5c 01       	movw	r10, r24
     356:	c7 01       	movw	r24, r14
     358:	b6 01       	movw	r22, r12
     35a:	0e 94 14 13 	call	0x2628	; 0x2628 <__floatunsisf>
     35e:	29 e2       	ldi	r18, 0x29	; 41
     360:	3c e5       	ldi	r19, 0x5C	; 92
     362:	4d ea       	ldi	r20, 0xAD	; 173
     364:	51 e4       	ldi	r21, 0x41	; 65
     366:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     36a:	9b 01       	movw	r18, r22
     36c:	ac 01       	movw	r20, r24
     36e:	c5 01       	movw	r24, r10
     370:	b4 01       	movw	r22, r8
     372:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__addsf3>
     376:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__fixunssfsi>
     37a:	60 93 2b 09 	sts	0x092B, r22	; 0x80092b <alfa>
     37e:	70 93 2c 09 	sts	0x092C, r23	; 0x80092c <alfa+0x1>
     382:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <alfa+0x2>
     386:	90 93 2e 09 	sts	0x092E, r25	; 0x80092e <alfa+0x3>
		OCR1A=alfa;
     38a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     38e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	83 ed       	ldi	r24, 0xD3	; 211
     396:	90 e3       	ldi	r25, 0x30	; 48
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <SetAngle1+0x82>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <SetAngle1+0x8c>
     3a2:	00 00       	nop
		_delay_ms(1000);
	}
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	9f 90       	pop	r9
     3b2:	8f 90       	pop	r8
     3b4:	08 95       	ret

000003b6 <SetAngle2>:
	void SetAngle2(int angle2){
     3b6:	8f 92       	push	r8
     3b8:	9f 92       	push	r9
     3ba:	af 92       	push	r10
     3bc:	bf 92       	push	r11
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
		y=angle2;	
     3c6:	6c 01       	movw	r12, r24
     3c8:	99 0f       	add	r25, r25
     3ca:	ee 08       	sbc	r14, r14
     3cc:	ff 08       	sbc	r15, r15
     3ce:	c0 92 33 09 	sts	0x0933, r12	; 0x800933 <y>
     3d2:	d0 92 34 09 	sts	0x0934, r13	; 0x800934 <y+0x1>
     3d6:	e0 92 35 09 	sts	0x0935, r14	; 0x800935 <y+0x2>
     3da:	f0 92 36 09 	sts	0x0936, r15	; 0x800936 <y+0x3>
		beta=centr+y*21.67;
     3de:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     3e2:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     3e6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     3ea:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     3ee:	0e 94 14 13 	call	0x2628	; 0x2628 <__floatunsisf>
     3f2:	4b 01       	movw	r8, r22
     3f4:	5c 01       	movw	r10, r24
     3f6:	c7 01       	movw	r24, r14
     3f8:	b6 01       	movw	r22, r12
     3fa:	0e 94 14 13 	call	0x2628	; 0x2628 <__floatunsisf>
     3fe:	29 e2       	ldi	r18, 0x29	; 41
     400:	3c e5       	ldi	r19, 0x5C	; 92
     402:	4d ea       	ldi	r20, 0xAD	; 173
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     40a:	9b 01       	movw	r18, r22
     40c:	ac 01       	movw	r20, r24
     40e:	c5 01       	movw	r24, r10
     410:	b4 01       	movw	r22, r8
     412:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__addsf3>
     416:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__fixunssfsi>
     41a:	60 93 37 09 	sts	0x0937, r22	; 0x800937 <beta>
     41e:	70 93 38 09 	sts	0x0938, r23	; 0x800938 <beta+0x1>
     422:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <beta+0x2>
     426:	90 93 3a 09 	sts	0x093A, r25	; 0x80093a <beta+0x3>
		OCR1B=beta;
     42a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     42e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     432:	2f ef       	ldi	r18, 0xFF	; 255
     434:	83 ed       	ldi	r24, 0xD3	; 211
     436:	90 e3       	ldi	r25, 0x30	; 48
     438:	21 50       	subi	r18, 0x01	; 1
     43a:	80 40       	sbci	r24, 0x00	; 0
     43c:	90 40       	sbci	r25, 0x00	; 0
     43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     442:	00 00       	nop
		_delay_ms(1000);
	}
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	9f 90       	pop	r9
     452:	8f 90       	pop	r8
     454:	08 95       	ret

00000456 <SetAngle3>:
	void SetAngle3(int angle3){
     456:	8f 92       	push	r8
     458:	9f 92       	push	r9
     45a:	af 92       	push	r10
     45c:	bf 92       	push	r11
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
		z=angle3;
     466:	6c 01       	movw	r12, r24
     468:	99 0f       	add	r25, r25
     46a:	ee 08       	sbc	r14, r14
     46c:	ff 08       	sbc	r15, r15
     46e:	c0 92 2f 09 	sts	0x092F, r12	; 0x80092f <z>
     472:	d0 92 30 09 	sts	0x0930, r13	; 0x800930 <z+0x1>
     476:	e0 92 31 09 	sts	0x0931, r14	; 0x800931 <z+0x2>
     47a:	f0 92 32 09 	sts	0x0932, r15	; 0x800932 <z+0x3>
		uint32_t gamma;
		gamma=centr+z*21.67;
		OCR2A=gamma;
     47e:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     482:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     486:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     48a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     48e:	0e 94 14 13 	call	0x2628	; 0x2628 <__floatunsisf>
     492:	4b 01       	movw	r8, r22
     494:	5c 01       	movw	r10, r24
     496:	c7 01       	movw	r24, r14
     498:	b6 01       	movw	r22, r12
     49a:	0e 94 14 13 	call	0x2628	; 0x2628 <__floatunsisf>
     49e:	29 e2       	ldi	r18, 0x29	; 41
     4a0:	3c e5       	ldi	r19, 0x5C	; 92
     4a2:	4d ea       	ldi	r20, 0xAD	; 173
     4a4:	51 e4       	ldi	r21, 0x41	; 65
     4a6:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     4aa:	9b 01       	movw	r18, r22
     4ac:	ac 01       	movw	r20, r24
     4ae:	c5 01       	movw	r24, r10
     4b0:	b4 01       	movw	r22, r8
     4b2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__addsf3>
     4b6:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__fixunssfsi>
     4ba:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	}
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	9f 90       	pop	r9
     4cc:	8f 90       	pop	r8
     4ce:	08 95       	ret

000004d0 <_Z9messageCbRKN8std_msgs17Float32MultiArrayE>:
// //   PORTB ^= (1 << PB7);   // blink the led
//   my_delay = toggle_msg.data;
// }


void messageCb( const std_msgs::Float32MultiArray &mani_msg){
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
//   PORTB ^= (1 << PB7);   // blink the led
  SetAngle1(mani_msg.data[0]);
     4d6:	ea a1       	ldd	r30, Y+34	; 0x22
     4d8:	fb a1       	ldd	r31, Y+35	; 0x23
     4da:	60 81       	ld	r22, Z
     4dc:	71 81       	ldd	r23, Z+1	; 0x01
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	93 81       	ldd	r25, Z+3	; 0x03
     4e2:	0e 94 de 12 	call	0x25bc	; 0x25bc <__fixsfsi>
     4e6:	cb 01       	movw	r24, r22
     4e8:	0e 94 8b 01 	call	0x316	; 0x316 <SetAngle1>
  SetAngle2(mani_msg.data[1]);
     4ec:	ea a1       	ldd	r30, Y+34	; 0x22
     4ee:	fb a1       	ldd	r31, Y+35	; 0x23
     4f0:	64 81       	ldd	r22, Z+4	; 0x04
     4f2:	75 81       	ldd	r23, Z+5	; 0x05
     4f4:	86 81       	ldd	r24, Z+6	; 0x06
     4f6:	97 81       	ldd	r25, Z+7	; 0x07
     4f8:	0e 94 de 12 	call	0x25bc	; 0x25bc <__fixsfsi>
     4fc:	cb 01       	movw	r24, r22
     4fe:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SetAngle2>
  SetAngle3(mani_msg.data[2]);
     502:	ea a1       	ldd	r30, Y+34	; 0x22
     504:	fb a1       	ldd	r31, Y+35	; 0x23
     506:	60 85       	ldd	r22, Z+8	; 0x08
     508:	71 85       	ldd	r23, Z+9	; 0x09
     50a:	82 85       	ldd	r24, Z+10	; 0x0a
     50c:	93 85       	ldd	r25, Z+11	; 0x0b
     50e:	0e 94 de 12 	call	0x25bc	; 0x25bc <__fixsfsi>
     512:	cb 01       	movw	r24, r22
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28

void messageCb( const std_msgs::Float32MultiArray &mani_msg){
//   PORTB ^= (1 << PB7);   // blink the led
  SetAngle1(mani_msg.data[0]);
  SetAngle2(mani_msg.data[1]);
  SetAngle3(mani_msg.data[2]);
     518:	0c 94 2b 02 	jmp	0x456	; 0x456 <SetAngle3>

0000051c <__cxa_pure_virtual>:
}


// Needed for AVR to use virtual functions
extern "C" void __cxa_pure_virtual(void);
void __cxa_pure_virtual(void) {}
     51c:	08 95       	ret

0000051e <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	8c 01       	movw	r16, r24
     530:	eb 01       	movw	r28, r22
  uint32_t nsec_part = nsec % 1000000000UL;
     532:	68 81       	ld	r22, Y
     534:	79 81       	ldd	r23, Y+1	; 0x01
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	9b 81       	ldd	r25, Y+3	; 0x03
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	3a ec       	ldi	r19, 0xCA	; 202
     53e:	4a e9       	ldi	r20, 0x9A	; 154
     540:	5b e3       	ldi	r21, 0x3B	; 59
     542:	0e 94 33 14 	call	0x2866	; 0x2866 <__udivmodsi4>
     546:	f8 01       	movw	r30, r16
     548:	c0 80       	ld	r12, Z
     54a:	d1 80       	ldd	r13, Z+1	; 0x01
     54c:	e2 80       	ldd	r14, Z+2	; 0x02
     54e:	f3 80       	ldd	r15, Z+3	; 0x03
     550:	c2 0e       	add	r12, r18
     552:	d3 1e       	adc	r13, r19
     554:	e4 1e       	adc	r14, r20
     556:	f5 1e       	adc	r15, r21
     558:	c0 82       	st	Z, r12
     55a:	d1 82       	std	Z+1, r13	; 0x01
     55c:	e2 82       	std	Z+2, r14	; 0x02
     55e:	f3 82       	std	Z+3, r15	; 0x03
  nsec = nsec_part;
     560:	68 83       	st	Y, r22
     562:	79 83       	std	Y+1, r23	; 0x01
     564:	8a 83       	std	Y+2, r24	; 0x02
     566:	9b 83       	std	Y+3, r25	; 0x03
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	08 95       	ret

0000057a <_ZN3ros4Time8fromNSecEl>:

Time& Time::fromNSec(int32_t t)
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
  sec = t / 1000000000;
     580:	cb 01       	movw	r24, r22
     582:	ba 01       	movw	r22, r20
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	3a ec       	ldi	r19, 0xCA	; 202
     588:	4a e9       	ldi	r20, 0x9A	; 154
     58a:	5b e3       	ldi	r21, 0x3B	; 59
     58c:	0e 94 55 14 	call	0x28aa	; 0x28aa <__divmodsi4>
     590:	28 83       	st	Y, r18
     592:	39 83       	std	Y+1, r19	; 0x01
     594:	4a 83       	std	Y+2, r20	; 0x02
     596:	5b 83       	std	Y+3, r21	; 0x03
  nsec = t % 1000000000;
     598:	6c 83       	std	Y+4, r22	; 0x04
     59a:	7d 83       	std	Y+5, r23	; 0x05
     59c:	8e 83       	std	Y+6, r24	; 0x06
     59e:	9f 83       	std	Y+7, r25	; 0x07
  normalizeSecNSec(sec, nsec);
     5a0:	be 01       	movw	r22, r28
     5a2:	6c 5f       	subi	r22, 0xFC	; 252
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	ce 01       	movw	r24, r28
     5a8:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
     5ac:	ce 01       	movw	r24, r28
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <_ZN3ros4TimepLERKNS_8DurationE>:

Time& Time::operator +=(const Duration &rhs)
{
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
  sec = sec - 1 + rhs.sec;
     5be:	88 81       	ld	r24, Y
     5c0:	99 81       	ldd	r25, Y+1	; 0x01
     5c2:	aa 81       	ldd	r26, Y+2	; 0x02
     5c4:	bb 81       	ldd	r27, Y+3	; 0x03
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	a1 09       	sbc	r26, r1
     5ca:	b1 09       	sbc	r27, r1
     5cc:	fb 01       	movw	r30, r22
     5ce:	00 81       	ld	r16, Z
     5d0:	11 81       	ldd	r17, Z+1	; 0x01
     5d2:	22 81       	ldd	r18, Z+2	; 0x02
     5d4:	33 81       	ldd	r19, Z+3	; 0x03
     5d6:	80 0f       	add	r24, r16
     5d8:	91 1f       	adc	r25, r17
     5da:	a2 1f       	adc	r26, r18
     5dc:	b3 1f       	adc	r27, r19
     5de:	88 83       	st	Y, r24
     5e0:	99 83       	std	Y+1, r25	; 0x01
     5e2:	aa 83       	std	Y+2, r26	; 0x02
     5e4:	bb 83       	std	Y+3, r27	; 0x03
  nsec = nsec + 1000000000UL + rhs.nsec;
     5e6:	8c 81       	ldd	r24, Y+4	; 0x04
     5e8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ea:	ae 81       	ldd	r26, Y+6	; 0x06
     5ec:	bf 81       	ldd	r27, Y+7	; 0x07
     5ee:	96 53       	subi	r25, 0x36	; 54
     5f0:	a5 46       	sbci	r26, 0x65	; 101
     5f2:	b4 4c       	sbci	r27, 0xC4	; 196
     5f4:	44 81       	ldd	r20, Z+4	; 0x04
     5f6:	55 81       	ldd	r21, Z+5	; 0x05
     5f8:	66 81       	ldd	r22, Z+6	; 0x06
     5fa:	77 81       	ldd	r23, Z+7	; 0x07
     5fc:	84 0f       	add	r24, r20
     5fe:	95 1f       	adc	r25, r21
     600:	a6 1f       	adc	r26, r22
     602:	b7 1f       	adc	r27, r23
     604:	8c 83       	std	Y+4, r24	; 0x04
     606:	9d 83       	std	Y+5, r25	; 0x05
     608:	ae 83       	std	Y+6, r26	; 0x06
     60a:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSec(sec, nsec);
     60c:	be 01       	movw	r22, r28
     60e:	6c 5f       	subi	r22, 0xFC	; 252
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	ce 01       	movw	r24, r28
     614:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
     618:	ce 01       	movw	r24, r28
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	08 95       	ret

00000624 <_ZN3ros4TimemIERKNS_8DurationE>:

Time& Time::operator -=(const Duration &rhs){
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
  sec = sec - 1 - rhs.sec;
     62e:	88 81       	ld	r24, Y
     630:	99 81       	ldd	r25, Y+1	; 0x01
     632:	aa 81       	ldd	r26, Y+2	; 0x02
     634:	bb 81       	ldd	r27, Y+3	; 0x03
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	a1 09       	sbc	r26, r1
     63a:	b1 09       	sbc	r27, r1
     63c:	fb 01       	movw	r30, r22
     63e:	00 81       	ld	r16, Z
     640:	11 81       	ldd	r17, Z+1	; 0x01
     642:	22 81       	ldd	r18, Z+2	; 0x02
     644:	33 81       	ldd	r19, Z+3	; 0x03
     646:	80 1b       	sub	r24, r16
     648:	91 0b       	sbc	r25, r17
     64a:	a2 0b       	sbc	r26, r18
     64c:	b3 0b       	sbc	r27, r19
     64e:	88 83       	st	Y, r24
     650:	99 83       	std	Y+1, r25	; 0x01
     652:	aa 83       	std	Y+2, r26	; 0x02
     654:	bb 83       	std	Y+3, r27	; 0x03
  nsec = nsec + 1000000000UL - rhs.nsec;
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	9d 81       	ldd	r25, Y+5	; 0x05
     65a:	ae 81       	ldd	r26, Y+6	; 0x06
     65c:	bf 81       	ldd	r27, Y+7	; 0x07
     65e:	96 53       	subi	r25, 0x36	; 54
     660:	a5 46       	sbci	r26, 0x65	; 101
     662:	b4 4c       	sbci	r27, 0xC4	; 196
     664:	44 81       	ldd	r20, Z+4	; 0x04
     666:	55 81       	ldd	r21, Z+5	; 0x05
     668:	66 81       	ldd	r22, Z+6	; 0x06
     66a:	77 81       	ldd	r23, Z+7	; 0x07
     66c:	84 1b       	sub	r24, r20
     66e:	95 0b       	sbc	r25, r21
     670:	a6 0b       	sbc	r26, r22
     672:	b7 0b       	sbc	r27, r23
     674:	8c 83       	std	Y+4, r24	; 0x04
     676:	9d 83       	std	Y+5, r25	; 0x05
     678:	ae 83       	std	Y+6, r26	; 0x06
     67a:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSec(sec, nsec);
     67c:	be 01       	movw	r22, r28
     67e:	6c 5f       	subi	r22, 0xFC	; 252
     680:	7f 4f       	sbci	r23, 0xFF	; 255
     682:	ce 01       	movw	r24, r28
     684:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
     688:	ce 01       	movw	r24, r28
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <_ZNK3ros4TimemiERKS0_>:

Duration Time::operator-(const Time &rhs) const {
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	60 97       	sbiw	r28, 0x10	; 16
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	fb 01       	movw	r30, r22
  // Note: Considers wrap around as a continuation of time, e.g.,
  // (0,0) - (0xFFFFFFFF, 0) = (1, 0)
  Duration d;
  d.sec = sec > rhs.sec ? sec - rhs.sec : -(rhs.sec - sec);
     6ae:	dc 01       	movw	r26, r24
     6b0:	4d 91       	ld	r20, X+
     6b2:	5d 91       	ld	r21, X+
     6b4:	6d 91       	ld	r22, X+
     6b6:	7c 91       	ld	r23, X
     6b8:	13 97       	sbiw	r26, 0x03	; 3
     6ba:	00 81       	ld	r16, Z
     6bc:	11 81       	ldd	r17, Z+1	; 0x01
     6be:	22 81       	ldd	r18, Z+2	; 0x02
     6c0:	33 81       	ldd	r19, Z+3	; 0x03
     6c2:	40 1b       	sub	r20, r16
     6c4:	51 0b       	sbc	r21, r17
     6c6:	62 0b       	sbc	r22, r18
     6c8:	73 0b       	sbc	r23, r19
     6ca:	49 87       	std	Y+9, r20	; 0x09
     6cc:	5a 87       	std	Y+10, r21	; 0x0a
     6ce:	6b 87       	std	Y+11, r22	; 0x0b
     6d0:	7c 87       	std	Y+12, r23	; 0x0c
  d.nsec = nsec > rhs.nsec ? nsec - rhs.nsec : -(rhs.nsec - nsec);
     6d2:	14 96       	adiw	r26, 0x04	; 4
     6d4:	0d 91       	ld	r16, X+
     6d6:	1d 91       	ld	r17, X+
     6d8:	2d 91       	ld	r18, X+
     6da:	3c 91       	ld	r19, X
     6dc:	17 97       	sbiw	r26, 0x07	; 7
     6de:	44 81       	ldd	r20, Z+4	; 0x04
     6e0:	55 81       	ldd	r21, Z+5	; 0x05
     6e2:	66 81       	ldd	r22, Z+6	; 0x06
     6e4:	77 81       	ldd	r23, Z+7	; 0x07
     6e6:	d9 01       	movw	r26, r18
     6e8:	c8 01       	movw	r24, r16
     6ea:	84 1b       	sub	r24, r20
     6ec:	95 0b       	sbc	r25, r21
     6ee:	a6 0b       	sbc	r26, r22
     6f0:	b7 0b       	sbc	r27, r23
     6f2:	8d 87       	std	Y+13, r24	; 0x0d
     6f4:	9e 87       	std	Y+14, r25	; 0x0e
     6f6:	af 87       	std	Y+15, r26	; 0x0f
     6f8:	b8 8b       	std	Y+16, r27	; 0x10
  normalizeSecNSecSigned(d.sec, d.nsec);
     6fa:	be 01       	movw	r22, r28
     6fc:	63 5f       	subi	r22, 0xF3	; 243
     6fe:	7f 4f       	sbci	r23, 0xFF	; 255
     700:	ce 01       	movw	r24, r28
     702:	09 96       	adiw	r24, 0x09	; 9
     704:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return d;
     708:	88 e0       	ldi	r24, 0x08	; 8
     70a:	fe 01       	movw	r30, r28
     70c:	39 96       	adiw	r30, 0x09	; 9
     70e:	de 01       	movw	r26, r28
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	01 90       	ld	r0, Z+
     714:	0d 92       	st	X+, r0
     716:	8a 95       	dec	r24
     718:	e1 f7       	brne	.-8      	; 0x712 <_ZNK3ros4TimemiERKS0_+0x7e>
     71a:	29 81       	ldd	r18, Y+1	; 0x01
     71c:	3a 81       	ldd	r19, Y+2	; 0x02
     71e:	4b 81       	ldd	r20, Y+3	; 0x03
     720:	5c 81       	ldd	r21, Y+4	; 0x04
     722:	6d 81       	ldd	r22, Y+5	; 0x05
     724:	7e 81       	ldd	r23, Y+6	; 0x06
}
     726:	8f 81       	ldd	r24, Y+7	; 0x07
     728:	98 85       	ldd	r25, Y+8	; 0x08
     72a:	60 96       	adiw	r28, 0x10	; 16
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <_ZN3ros22normalizeSecNSecSignedERlS0_>:
#include "ros/duration.h"

namespace ros
{
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	fb 01       	movw	r30, r22
  int32_t nsec_part = nsec;
     746:	40 81       	ld	r20, Z
     748:	51 81       	ldd	r21, Z+1	; 0x01
     74a:	62 81       	ldd	r22, Z+2	; 0x02
     74c:	73 81       	ldd	r23, Z+3	; 0x03
  int32_t sec_part = sec;
     74e:	dc 01       	movw	r26, r24
     750:	0d 91       	ld	r16, X+
     752:	1d 91       	ld	r17, X+
     754:	2d 91       	ld	r18, X+
     756:	3c 91       	ld	r19, X

  while (nsec_part > 1000000000L)
     758:	41 30       	cpi	r20, 0x01	; 1
     75a:	ba ec       	ldi	r27, 0xCA	; 202
     75c:	5b 07       	cpc	r21, r27
     75e:	ba e9       	ldi	r27, 0x9A	; 154
     760:	6b 07       	cpc	r22, r27
     762:	bb e3       	ldi	r27, 0x3B	; 59
     764:	7b 07       	cpc	r23, r27
     766:	44 f0       	brlt	.+16     	; 0x778 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x38>
  {
    nsec_part -= 1000000000L;
     768:	5a 5c       	subi	r21, 0xCA	; 202
     76a:	6a 49       	sbci	r22, 0x9A	; 154
     76c:	7b 43       	sbci	r23, 0x3B	; 59
    ++sec_part;
     76e:	0f 5f       	subi	r16, 0xFF	; 255
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	2f 4f       	sbci	r18, 0xFF	; 255
     774:	3f 4f       	sbci	r19, 0xFF	; 255
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
  int32_t nsec_part = nsec;
  int32_t sec_part = sec;

  while (nsec_part > 1000000000L)
     776:	f0 cf       	rjmp	.-32     	; 0x758 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x18>
  {
    nsec_part -= 1000000000L;
    ++sec_part;
  }
  while (nsec_part < 0)
     778:	77 ff       	sbrs	r23, 7
     77a:	08 c0       	rjmp	.+16     	; 0x78c <_ZN3ros22normalizeSecNSecSignedERlS0_+0x4c>
  {
    nsec_part += 1000000000L;
     77c:	56 53       	subi	r21, 0x36	; 54
     77e:	65 46       	sbci	r22, 0x65	; 101
     780:	74 4c       	sbci	r23, 0xC4	; 196
    --sec_part;
     782:	01 50       	subi	r16, 0x01	; 1
     784:	11 09       	sbc	r17, r1
     786:	21 09       	sbc	r18, r1
     788:	31 09       	sbc	r19, r1
  while (nsec_part > 1000000000L)
  {
    nsec_part -= 1000000000L;
    ++sec_part;
  }
  while (nsec_part < 0)
     78a:	f6 cf       	rjmp	.-20     	; 0x778 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x38>
  {
    nsec_part += 1000000000L;
    --sec_part;
  }
  sec = sec_part;
     78c:	dc 01       	movw	r26, r24
     78e:	0d 93       	st	X+, r16
     790:	1d 93       	st	X+, r17
     792:	2d 93       	st	X+, r18
     794:	3c 93       	st	X, r19
     796:	13 97       	sbiw	r26, 0x03	; 3
  nsec = nsec_part;
     798:	40 83       	st	Z, r20
     79a:	51 83       	std	Z+1, r21	; 0x01
     79c:	62 83       	std	Z+2, r22	; 0x02
     79e:	73 83       	std	Z+3, r23	; 0x03
}
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <_ZN3ros8DurationpLERKS0_>:

Duration& Duration::operator+=(const Duration &rhs)
{
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
  sec += rhs.sec;
     7b0:	08 81       	ld	r16, Y
     7b2:	19 81       	ldd	r17, Y+1	; 0x01
     7b4:	2a 81       	ldd	r18, Y+2	; 0x02
     7b6:	3b 81       	ldd	r19, Y+3	; 0x03
     7b8:	fb 01       	movw	r30, r22
     7ba:	80 81       	ld	r24, Z
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	a2 81       	ldd	r26, Z+2	; 0x02
     7c0:	b3 81       	ldd	r27, Z+3	; 0x03
     7c2:	80 0f       	add	r24, r16
     7c4:	91 1f       	adc	r25, r17
     7c6:	a2 1f       	adc	r26, r18
     7c8:	b3 1f       	adc	r27, r19
     7ca:	88 83       	st	Y, r24
     7cc:	99 83       	std	Y+1, r25	; 0x01
     7ce:	aa 83       	std	Y+2, r26	; 0x02
     7d0:	bb 83       	std	Y+3, r27	; 0x03
  nsec += rhs.nsec;
     7d2:	0c 81       	ldd	r16, Y+4	; 0x04
     7d4:	1d 81       	ldd	r17, Y+5	; 0x05
     7d6:	2e 81       	ldd	r18, Y+6	; 0x06
     7d8:	3f 81       	ldd	r19, Y+7	; 0x07
     7da:	84 81       	ldd	r24, Z+4	; 0x04
     7dc:	95 81       	ldd	r25, Z+5	; 0x05
     7de:	a6 81       	ldd	r26, Z+6	; 0x06
     7e0:	b7 81       	ldd	r27, Z+7	; 0x07
     7e2:	80 0f       	add	r24, r16
     7e4:	91 1f       	adc	r25, r17
     7e6:	a2 1f       	adc	r26, r18
     7e8:	b3 1f       	adc	r27, r19
     7ea:	8c 83       	std	Y+4, r24	; 0x04
     7ec:	9d 83       	std	Y+5, r25	; 0x05
     7ee:	ae 83       	std	Y+6, r26	; 0x06
     7f0:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSecSigned(sec, nsec);
     7f2:	be 01       	movw	r22, r28
     7f4:	6c 5f       	subi	r22, 0xFC	; 252
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	ce 01       	movw	r24, r28
     7fa:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
     7fe:	ce 01       	movw	r24, r28
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <_ZN3ros8DurationmIERKS0_>:

Duration& Duration::operator-=(const Duration &rhs)
{
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
  sec += -rhs.sec;
     814:	88 81       	ld	r24, Y
     816:	99 81       	ldd	r25, Y+1	; 0x01
     818:	aa 81       	ldd	r26, Y+2	; 0x02
     81a:	bb 81       	ldd	r27, Y+3	; 0x03
     81c:	fb 01       	movw	r30, r22
     81e:	00 81       	ld	r16, Z
     820:	11 81       	ldd	r17, Z+1	; 0x01
     822:	22 81       	ldd	r18, Z+2	; 0x02
     824:	33 81       	ldd	r19, Z+3	; 0x03
     826:	80 1b       	sub	r24, r16
     828:	91 0b       	sbc	r25, r17
     82a:	a2 0b       	sbc	r26, r18
     82c:	b3 0b       	sbc	r27, r19
     82e:	88 83       	st	Y, r24
     830:	99 83       	std	Y+1, r25	; 0x01
     832:	aa 83       	std	Y+2, r26	; 0x02
     834:	bb 83       	std	Y+3, r27	; 0x03
  nsec += -rhs.nsec;
     836:	8c 81       	ldd	r24, Y+4	; 0x04
     838:	9d 81       	ldd	r25, Y+5	; 0x05
     83a:	ae 81       	ldd	r26, Y+6	; 0x06
     83c:	bf 81       	ldd	r27, Y+7	; 0x07
     83e:	44 81       	ldd	r20, Z+4	; 0x04
     840:	55 81       	ldd	r21, Z+5	; 0x05
     842:	66 81       	ldd	r22, Z+6	; 0x06
     844:	77 81       	ldd	r23, Z+7	; 0x07
     846:	84 1b       	sub	r24, r20
     848:	95 0b       	sbc	r25, r21
     84a:	a6 0b       	sbc	r26, r22
     84c:	b7 0b       	sbc	r27, r23
     84e:	8c 83       	std	Y+4, r24	; 0x04
     850:	9d 83       	std	Y+5, r25	; 0x05
     852:	ae 83       	std	Y+6, r26	; 0x06
     854:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSecSigned(sec, nsec);
     856:	be 01       	movw	r22, r28
     858:	6c 5f       	subi	r22, 0xFC	; 252
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
     862:	ce 01       	movw	r24, r28
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	08 95       	ret

0000086e <_ZN3ros8DurationmLEd>:

Duration& Duration::operator*=(double scale)
{
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
     87c:	6a 01       	movw	r12, r20
     87e:	7b 01       	movw	r14, r22
  sec *= scale;
     880:	68 81       	ld	r22, Y
     882:	79 81       	ldd	r23, Y+1	; 0x01
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	9b 81       	ldd	r25, Y+3	; 0x03
     888:	0e 94 16 13 	call	0x262c	; 0x262c <__floatsisf>
     88c:	a7 01       	movw	r20, r14
     88e:	96 01       	movw	r18, r12
     890:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     894:	0e 94 de 12 	call	0x25bc	; 0x25bc <__fixsfsi>
     898:	68 83       	st	Y, r22
     89a:	79 83       	std	Y+1, r23	; 0x01
     89c:	8a 83       	std	Y+2, r24	; 0x02
     89e:	9b 83       	std	Y+3, r25	; 0x03
  nsec *= scale;
     8a0:	6c 81       	ldd	r22, Y+4	; 0x04
     8a2:	7d 81       	ldd	r23, Y+5	; 0x05
     8a4:	8e 81       	ldd	r24, Y+6	; 0x06
     8a6:	9f 81       	ldd	r25, Y+7	; 0x07
     8a8:	0e 94 16 13 	call	0x262c	; 0x262c <__floatsisf>
     8ac:	a7 01       	movw	r20, r14
     8ae:	96 01       	movw	r18, r12
     8b0:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     8b4:	0e 94 de 12 	call	0x25bc	; 0x25bc <__fixsfsi>
     8b8:	6c 83       	std	Y+4, r22	; 0x04
     8ba:	7d 83       	std	Y+5, r23	; 0x05
     8bc:	8e 83       	std	Y+6, r24	; 0x06
     8be:	9f 83       	std	Y+7, r25	; 0x07
  normalizeSecNSecSigned(sec, nsec);
     8c0:	be 01       	movw	r22, r28
     8c2:	6c 5f       	subi	r22, 0xFC	; 252
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
     8cc:	ce 01       	movw	r24, r28
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	08 95       	ret

000008dc <_ZNK8std_msgs4Time9serializeEPh>:
    Time():
      data()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     8dc:	dc 01       	movw	r26, r24
     8de:	fb 01       	movw	r30, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
     8e0:	12 96       	adiw	r26, 0x02	; 2
     8e2:	8c 91       	ld	r24, X
     8e4:	12 97       	sbiw	r26, 0x02	; 2
     8e6:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
     8e8:	13 96       	adiw	r26, 0x03	; 3
     8ea:	8c 91       	ld	r24, X
     8ec:	13 97       	sbiw	r26, 0x03	; 3
     8ee:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
     8f0:	14 96       	adiw	r26, 0x04	; 4
     8f2:	8c 91       	ld	r24, X
     8f4:	14 97       	sbiw	r26, 0x04	; 4
     8f6:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
     8f8:	15 96       	adiw	r26, 0x05	; 5
     8fa:	8c 91       	ld	r24, X
     8fc:	15 97       	sbiw	r26, 0x05	; 5
     8fe:	83 83       	std	Z+3, r24	; 0x03
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
     900:	16 96       	adiw	r26, 0x06	; 6
     902:	8c 91       	ld	r24, X
     904:	16 97       	sbiw	r26, 0x06	; 6
     906:	84 83       	std	Z+4, r24	; 0x04
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
     908:	17 96       	adiw	r26, 0x07	; 7
     90a:	8c 91       	ld	r24, X
     90c:	17 97       	sbiw	r26, 0x07	; 7
     90e:	85 83       	std	Z+5, r24	; 0x05
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
     910:	18 96       	adiw	r26, 0x08	; 8
     912:	8c 91       	ld	r24, X
     914:	18 97       	sbiw	r26, 0x08	; 8
     916:	86 83       	std	Z+6, r24	; 0x06
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
     918:	19 96       	adiw	r26, 0x09	; 9
     91a:	8c 91       	ld	r24, X
     91c:	87 83       	std	Z+7, r24	; 0x07
      offset += sizeof(this->data.nsec);
      return offset;
    }
     91e:	88 e0       	ldi	r24, 0x08	; 8
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	08 95       	ret

00000924 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
     924:	fc 01       	movw	r30, r24
     926:	db 01       	movw	r26, r22
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
     928:	4c 91       	ld	r20, X
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	42 83       	std	Z+2, r20	; 0x02
     932:	53 83       	std	Z+3, r21	; 0x03
     934:	64 83       	std	Z+4, r22	; 0x04
     936:	75 83       	std	Z+5, r23	; 0x05
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	8c 91       	ld	r24, X
     93c:	11 97       	sbiw	r26, 0x01	; 1
     93e:	58 2b       	or	r21, r24
     940:	42 83       	std	Z+2, r20	; 0x02
     942:	53 83       	std	Z+3, r21	; 0x03
     944:	64 83       	std	Z+4, r22	; 0x04
     946:	75 83       	std	Z+5, r23	; 0x05
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
     948:	12 96       	adiw	r26, 0x02	; 2
     94a:	8c 91       	ld	r24, X
     94c:	12 97       	sbiw	r26, 0x02	; 2
     94e:	68 2b       	or	r22, r24
     950:	42 83       	std	Z+2, r20	; 0x02
     952:	53 83       	std	Z+3, r21	; 0x03
     954:	64 83       	std	Z+4, r22	; 0x04
     956:	75 83       	std	Z+5, r23	; 0x05
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
     958:	13 96       	adiw	r26, 0x03	; 3
     95a:	8c 91       	ld	r24, X
     95c:	13 97       	sbiw	r26, 0x03	; 3
     95e:	78 2b       	or	r23, r24
     960:	42 83       	std	Z+2, r20	; 0x02
     962:	53 83       	std	Z+3, r21	; 0x03
     964:	64 83       	std	Z+4, r22	; 0x04
     966:	75 83       	std	Z+5, r23	; 0x05
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	4c 91       	ld	r20, X
     96c:	14 97       	sbiw	r26, 0x04	; 4
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	46 83       	std	Z+6, r20	; 0x06
     976:	57 83       	std	Z+7, r21	; 0x07
     978:	60 87       	std	Z+8, r22	; 0x08
     97a:	71 87       	std	Z+9, r23	; 0x09
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
     97c:	15 96       	adiw	r26, 0x05	; 5
     97e:	8c 91       	ld	r24, X
     980:	15 97       	sbiw	r26, 0x05	; 5
     982:	58 2b       	or	r21, r24
     984:	46 83       	std	Z+6, r20	; 0x06
     986:	57 83       	std	Z+7, r21	; 0x07
     988:	60 87       	std	Z+8, r22	; 0x08
     98a:	71 87       	std	Z+9, r23	; 0x09
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
     98c:	16 96       	adiw	r26, 0x06	; 6
     98e:	8c 91       	ld	r24, X
     990:	16 97       	sbiw	r26, 0x06	; 6
     992:	68 2b       	or	r22, r24
     994:	46 83       	std	Z+6, r20	; 0x06
     996:	57 83       	std	Z+7, r21	; 0x07
     998:	60 87       	std	Z+8, r22	; 0x08
     99a:	71 87       	std	Z+9, r23	; 0x09
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
     99c:	17 96       	adiw	r26, 0x07	; 7
     99e:	8c 91       	ld	r24, X
     9a0:	78 2b       	or	r23, r24
     9a2:	46 83       	std	Z+6, r20	; 0x06
     9a4:	57 83       	std	Z+7, r21	; 0x07
     9a6:	60 87       	std	Z+8, r22	; 0x08
     9a8:	71 87       	std	Z+9, r23	; 0x09
      offset += sizeof(this->data.nsec);
     return offset;
    }
     9aa:	88 e0       	ldi	r24, 0x08	; 8
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	08 95       	ret

000009b0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
     9b0:	88 e2       	ldi	r24, 0x28	; 40
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	08 95       	ret

000009b6 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
     9b6:	86 e3       	ldi	r24, 0x36	; 54
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	08 95       	ret

000009bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
     9bc:	87 e5       	ldi	r24, 0x57	; 87
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	08 95       	ret

000009c2 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
     9c2:	80 e7       	ldi	r24, 0x70	; 112
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	08 95       	ret

000009c8 <_ZN14rosserial_msgs3Log7getTypeEv>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
     9c8:	81 e9       	ldi	r24, 0x91	; 145
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	08 95       	ret

000009ce <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
     9ce:	84 ea       	ldi	r24, 0xA4	; 164
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	08 95       	ret

000009d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    virtual const char * getType() override { return REQUESTPARAM; };
     9d4:	8c e0       	ldi	r24, 0x0C	; 12
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	08 95       	ret

000009da <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
     9da:	85 ec       	ldi	r24, 0xC5	; 197
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	08 95       	ret

000009e0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stride);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
     9e0:	86 ee       	ldi	r24, 0xE6	; 230
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	08 95       	ret

000009e6 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	08 95       	ret

000009ec <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     9ec:	8f 92       	push	r8
     9ee:	9f 92       	push	r9
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
     a06:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	fb 01       	movw	r30, r22
     a0c:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
     a12:	8c 81       	ldd	r24, Y+4	; 0x04
     a14:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	83 83       	std	Z+3, r24	; 0x03
     a1a:	c1 2c       	mov	r12, r1
     a1c:	d1 2c       	mov	r13, r1
      offset += sizeof(this->dim_length);
      for( uint32_t i = 0; i < dim_length; i++){
     a1e:	81 2c       	mov	r8, r1
     a20:	91 2c       	mov	r9, r1
     a22:	54 01       	movw	r10, r8
      int offset = 0;
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->dim_length);
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	e8 2e       	mov	r14, r24
     a28:	f1 2c       	mov	r15, r1
      for( uint32_t i = 0; i < dim_length; i++){
     a2a:	4a 81       	ldd	r20, Y+2	; 0x02
     a2c:	5b 81       	ldd	r21, Y+3	; 0x03
     a2e:	6c 81       	ldd	r22, Y+4	; 0x04
     a30:	7d 81       	ldd	r23, Y+5	; 0x05
     a32:	d8 01       	movw	r26, r16
     a34:	ae 0d       	add	r26, r14
     a36:	bf 1d       	adc	r27, r15
     a38:	84 16       	cp	r8, r20
     a3a:	95 06       	cpc	r9, r21
     a3c:	a6 06       	cpc	r10, r22
     a3e:	b7 06       	cpc	r11, r23
     a40:	c0 f4       	brcc	.+48     	; 0xa72 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x86>
      offset += this->dim[i].serialize(outbuffer + offset);
     a42:	8a 89       	ldd	r24, Y+18	; 0x12
     a44:	9b 89       	ldd	r25, Y+19	; 0x13
     a46:	8c 0d       	add	r24, r12
     a48:	9d 1d       	adc	r25, r13
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 81       	ld	r18, Z
     a4e:	31 81       	ldd	r19, Z+1	; 0x01
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	31 81       	ldd	r19, Z+1	; 0x01
     a56:	bd 01       	movw	r22, r26
     a58:	f9 01       	movw	r30, r18
     a5a:	19 95       	eicall
     a5c:	e8 0e       	add	r14, r24
     a5e:	f9 1e       	adc	r15, r25
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->dim_length);
      for( uint32_t i = 0; i < dim_length; i++){
     a60:	ff ef       	ldi	r31, 0xFF	; 255
     a62:	8f 1a       	sub	r8, r31
     a64:	9f 0a       	sbc	r9, r31
     a66:	af 0a       	sbc	r10, r31
     a68:	bf 0a       	sbc	r11, r31
     a6a:	8c e0       	ldi	r24, 0x0C	; 12
     a6c:	c8 0e       	add	r12, r24
     a6e:	d1 1c       	adc	r13, r1
     a70:	dc cf       	rjmp	.-72     	; 0xa2a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x3e>
      offset += this->dim[i].serialize(outbuffer + offset);
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
     a72:	8c 89       	ldd	r24, Y+20	; 0x14
     a74:	8c 93       	st	X, r24
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
     a76:	8d 89       	ldd	r24, Y+21	; 0x15
     a78:	11 96       	adiw	r26, 0x01	; 1
     a7a:	8c 93       	st	X, r24
     a7c:	11 97       	sbiw	r26, 0x01	; 1
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
     a7e:	8e 89       	ldd	r24, Y+22	; 0x16
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	8c 93       	st	X, r24
     a84:	12 97       	sbiw	r26, 0x02	; 2
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
     a86:	8f 89       	ldd	r24, Y+23	; 0x17
     a88:	13 96       	adiw	r26, 0x03	; 3
     a8a:	8c 93       	st	X, r24
      offset += sizeof(this->data_offset);
      return offset;
    }
     a8c:	c7 01       	movw	r24, r14
     a8e:	04 96       	adiw	r24, 0x04	; 4
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	bf 90       	pop	r11
     aa2:	af 90       	pop	r10
     aa4:	9f 90       	pop	r9
     aa6:	8f 90       	pop	r8
     aa8:	08 95       	ret

00000aaa <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
     aaa:	84 e2       	ldi	r24, 0x24	; 36
     aac:	93 e0       	ldi	r25, 0x03	; 3
     aae:	08 95       	ret

00000ab0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
     ab0:	8e e3       	ldi	r24, 0x3E	; 62
     ab2:	93 e0       	ldi	r25, 0x03	; 3
     ab4:	08 95       	ret

00000ab6 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:
      layout(),
      data_length(0), st_data(), data(nullptr)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ec 01       	movw	r28, r24
     ac6:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
     ac8:	02 96       	adiw	r24, 0x02	; 2
     aca:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
     ace:	68 01       	movw	r12, r16
     ad0:	c8 0e       	add	r12, r24
     ad2:	d9 1e       	adc	r13, r25
     ad4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     ad6:	f6 01       	movw	r30, r12
     ad8:	20 83       	st	Z, r18
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
     ada:	2b 8d       	ldd	r18, Y+27	; 0x1b
     adc:	21 83       	std	Z+1, r18	; 0x01
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
     ade:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ae0:	22 83       	std	Z+2, r18	; 0x02
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
     ae2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     ae4:	23 83       	std	Z+3, r18	; 0x03
      offset += sizeof(this->data_length);
     ae6:	04 96       	adiw	r24, 0x04	; 4
     ae8:	d6 01       	movw	r26, r12
      for( uint32_t i = 0; i < data_length; i++){
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	ba 01       	movw	r22, r20
     af0:	0a 8d       	ldd	r16, Y+26	; 0x1a
     af2:	1b 8d       	ldd	r17, Y+27	; 0x1b
     af4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     af6:	3d 8d       	ldd	r19, Y+29	; 0x1d
     af8:	40 17       	cp	r20, r16
     afa:	51 07       	cpc	r21, r17
     afc:	62 07       	cpc	r22, r18
     afe:	73 07       	cpc	r23, r19
     b00:	f8 f4       	brcc	.+62     	; 0xb40 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x8a>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
     b02:	9d 01       	movw	r18, r26
     b04:	2c 19       	sub	r18, r12
     b06:	3d 09       	sbc	r19, r13
     b08:	0a a1       	ldd	r16, Y+34	; 0x22
     b0a:	1b a1       	ldd	r17, Y+35	; 0x23
     b0c:	20 0f       	add	r18, r16
     b0e:	31 1f       	adc	r19, r17
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
     b10:	f9 01       	movw	r30, r18
     b12:	f0 80       	ld	r15, Z
     b14:	01 81       	ldd	r16, Z+1	; 0x01
     b16:	12 81       	ldd	r17, Z+2	; 0x02
     b18:	23 81       	ldd	r18, Z+3	; 0x03
     b1a:	14 96       	adiw	r26, 0x04	; 4
     b1c:	fc 92       	st	X, r15
     b1e:	14 97       	sbiw	r26, 0x04	; 4
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
     b20:	15 96       	adiw	r26, 0x05	; 5
     b22:	0c 93       	st	X, r16
     b24:	15 97       	sbiw	r26, 0x05	; 5
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
     b26:	16 96       	adiw	r26, 0x06	; 6
     b28:	1c 93       	st	X, r17
     b2a:	16 97       	sbiw	r26, 0x06	; 6
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
     b2c:	17 96       	adiw	r26, 0x07	; 7
     b2e:	2c 93       	st	X, r18
     b30:	17 97       	sbiw	r26, 0x07	; 7
     b32:	04 96       	adiw	r24, 0x04	; 4
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_length);
      for( uint32_t i = 0; i < data_length; i++){
     b34:	4f 5f       	subi	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	6f 4f       	sbci	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	14 96       	adiw	r26, 0x04	; 4
     b3e:	d8 cf       	rjmp	.-80     	; 0xaf0 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x3a>
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data[i]);
      }
      return offset;
    }
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	08 95       	ret

00000b50 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
     b50:	8f e5       	ldi	r24, 0x5F	; 95
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	08 95       	ret

00000b56 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
     b56:	8a e7       	ldi	r24, 0x7A	; 122
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	08 95       	ret

00000b5c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
  {
    return endpoint_;
  }
     b5c:	fc 01       	movw	r30, r24
     b5e:	84 a5       	ldd	r24, Z+44	; 0x2c
     b60:	95 a5       	ldd	r25, Z+45	; 0x2d
     b62:	08 95       	ret

00000b64 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  }

  virtual const char * getMsgType() override
  {
    return this->msg.getType();
  }
     b64:	8f e5       	ldi	r24, 0x5F	; 95
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	08 95       	ret

00000b6a <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
     b6a:	8a e7       	ldi	r24, 0x7A	; 122
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	08 95       	ret

00000b70 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE9connectedEv>:


  /* Are we connected to the PC? */
  virtual bool connected() override
  {
    return configured_;
     b70:	8f 57       	subi	r24, 0x7F	; 127
     b72:	9b 4f       	sbci	r25, 0xFB	; 251
  };
     b74:	fc 01       	movw	r30, r24
     b76:	80 81       	ld	r24, Z
     b78:	08 95       	ret

00000b7a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg) override
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x12>
     b8c:	1f 92       	push	r1
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
  {
    if (id >= 100 && !configured_)
     b94:	64 36       	cpi	r22, 0x64	; 100
     b96:	71 05       	cpc	r23, r1
     b98:	3c f0       	brlt	.+14     	; 0xba8 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     b9a:	fc 01       	movw	r30, r24
     b9c:	ef 57       	subi	r30, 0x7F	; 127
     b9e:	fb 4f       	sbci	r31, 0xFB	; 251
     ba0:	20 81       	ld	r18, Z
     ba2:	22 23       	and	r18, r18
     ba4:	09 f4       	brne	.+2      	; 0xba8 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     ba6:	6d c0       	rjmp	.+218    	; 0xc82 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x108>
     ba8:	da 01       	movw	r26, r20
     baa:	7b 01       	movw	r14, r22
     bac:	8c 01       	movw	r16, r24
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
     bae:	bc 01       	movw	r22, r24
     bb0:	66 5e       	subi	r22, 0xE6	; 230
     bb2:	7d 4f       	sbci	r23, 0xFD	; 253
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	01 90       	ld	r0, Z+
     bba:	f0 81       	ld	r31, Z
     bbc:	e0 2d       	mov	r30, r0
     bbe:	ca 01       	movw	r24, r20
     bc0:	19 95       	eicall

    /* setup the header */
    message_out[0] = 0xff;
     bc2:	68 01       	movw	r12, r16
     bc4:	2d ee       	ldi	r18, 0xED	; 237
     bc6:	c2 1a       	sub	r12, r18
     bc8:	2d ef       	ldi	r18, 0xFD	; 253
     bca:	d2 0a       	sbc	r13, r18
     bcc:	2f ef       	ldi	r18, 0xFF	; 255
     bce:	d6 01       	movw	r26, r12
     bd0:	2c 93       	st	X, r18
    message_out[1] = PROTOCOL_VER;
     bd2:	f8 01       	movw	r30, r16
     bd4:	ec 5e       	subi	r30, 0xEC	; 236
     bd6:	fd 4f       	sbci	r31, 0xFD	; 253
     bd8:	2e ef       	ldi	r18, 0xFE	; 254
     bda:	20 83       	st	Z, r18
    message_out[2] = (uint8_t)((uint16_t)l & 255);
     bdc:	31 96       	adiw	r30, 0x01	; 1
     bde:	80 83       	st	Z, r24
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
     be0:	31 96       	adiw	r30, 0x01	; 1
     be2:	90 83       	st	Z, r25
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
     be4:	31 96       	adiw	r30, 0x01	; 1
     be6:	29 2f       	mov	r18, r25
     be8:	28 0f       	add	r18, r24
     bea:	20 95       	com	r18
     bec:	20 83       	st	Z, r18
    message_out[5] = (uint8_t)((int16_t)id & 255);
     bee:	31 96       	adiw	r30, 0x01	; 1
     bf0:	e0 82       	st	Z, r14
    message_out[6] = (uint8_t)((int16_t)id >> 8);
     bf2:	16 96       	adiw	r26, 0x06	; 6
     bf4:	fc 92       	st	X, r15

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
     bf6:	45 e0       	ldi	r20, 0x05	; 5
     bf8:	50 e0       	ldi	r21, 0x00	; 0
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);

    /* calculate checksum */
    int chk = 0;
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
    for (int i = 5; i < l + 7; i++)
     bfe:	dc 01       	movw	r26, r24
     c00:	16 96       	adiw	r26, 0x06	; 6
     c02:	a4 17       	cp	r26, r20
     c04:	b5 07       	cpc	r27, r21
     c06:	34 f0       	brlt	.+12     	; 0xc14 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9a>
      chk += message_out[i];
     c08:	61 91       	ld	r22, Z+
     c0a:	26 0f       	add	r18, r22
     c0c:	31 1d       	adc	r19, r1
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
     c0e:	4f 5f       	subi	r20, 0xFF	; 255
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	f7 cf       	rjmp	.-18     	; 0xc02 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x88>
      chk += message_out[i];
    l += 7;
    message_out[l++] = 255 - (chk % 256);
     c14:	7c 01       	movw	r14, r24
     c16:	b8 e0       	ldi	r27, 0x08	; 8
     c18:	eb 0e       	add	r14, r27
     c1a:	f1 1c       	adc	r15, r1
     c1c:	80 0f       	add	r24, r16
     c1e:	91 1f       	adc	r25, r17
     c20:	fc 01       	movw	r30, r24
     c22:	e6 5e       	subi	r30, 0xE6	; 230
     c24:	fd 4f       	sbci	r31, 0xFD	; 253
     c26:	20 95       	com	r18
     c28:	20 83       	st	Z, r18

    if (l <= OUTPUT_SIZE)
     c2a:	e1 e0       	ldi	r30, 0x01	; 1
     c2c:	ee 16       	cp	r14, r30
     c2e:	e2 e0       	ldi	r30, 0x02	; 2
     c30:	fe 06       	cpc	r15, r30
     c32:	6c f4       	brge	.+26     	; 0xc4e <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xd4>
    {
      hardware_.write(message_out, l);
     c34:	86 01       	movw	r16, r12


    // Send a byte of data to ROS connection
    void write(uint8_t* data, int length)
    {
      for(int i = 0; i < length; i++)
     c36:	c8 01       	movw	r24, r16
     c38:	8c 19       	sub	r24, r12
     c3a:	9d 09       	sbc	r25, r13
     c3c:	8e 15       	cp	r24, r14
     c3e:	9f 05       	cpc	r25, r15
     c40:	1c f5       	brge	.+70     	; 0xc88 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
      {
        avr_uart_send_byte(data[i]);
     c42:	d8 01       	movw	r26, r16
     c44:	8d 91       	ld	r24, X+
     c46:	8d 01       	movw	r16, r26
     c48:	0e 94 68 01 	call	0x2d0	; 0x2d0 <avr_uart_send_byte>
     c4c:	f4 cf       	rjmp	.-24     	; 0xc36 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbc>
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
     c4e:	85 ef       	ldi	r24, 0xF5	; 245
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01

protected:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	8b 83       	std	Y+3, r24	; 0x03
    l.msg = (char*)msg;
     c5a:	8b e9       	ldi	r24, 0x9B	; 155
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	9d 83       	std	Y+5, r25	; 0x05
     c60:	8c 83       	std	Y+4, r24	; 0x04
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
     c62:	d8 01       	movw	r26, r16
     c64:	ed 91       	ld	r30, X+
     c66:	fc 91       	ld	r31, X
     c68:	01 90       	ld	r0, Z+
     c6a:	f0 81       	ld	r31, Z
     c6c:	e0 2d       	mov	r30, r0
     c6e:	ae 01       	movw	r20, r28
     c70:	4f 5f       	subi	r20, 0xFF	; 255
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	67 e0       	ldi	r22, 0x07	; 7
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	c8 01       	movw	r24, r16
     c7a:	19 95       	eicall
      return l;
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x110>
  }

  virtual int publish(int id, const Msg * msg) override
  {
    if (id >= 100 && !configured_)
      return 0;
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x110>


    // Send a byte of data to ROS connection
    void write(uint8_t* data, int length)
    {
      for(int i = 0; i < length; i++)
     c88:	c7 01       	movw	r24, r14
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	08 95       	ret

00000ca6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
  {
    for (size_t i = 0; i < sizeof(V); i++)
      arr[i] = (var >> (8 * i));
     cb2:	6a 01       	movw	r12, r20
     cb4:	7b 01       	movw	r14, r22
     cb6:	02 2e       	mov	r0, r18
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x1c>
     cba:	f6 94       	lsr	r15
     cbc:	e7 94       	ror	r14
     cbe:	d7 94       	ror	r13
     cc0:	c7 94       	ror	r12
     cc2:	0a 94       	dec	r0
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x14>
     cc6:	fc 01       	movw	r30, r24
     cc8:	c1 92       	st	Z+, r12
     cca:	cf 01       	movw	r24, r30
     ccc:	28 5f       	subi	r18, 0xF8	; 248
     cce:	3f 4f       	sbci	r19, 0xFF	; 255

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
  {
    for (size_t i = 0; i < sizeof(V); i++)
     cd0:	20 32       	cpi	r18, 0x20	; 32
     cd2:	31 05       	cpc	r19, r1
     cd4:	71 f7       	brne	.-36     	; 0xcb2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xc>
      arr[i] = (var >> (8 * i));
  }
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	08 95       	ret

00000ce0 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:
      size(0),
      stride(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      uint32_t length_label = strlen(this->label);
     cf0:	aa 81       	ldd	r26, Y+2	; 0x02
     cf2:	bb 81       	ldd	r27, Y+3	; 0x03
     cf4:	fd 01       	movw	r30, r26
     cf6:	01 90       	ld	r0, Z+
     cf8:	00 20       	and	r0, r0
     cfa:	e9 f7       	brne	.-6      	; 0xcf6 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh+0x16>
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	7f 01       	movw	r14, r30
     d00:	ea 1a       	sub	r14, r26
     d02:	fb 0a       	sbc	r15, r27
      varToArr(outbuffer + offset, length_label);
     d04:	a7 01       	movw	r20, r14
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	c8 01       	movw	r24, r16
     d0c:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->label, length_label);
     d10:	6a 81       	ldd	r22, Y+2	; 0x02
     d12:	7b 81       	ldd	r23, Y+3	; 0x03
     d14:	a7 01       	movw	r20, r14
     d16:	c8 01       	movw	r24, r16
     d18:	04 96       	adiw	r24, 0x04	; 4
     d1a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <memcpy>
      offset += length_label;
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
     d1e:	f8 01       	movw	r30, r16
     d20:	ee 0d       	add	r30, r14
     d22:	ff 1d       	adc	r31, r15
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	84 83       	std	Z+4, r24	; 0x04
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
     d28:	8d 81       	ldd	r24, Y+5	; 0x05
     d2a:	85 83       	std	Z+5, r24	; 0x05
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
     d2c:	8e 81       	ldd	r24, Y+6	; 0x06
     d2e:	86 83       	std	Z+6, r24	; 0x06
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
     d30:	8f 81       	ldd	r24, Y+7	; 0x07
     d32:	87 83       	std	Z+7, r24	; 0x07
      offset += sizeof(this->size);
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
     d34:	88 85       	ldd	r24, Y+8	; 0x08
     d36:	80 87       	std	Z+8, r24	; 0x08
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
     d38:	89 85       	ldd	r24, Y+9	; 0x09
     d3a:	81 87       	std	Z+9, r24	; 0x09
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
     d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d3e:	82 87       	std	Z+10, r24	; 0x0a
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
     d40:	8b 85       	ldd	r24, Y+11	; 0x0b
     d42:	83 87       	std	Z+11, r24	; 0x0b
      offset += sizeof(this->stride);
      return offset;
    }
     d44:	c7 01       	movw	r24, r14
     d46:	0c 96       	adiw	r24, 0x0c	; 12
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	08 95       	ret

00000d56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     d56:	4f 92       	push	r4
     d58:	5f 92       	push	r5
     d5a:	6f 92       	push	r6
     d5c:	7f 92       	push	r7
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	fb 01       	movw	r30, r22
     d7a:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	83 83       	std	Z+3, r24	; 0x03
     d88:	db 01       	movw	r26, r22
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	ba 01       	movw	r22, r20
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
     d90:	e4 e0       	ldi	r30, 0x04	; 4
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	14 96       	adiw	r26, 0x04	; 4
      for( uint32_t i = 0; i < ints_length; i++){
     d96:	ca 80       	ldd	r12, Y+2	; 0x02
     d98:	db 80       	ldd	r13, Y+3	; 0x03
     d9a:	ec 80       	ldd	r14, Y+4	; 0x04
     d9c:	fd 80       	ldd	r15, Y+5	; 0x05
     d9e:	cf 01       	movw	r24, r30
     da0:	04 96       	adiw	r24, 0x04	; 4
     da2:	4c 15       	cp	r20, r12
     da4:	5d 05       	cpc	r21, r13
     da6:	6e 05       	cpc	r22, r14
     da8:	7f 05       	cpc	r23, r15
     daa:	c8 f4       	brcc	.+50     	; 0xdde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
     dac:	2a 85       	ldd	r18, Y+10	; 0x0a
     dae:	3b 85       	ldd	r19, Y+11	; 0x0b
     db0:	e2 0f       	add	r30, r18
     db2:	f3 1f       	adc	r31, r19
     db4:	34 97       	sbiw	r30, 0x04	; 4
     db6:	d0 80       	ld	r13, Z
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
     db8:	f1 80       	ldd	r15, Z+1	; 0x01
     dba:	32 81       	ldd	r19, Z+2	; 0x02
     dbc:	23 81       	ldd	r18, Z+3	; 0x03
     dbe:	dc 92       	st	X, r13
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	fc 92       	st	X, r15
     dc4:	11 97       	sbiw	r26, 0x01	; 1
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
     dc6:	12 96       	adiw	r26, 0x02	; 2
     dc8:	3c 93       	st	X, r19
     dca:	12 97       	sbiw	r26, 0x02	; 2
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	2c 93       	st	X, r18
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	fc 01       	movw	r30, r24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     dd4:	4f 5f       	subi	r20, 0xFF	; 255
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	6f 4f       	sbci	r22, 0xFF	; 255
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	db cf       	rjmp	.-74     	; 0xd94 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x3e>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
     dde:	5f 01       	movw	r10, r30
     de0:	a0 0e       	add	r10, r16
     de2:	b1 1e       	adc	r11, r17
     de4:	2c 85       	ldd	r18, Y+12	; 0x0c
     de6:	f5 01       	movw	r30, r10
     de8:	20 83       	st	Z, r18
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
     dea:	2d 85       	ldd	r18, Y+13	; 0x0d
     dec:	21 83       	std	Z+1, r18	; 0x01
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
     dee:	2e 85       	ldd	r18, Y+14	; 0x0e
     df0:	22 83       	std	Z+2, r18	; 0x02
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
     df2:	2f 85       	ldd	r18, Y+15	; 0x0f
     df4:	23 83       	std	Z+3, r18	; 0x03
     df6:	d5 01       	movw	r26, r10
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	ba 01       	movw	r22, r20
     dfe:	cc 84       	ldd	r12, Y+12	; 0x0c
     e00:	dd 84       	ldd	r13, Y+13	; 0x0d
     e02:	ee 84       	ldd	r14, Y+14	; 0x0e
     e04:	ff 84       	ldd	r15, Y+15	; 0x0f
     e06:	9c 01       	movw	r18, r24
     e08:	2c 5f       	subi	r18, 0xFC	; 252
     e0a:	3f 4f       	sbci	r19, 0xFF	; 255
     e0c:	4c 15       	cp	r20, r12
     e0e:	5d 05       	cpc	r21, r13
     e10:	6e 05       	cpc	r22, r14
     e12:	7f 05       	cpc	r23, r15
     e14:	f8 f4       	brcc	.+62     	; 0xe54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xfe>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
     e16:	cd 01       	movw	r24, r26
     e18:	8a 19       	sub	r24, r10
     e1a:	9b 09       	sbc	r25, r11
     e1c:	ec 88       	ldd	r14, Y+20	; 0x14
     e1e:	fd 88       	ldd	r15, Y+21	; 0x15
     e20:	8e 0d       	add	r24, r14
     e22:	9f 1d       	adc	r25, r15
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
     e24:	fc 01       	movw	r30, r24
     e26:	d0 80       	ld	r13, Z
     e28:	e1 80       	ldd	r14, Z+1	; 0x01
     e2a:	f2 80       	ldd	r15, Z+2	; 0x02
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	dc 92       	st	X, r13
     e32:	14 97       	sbiw	r26, 0x04	; 4
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
     e34:	15 96       	adiw	r26, 0x05	; 5
     e36:	ec 92       	st	X, r14
     e38:	15 97       	sbiw	r26, 0x05	; 5
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
     e3a:	16 96       	adiw	r26, 0x06	; 6
     e3c:	fc 92       	st	X, r15
     e3e:	16 97       	sbiw	r26, 0x06	; 6
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
     e40:	17 96       	adiw	r26, 0x07	; 7
     e42:	8c 93       	st	X, r24
     e44:	17 97       	sbiw	r26, 0x07	; 7
     e46:	c9 01       	movw	r24, r18
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
     e48:	4f 5f       	subi	r20, 0xFF	; 255
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	6f 4f       	sbci	r22, 0xFF	; 255
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	14 96       	adiw	r26, 0x04	; 4
     e52:	d5 cf       	rjmp	.-86     	; 0xdfe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa8>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
     e54:	f8 01       	movw	r30, r16
     e56:	e8 0f       	add	r30, r24
     e58:	f9 1f       	adc	r31, r25
     e5a:	8e 89       	ldd	r24, Y+22	; 0x16
     e5c:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
     e5e:	8f 89       	ldd	r24, Y+23	; 0x17
     e60:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
     e62:	88 8d       	ldd	r24, Y+24	; 0x18
     e64:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
     e66:	89 8d       	ldd	r24, Y+25	; 0x19
     e68:	83 83       	std	Z+3, r24	; 0x03
      offset += sizeof(this->strings_length);
     e6a:	79 01       	movw	r14, r18
     e6c:	a1 2c       	mov	r10, r1
     e6e:	b1 2c       	mov	r11, r1
      for( uint32_t i = 0; i < strings_length; i++){
     e70:	41 2c       	mov	r4, r1
     e72:	51 2c       	mov	r5, r1
     e74:	32 01       	movw	r6, r4
     e76:	8e 89       	ldd	r24, Y+22	; 0x16
     e78:	9f 89       	ldd	r25, Y+23	; 0x17
     e7a:	a8 8d       	ldd	r26, Y+24	; 0x18
     e7c:	b9 8d       	ldd	r27, Y+25	; 0x19
     e7e:	48 16       	cp	r4, r24
     e80:	59 06       	cpc	r5, r25
     e82:	6a 06       	cpc	r6, r26
     e84:	7b 06       	cpc	r7, r27
     e86:	80 f5       	brcc	.+96     	; 0xee8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x192>
      uint32_t length_stringsi = strlen(this->strings[i]);
     e88:	ec 8d       	ldd	r30, Y+28	; 0x1c
     e8a:	fd 8d       	ldd	r31, Y+29	; 0x1d
     e8c:	ea 0d       	add	r30, r10
     e8e:	fb 1d       	adc	r31, r11
     e90:	a0 81       	ld	r26, Z
     e92:	b1 81       	ldd	r27, Z+1	; 0x01
     e94:	fd 01       	movw	r30, r26
     e96:	01 90       	ld	r0, Z+
     e98:	00 20       	and	r0, r0
     e9a:	e9 f7       	brne	.-6      	; 0xe96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x140>
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	6f 01       	movw	r12, r30
     ea0:	ca 1a       	sub	r12, r26
     ea2:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_stringsi);
     ea4:	a6 01       	movw	r20, r12
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	c8 01       	movw	r24, r16
     eac:	8e 0d       	add	r24, r14
     eae:	9f 1d       	adc	r25, r15
     eb0:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
     eb4:	f4 e0       	ldi	r31, 0x04	; 4
     eb6:	ef 0e       	add	r14, r31
     eb8:	f1 1c       	adc	r15, r1
     eba:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ebc:	fd 8d       	ldd	r31, Y+29	; 0x1d
     ebe:	ea 0d       	add	r30, r10
     ec0:	fb 1d       	adc	r31, r11
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	a6 01       	movw	r20, r12
     ec8:	c8 01       	movw	r24, r16
     eca:	8e 0d       	add	r24, r14
     ecc:	9f 1d       	adc	r25, r15
     ece:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <memcpy>
      offset += length_stringsi;
     ed2:	ec 0c       	add	r14, r12
     ed4:	fd 1c       	adc	r15, r13
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->strings_length);
      for( uint32_t i = 0; i < strings_length; i++){
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	48 1a       	sub	r4, r24
     eda:	58 0a       	sbc	r5, r24
     edc:	68 0a       	sbc	r6, r24
     ede:	78 0a       	sbc	r7, r24
     ee0:	e2 e0       	ldi	r30, 0x02	; 2
     ee2:	ae 0e       	add	r10, r30
     ee4:	b1 1c       	adc	r11, r1
     ee6:	c7 cf       	rjmp	.-114    	; 0xe76 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x120>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
     ee8:	c7 01       	movw	r24, r14
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	7f 90       	pop	r7
     f00:	6f 90       	pop	r6
     f02:	5f 90       	pop	r5
     f04:	4f 90       	pop	r4
     f06:	08 95       	ret

00000f08 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	8c 01       	movw	r16, r24
     f16:	7b 01       	movw	r14, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
     f18:	dc 01       	movw	r26, r24
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	2c 91       	ld	r18, X
     f1e:	12 97       	sbiw	r26, 0x02	; 2
     f20:	fb 01       	movw	r30, r22
     f22:	21 93       	st	Z+, r18
     f24:	cf 01       	movw	r24, r30
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
     f26:	13 96       	adiw	r26, 0x03	; 3
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	14 97       	sbiw	r26, 0x04	; 4
     f2e:	ef 01       	movw	r28, r30
     f30:	09 90       	ld	r0, Y+
     f32:	00 20       	and	r0, r0
     f34:	e9 f7       	brne	.-6      	; 0xf30 <_ZNK14rosserial_msgs3Log9serializeEPh+0x28>
     f36:	21 97       	sbiw	r28, 0x01	; 1
     f38:	ce 1b       	sub	r28, r30
     f3a:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_msg);
     f3c:	ae 01       	movw	r20, r28
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
     f46:	d8 01       	movw	r26, r16
     f48:	13 96       	adiw	r26, 0x03	; 3
     f4a:	6d 91       	ld	r22, X+
     f4c:	7c 91       	ld	r23, X
     f4e:	14 97       	sbiw	r26, 0x04	; 4
     f50:	ae 01       	movw	r20, r28
     f52:	c7 01       	movw	r24, r14
     f54:	05 96       	adiw	r24, 0x05	; 5
     f56:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <memcpy>
      offset += length_msg;
      return offset;
    }
     f5a:	ce 01       	movw	r24, r28
     f5c:	05 96       	adiw	r24, 0x05	; 5
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	7c 01       	movw	r14, r24
     f7e:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
     f80:	dc 01       	movw	r26, r24
     f82:	12 96       	adiw	r26, 0x02	; 2
     f84:	8c 91       	ld	r24, X
     f86:	12 97       	sbiw	r26, 0x02	; 2
     f88:	fb 01       	movw	r30, r22
     f8a:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
     f8c:	13 96       	adiw	r26, 0x03	; 3
     f8e:	8c 91       	ld	r24, X
     f90:	13 97       	sbiw	r26, 0x03	; 3
     f92:	81 83       	std	Z+1, r24	; 0x01
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
     f94:	14 96       	adiw	r26, 0x04	; 4
     f96:	ed 91       	ld	r30, X+
     f98:	fc 91       	ld	r31, X
     f9a:	15 97       	sbiw	r26, 0x05	; 5
     f9c:	ef 01       	movw	r28, r30
     f9e:	09 90       	ld	r0, Y+
     fa0:	00 20       	and	r0, r0
     fa2:	e9 f7       	brne	.-6      	; 0xf9e <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x32>
     fa4:	21 97       	sbiw	r28, 0x01	; 1
     fa6:	ce 1b       	sub	r28, r30
     fa8:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_topic_name);
     faa:	ae 01       	movw	r20, r28
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	c8 01       	movw	r24, r16
     fb2:	02 96       	adiw	r24, 0x02	; 2
     fb4:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
     fb8:	d7 01       	movw	r26, r14
     fba:	14 96       	adiw	r26, 0x04	; 4
     fbc:	6d 91       	ld	r22, X+
     fbe:	7c 91       	ld	r23, X
     fc0:	15 97       	sbiw	r26, 0x05	; 5
     fc2:	ae 01       	movw	r20, r28
     fc4:	c8 01       	movw	r24, r16
     fc6:	06 96       	adiw	r24, 0x06	; 6
     fc8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <memcpy>
      offset += length_topic_name;
     fcc:	ce 01       	movw	r24, r28
     fce:	06 96       	adiw	r24, 0x06	; 6
      uint32_t length_message_type = strlen(this->message_type);
     fd0:	f7 01       	movw	r30, r14
     fd2:	a6 81       	ldd	r26, Z+6	; 0x06
     fd4:	b7 81       	ldd	r27, Z+7	; 0x07
     fd6:	fd 01       	movw	r30, r26
     fd8:	01 90       	ld	r0, Z+
     fda:	00 20       	and	r0, r0
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6c>
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	6f 01       	movw	r12, r30
     fe2:	ca 1a       	sub	r12, r26
     fe4:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_message_type);
     fe6:	a6 01       	movw	r20, r12
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	80 0f       	add	r24, r16
     fee:	91 1f       	adc	r25, r17
     ff0:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
     ff4:	2a 96       	adiw	r28, 0x0a	; 10
     ff6:	d7 01       	movw	r26, r14
     ff8:	16 96       	adiw	r26, 0x06	; 6
     ffa:	6d 91       	ld	r22, X+
     ffc:	7c 91       	ld	r23, X
     ffe:	17 97       	sbiw	r26, 0x07	; 7
    1000:	a6 01       	movw	r20, r12
    1002:	c8 01       	movw	r24, r16
    1004:	8c 0f       	add	r24, r28
    1006:	9d 1f       	adc	r25, r29
    1008:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <memcpy>
      offset += length_message_type;
    100c:	cc 0d       	add	r28, r12
    100e:	dd 1d       	adc	r29, r13
      uint32_t length_md5sum = strlen(this->md5sum);
    1010:	d7 01       	movw	r26, r14
    1012:	18 96       	adiw	r26, 0x08	; 8
    1014:	ed 91       	ld	r30, X+
    1016:	fc 91       	ld	r31, X
    1018:	19 97       	sbiw	r26, 0x09	; 9
    101a:	df 01       	movw	r26, r30
    101c:	0d 90       	ld	r0, X+
    101e:	00 20       	and	r0, r0
    1020:	e9 f7       	brne	.-6      	; 0x101c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xb0>
    1022:	11 97       	sbiw	r26, 0x01	; 1
    1024:	6d 01       	movw	r12, r26
    1026:	ce 1a       	sub	r12, r30
    1028:	df 0a       	sbc	r13, r31
      varToArr(outbuffer + offset, length_md5sum);
    102a:	a6 01       	movw	r20, r12
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	c8 01       	movw	r24, r16
    1032:	8c 0f       	add	r24, r28
    1034:	9d 1f       	adc	r25, r29
    1036:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
    103a:	24 96       	adiw	r28, 0x04	; 4
    103c:	f7 01       	movw	r30, r14
    103e:	60 85       	ldd	r22, Z+8	; 0x08
    1040:	71 85       	ldd	r23, Z+9	; 0x09
    1042:	a6 01       	movw	r20, r12
    1044:	c8 01       	movw	r24, r16
    1046:	8c 0f       	add	r24, r28
    1048:	9d 1f       	adc	r25, r29
    104a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <memcpy>
      offset += length_md5sum;
    104e:	c6 01       	movw	r24, r12
    1050:	8c 0f       	add	r24, r28
    1052:	9d 1f       	adc	r25, r29
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
    1054:	d7 01       	movw	r26, r14
    1056:	1a 96       	adiw	r26, 0x0a	; 10
    1058:	6c 91       	ld	r22, X
    105a:	1a 97       	sbiw	r26, 0x0a	; 10
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
    105c:	1b 96       	adiw	r26, 0x0b	; 11
    105e:	4c 91       	ld	r20, X
    1060:	1b 97       	sbiw	r26, 0x0b	; 11
    1062:	1c 96       	adiw	r26, 0x0c	; 12
    1064:	3c 91       	ld	r19, X
    1066:	1c 97       	sbiw	r26, 0x0c	; 12
    1068:	1d 96       	adiw	r26, 0x0d	; 13
    106a:	2c 91       	ld	r18, X
    106c:	f8 01       	movw	r30, r16
    106e:	e8 0f       	add	r30, r24
    1070:	f9 1f       	adc	r31, r25
    1072:	60 83       	st	Z, r22
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
    1074:	41 83       	std	Z+1, r20	; 0x01
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
    1076:	32 83       	std	Z+2, r19	; 0x02
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
    1078:	23 83       	std	Z+3, r18	; 0x03
      offset += sizeof(this->buffer_size);
      return offset;
    }
    107a:	04 96       	adiw	r24, 0x04	; 4
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	08 95       	ret

0000108e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	fc 01       	movw	r30, r24
  {
    var = 0;
    1098:	10 82       	st	Z, r1
    109a:	11 82       	std	Z+1, r1	; 0x01
    109c:	12 82       	std	Z+2, r1	; 0x02
    109e:	13 82       	std	Z+3, r1	; 0x03
    10a0:	db 01       	movw	r26, r22
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
    10a6:	4d 91       	ld	r20, X+
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x24>
    10ae:	44 0f       	add	r20, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x20>
    10b6:	05 2e       	mov	r0, r21
    10b8:	00 0c       	add	r0, r0
    10ba:	66 0b       	sbc	r22, r22
    10bc:	77 0b       	sbc	r23, r23
    10be:	c0 80       	ld	r12, Z
    10c0:	d1 80       	ldd	r13, Z+1	; 0x01
    10c2:	e2 80       	ldd	r14, Z+2	; 0x02
    10c4:	f3 80       	ldd	r15, Z+3	; 0x03
    10c6:	4c 29       	or	r20, r12
    10c8:	5d 29       	or	r21, r13
    10ca:	6e 29       	or	r22, r14
    10cc:	7f 29       	or	r23, r15
    10ce:	40 83       	st	Z, r20
    10d0:	51 83       	std	Z+1, r21	; 0x01
    10d2:	62 83       	std	Z+2, r22	; 0x02
    10d4:	73 83       	std	Z+3, r23	; 0x03
    10d6:	28 5f       	subi	r18, 0xF8	; 248
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
    10da:	20 32       	cpi	r18, 0x20	; 32
    10dc:	31 05       	cpc	r19, r1
    10de:	19 f7       	brne	.-58     	; 0x10a6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x18>
      var |= (arr[i] << (8 * i));
  }
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	08 95       	ret

000010ea <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
    10ea:	4f 92       	push	r4
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	00 d0       	rcall	.+0      	; 0x1108 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x1e>
    1108:	1f 92       	push	r1
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	8c 01       	movw	r16, r24
    1110:	7b 01       	movw	r14, r22
    {
      int offset = 0;
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	ab 81       	ldd	r26, Y+3	; 0x03
    1120:	bc 81       	ldd	r27, Y+4	; 0x04
    1122:	4c 01       	movw	r8, r24
    1124:	5d 01       	movw	r10, r26
    1126:	24 e0       	ldi	r18, 0x04	; 4
    1128:	82 0e       	add	r8, r18
    112a:	91 1c       	adc	r9, r1
    112c:	a1 1c       	adc	r10, r1
    112e:	b1 1c       	adc	r11, r1
    1130:	a7 01       	movw	r20, r14
    1132:	4d 5f       	subi	r20, 0xFD	; 253
    1134:	5f 4f       	sbci	r21, 0xFF	; 255
    1136:	fa 01       	movw	r30, r20
    1138:	24 e0       	ldi	r18, 0x04	; 4
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	29 01       	movw	r4, r18
    113e:	61 2c       	mov	r6, r1
    1140:	71 2c       	mov	r7, r1
    1142:	48 14       	cp	r4, r8
    1144:	59 04       	cpc	r5, r9
    1146:	6a 04       	cpc	r6, r10
    1148:	7b 04       	cpc	r7, r11
    114a:	28 f4       	brcc	.+10     	; 0x1156 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x6c>
          inbuffer[k-1]=inbuffer[k];
    114c:	61 81       	ldd	r22, Z+1	; 0x01
    114e:	61 93       	st	Z+, r22
    {
      int offset = 0;
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
    1150:	2f 5f       	subi	r18, 0xFF	; 255
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
    1154:	f3 cf       	rjmp	.-26     	; 0x113c <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x52>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_label-1]=0;
    1156:	e8 0e       	add	r14, r24
    1158:	f9 1e       	adc	r15, r25
    115a:	f7 01       	movw	r30, r14
    115c:	13 82       	std	Z+3, r1	; 0x03
      this->label = (char *)(inbuffer + offset-1);
    115e:	f8 01       	movw	r30, r16
    1160:	53 83       	std	Z+3, r21	; 0x03
    1162:	42 83       	std	Z+2, r20	; 0x02
      offset += length_label;
      this->size =  ((uint32_t) (*(inbuffer + offset)));
    1164:	f7 01       	movw	r30, r14
    1166:	44 81       	ldd	r20, Z+4	; 0x04
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	f8 01       	movw	r30, r16
    1170:	44 83       	std	Z+4, r20	; 0x04
    1172:	55 83       	std	Z+5, r21	; 0x05
    1174:	66 83       	std	Z+6, r22	; 0x06
    1176:	77 83       	std	Z+7, r23	; 0x07
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
    1178:	f7 01       	movw	r30, r14
    117a:	25 81       	ldd	r18, Z+5	; 0x05
    117c:	52 2b       	or	r21, r18
    117e:	f8 01       	movw	r30, r16
    1180:	44 83       	std	Z+4, r20	; 0x04
    1182:	55 83       	std	Z+5, r21	; 0x05
    1184:	66 83       	std	Z+6, r22	; 0x06
    1186:	77 83       	std	Z+7, r23	; 0x07
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
    1188:	f7 01       	movw	r30, r14
    118a:	26 81       	ldd	r18, Z+6	; 0x06
    118c:	62 2b       	or	r22, r18
    118e:	f8 01       	movw	r30, r16
    1190:	44 83       	std	Z+4, r20	; 0x04
    1192:	55 83       	std	Z+5, r21	; 0x05
    1194:	66 83       	std	Z+6, r22	; 0x06
    1196:	77 83       	std	Z+7, r23	; 0x07
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    1198:	f7 01       	movw	r30, r14
    119a:	27 81       	ldd	r18, Z+7	; 0x07
    119c:	72 2b       	or	r23, r18
    119e:	f8 01       	movw	r30, r16
    11a0:	44 83       	std	Z+4, r20	; 0x04
    11a2:	55 83       	std	Z+5, r21	; 0x05
    11a4:	66 83       	std	Z+6, r22	; 0x06
    11a6:	77 83       	std	Z+7, r23	; 0x07
      offset += sizeof(this->size);
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
    11a8:	f7 01       	movw	r30, r14
    11aa:	40 85       	ldd	r20, Z+8	; 0x08
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	f8 01       	movw	r30, r16
    11b4:	40 87       	std	Z+8, r20	; 0x08
    11b6:	51 87       	std	Z+9, r21	; 0x09
    11b8:	62 87       	std	Z+10, r22	; 0x0a
    11ba:	73 87       	std	Z+11, r23	; 0x0b
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
    11bc:	f7 01       	movw	r30, r14
    11be:	21 85       	ldd	r18, Z+9	; 0x09
    11c0:	52 2b       	or	r21, r18
    11c2:	f8 01       	movw	r30, r16
    11c4:	40 87       	std	Z+8, r20	; 0x08
    11c6:	51 87       	std	Z+9, r21	; 0x09
    11c8:	62 87       	std	Z+10, r22	; 0x0a
    11ca:	73 87       	std	Z+11, r23	; 0x0b
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
    11cc:	f7 01       	movw	r30, r14
    11ce:	22 85       	ldd	r18, Z+10	; 0x0a
    11d0:	62 2b       	or	r22, r18
    11d2:	f8 01       	movw	r30, r16
    11d4:	40 87       	std	Z+8, r20	; 0x08
    11d6:	51 87       	std	Z+9, r21	; 0x09
    11d8:	62 87       	std	Z+10, r22	; 0x0a
    11da:	73 87       	std	Z+11, r23	; 0x0b
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    11dc:	f7 01       	movw	r30, r14
    11de:	23 85       	ldd	r18, Z+11	; 0x0b
    11e0:	72 2b       	or	r23, r18
    11e2:	f8 01       	movw	r30, r16
    11e4:	40 87       	std	Z+8, r20	; 0x08
    11e6:	51 87       	std	Z+9, r21	; 0x09
    11e8:	62 87       	std	Z+10, r22	; 0x0a
    11ea:	73 87       	std	Z+11, r23	; 0x0b
      offset += sizeof(this->stride);
     return offset;
    }
    11ec:	0c 96       	adiw	r24, 0x0c	; 12
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	bf 90       	pop	r11
    1204:	af 90       	pop	r10
    1206:	9f 90       	pop	r9
    1208:	8f 90       	pop	r8
    120a:	7f 90       	pop	r7
    120c:	6f 90       	pop	r6
    120e:	5f 90       	pop	r5
    1210:	4f 90       	pop	r4
    1212:	08 95       	ret

00001214 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer) override
    1214:	4f 92       	push	r4
    1216:	5f 92       	push	r5
    1218:	6f 92       	push	r6
    121a:	7f 92       	push	r7
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
    1232:	5b 01       	movw	r10, r22
    {
      int offset = 0;
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1234:	fb 01       	movw	r30, r22
    1236:	c0 80       	ld	r12, Z
    1238:	d1 80       	ldd	r13, Z+1	; 0x01
    123a:	e2 80       	ldd	r14, Z+2	; 0x02
    123c:	f3 80       	ldd	r15, Z+3	; 0x03
      offset += sizeof(this->dim_length);
      if(dim_lengthT > dim_length)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	9b 81       	ldd	r25, Y+3	; 0x03
    1242:	ac 81       	ldd	r26, Y+4	; 0x04
    1244:	bd 81       	ldd	r27, Y+5	; 0x05
    1246:	8c 15       	cp	r24, r12
    1248:	9d 05       	cpc	r25, r13
    124a:	ae 05       	cpc	r26, r14
    124c:	bf 05       	cpc	r27, r15
    124e:	60 f4       	brcc	.+24     	; 0x1268 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x54>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
    1250:	8c e0       	ldi	r24, 0x0C	; 12
    1252:	8c 9d       	mul	r24, r12
    1254:	b0 01       	movw	r22, r0
    1256:	8d 9d       	mul	r24, r13
    1258:	70 0d       	add	r23, r0
    125a:	11 24       	eor	r1, r1
    125c:	8a 89       	ldd	r24, Y+18	; 0x12
    125e:	9b 89       	ldd	r25, Y+19	; 0x13
    1260:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
    1264:	9b 8b       	std	Y+19, r25	; 0x13
    1266:	8a 8b       	std	Y+18, r24	; 0x12
      dim_length = dim_lengthT;
    1268:	ca 82       	std	Y+2, r12	; 0x02
    126a:	db 82       	std	Y+3, r13	; 0x03
    126c:	ec 82       	std	Y+4, r14	; 0x04
    126e:	fd 82       	std	Y+5, r15	; 0x05
    1270:	e1 2c       	mov	r14, r1
    1272:	f1 2c       	mov	r15, r1
      for( uint32_t i = 0; i < dim_length; i++){
    1274:	41 2c       	mov	r4, r1
    1276:	51 2c       	mov	r5, r1
    1278:	32 01       	movw	r6, r4
      int offset = 0;
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->dim_length);
    127a:	04 e0       	ldi	r16, 0x04	; 4
    127c:	10 e0       	ldi	r17, 0x00	; 0
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      dim_length = dim_lengthT;
      for( uint32_t i = 0; i < dim_length; i++){
      offset += this->st_dim.deserialize(inbuffer + offset);
    127e:	6e 01       	movw	r12, r28
    1280:	f6 e0       	ldi	r31, 0x06	; 6
    1282:	cf 0e       	add	r12, r31
    1284:	d1 1c       	adc	r13, r1
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->dim_length);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      dim_length = dim_lengthT;
      for( uint32_t i = 0; i < dim_length; i++){
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	9b 81       	ldd	r25, Y+3	; 0x03
    128a:	ac 81       	ldd	r26, Y+4	; 0x04
    128c:	bd 81       	ldd	r27, Y+5	; 0x05
    128e:	f5 01       	movw	r30, r10
    1290:	e0 0f       	add	r30, r16
    1292:	f1 1f       	adc	r31, r17
    1294:	48 16       	cp	r4, r24
    1296:	59 06       	cpc	r5, r25
    1298:	6a 06       	cpc	r6, r26
    129a:	7b 06       	cpc	r7, r27
    129c:	c8 f4       	brcc	.+50     	; 0x12d0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xbc>
      offset += this->st_dim.deserialize(inbuffer + offset);
    129e:	bf 01       	movw	r22, r30
    12a0:	c6 01       	movw	r24, r12
    12a2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
    12a6:	08 0f       	add	r16, r24
    12a8:	19 1f       	adc	r17, r25
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
    12aa:	aa 89       	ldd	r26, Y+18	; 0x12
    12ac:	bb 89       	ldd	r27, Y+19	; 0x13
    12ae:	ae 0d       	add	r26, r14
    12b0:	bf 1d       	adc	r27, r15
    12b2:	8c e0       	ldi	r24, 0x0C	; 12
    12b4:	f6 01       	movw	r30, r12
    12b6:	01 90       	ld	r0, Z+
    12b8:	0d 92       	st	X+, r0
    12ba:	8a 95       	dec	r24
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xa2>
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->dim_length);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      dim_length = dim_lengthT;
      for( uint32_t i = 0; i < dim_length; i++){
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	48 1a       	sub	r4, r24
    12c2:	58 0a       	sbc	r5, r24
    12c4:	68 0a       	sbc	r6, r24
    12c6:	78 0a       	sbc	r7, r24
    12c8:	ec e0       	ldi	r30, 0x0C	; 12
    12ca:	ee 0e       	add	r14, r30
    12cc:	f1 1c       	adc	r15, r1
    12ce:	db cf       	rjmp	.-74     	; 0x1286 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x72>
      offset += this->st_dim.deserialize(inbuffer + offset);
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
    12d0:	80 81       	ld	r24, Z
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a0 e0       	ldi	r26, 0x00	; 0
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	8c 8b       	std	Y+20, r24	; 0x14
    12da:	9d 8b       	std	Y+21, r25	; 0x15
    12dc:	ae 8b       	std	Y+22, r26	; 0x16
    12de:	bf 8b       	std	Y+23, r27	; 0x17
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
    12e0:	21 81       	ldd	r18, Z+1	; 0x01
    12e2:	92 2b       	or	r25, r18
    12e4:	8c 8b       	std	Y+20, r24	; 0x14
    12e6:	9d 8b       	std	Y+21, r25	; 0x15
    12e8:	ae 8b       	std	Y+22, r26	; 0x16
    12ea:	bf 8b       	std	Y+23, r27	; 0x17
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
    12ec:	22 81       	ldd	r18, Z+2	; 0x02
    12ee:	a2 2b       	or	r26, r18
    12f0:	8c 8b       	std	Y+20, r24	; 0x14
    12f2:	9d 8b       	std	Y+21, r25	; 0x15
    12f4:	ae 8b       	std	Y+22, r26	; 0x16
    12f6:	bf 8b       	std	Y+23, r27	; 0x17
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    12f8:	23 81       	ldd	r18, Z+3	; 0x03
    12fa:	b2 2b       	or	r27, r18
    12fc:	8c 8b       	std	Y+20, r24	; 0x14
    12fe:	9d 8b       	std	Y+21, r25	; 0x15
    1300:	ae 8b       	std	Y+22, r26	; 0x16
    1302:	bf 8b       	std	Y+23, r27	; 0x17
      offset += sizeof(this->data_offset);
     return offset;
    }
    1304:	c8 01       	movw	r24, r16
    1306:	04 96       	adiw	r24, 0x04	; 4
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	7f 90       	pop	r7
    131e:	6f 90       	pop	r6
    1320:	5f 90       	pop	r5
    1322:	4f 90       	pop	r4
    1324:	08 95       	ret

00001326 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:
      offset += sizeof(this->data[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer) override
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
    133e:	02 96       	adiw	r24, 0x02	; 2
    1340:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    1344:	08 0f       	add	r16, r24
    1346:	19 1f       	adc	r17, r25
    1348:	f8 01       	movw	r30, r16
    134a:	20 81       	ld	r18, Z
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    134c:	31 81       	ldd	r19, Z+1	; 0x01
    134e:	c2 80       	ldd	r12, Z+2	; 0x02
    1350:	d1 2c       	mov	r13, r1
    1352:	e1 2c       	mov	r14, r1
    1354:	f1 2c       	mov	r15, r1
    1356:	76 01       	movw	r14, r12
    1358:	dd 24       	eor	r13, r13
    135a:	cc 24       	eor	r12, r12
    135c:	d3 2a       	or	r13, r19
    135e:	c2 2a       	or	r12, r18
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1360:	23 81       	ldd	r18, Z+3	; 0x03
    1362:	f2 2a       	or	r15, r18
      offset += sizeof(this->data_length);
    1364:	5c 01       	movw	r10, r24
    1366:	f4 e0       	ldi	r31, 0x04	; 4
    1368:	af 0e       	add	r10, r31
    136a:	b1 1c       	adc	r11, r1
      if(data_lengthT > data_length)
    136c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    136e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1370:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1372:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1374:	8c 15       	cp	r24, r12
    1376:	9d 05       	cpc	r25, r13
    1378:	ae 05       	cpc	r26, r14
    137a:	bf 05       	cpc	r27, r15
    137c:	58 f4       	brcc	.+22     	; 0x1394 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x6e>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
    137e:	b6 01       	movw	r22, r12
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	66 0f       	add	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	8a a1       	ldd	r24, Y+34	; 0x22
    138a:	9b a1       	ldd	r25, Y+35	; 0x23
    138c:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
    1390:	9b a3       	std	Y+35, r25	; 0x23
    1392:	8a a3       	std	Y+34, r24	; 0x22
      data_length = data_lengthT;
    1394:	ca 8e       	std	Y+26, r12	; 0x1a
    1396:	db 8e       	std	Y+27, r13	; 0x1b
    1398:	ec 8e       	std	Y+28, r14	; 0x1c
    139a:	fd 8e       	std	Y+29, r15	; 0x1d
    139c:	98 01       	movw	r18, r16
      for( uint32_t i = 0; i < data_length; i++){
    139e:	c1 2c       	mov	r12, r1
    13a0:	d1 2c       	mov	r13, r1
    13a2:	76 01       	movw	r14, r12
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_data = u_st_data.real;
      offset += sizeof(this->st_data);
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
    13a4:	ae 01       	movw	r20, r28
    13a6:	42 5e       	subi	r20, 0xE2	; 226
    13a8:	5f 4f       	sbci	r21, 0xFF	; 255
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->data_length);
      if(data_lengthT > data_length)
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
      data_length = data_lengthT;
      for( uint32_t i = 0; i < data_length; i++){
    13aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13ae:	ac 8d       	ldd	r26, Y+28	; 0x1c
    13b0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    13b2:	c8 16       	cp	r12, r24
    13b4:	d9 06       	cpc	r13, r25
    13b6:	ea 06       	cpc	r14, r26
    13b8:	fb 06       	cpc	r15, r27
    13ba:	50 f5       	brcc	.+84     	; 0x1410 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0xea>
      } u_st_data;
      u_st_data.base = 0;
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    13bc:	f9 01       	movw	r30, r18
    13be:	65 81       	ldd	r22, Z+5	; 0x05
    13c0:	86 81       	ldd	r24, Z+6	; 0x06
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a0 e0       	ldi	r26, 0x00	; 0
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	dc 01       	movw	r26, r24
    13ca:	99 27       	eor	r25, r25
    13cc:	88 27       	eor	r24, r24
    13ce:	96 2b       	or	r25, r22
    13d0:	64 81       	ldd	r22, Z+4	; 0x04
    13d2:	86 2b       	or	r24, r22
    13d4:	67 81       	ldd	r22, Z+7	; 0x07
    13d6:	b6 2b       	or	r27, r22
      this->st_data = u_st_data.real;
    13d8:	8e 8f       	std	Y+30, r24	; 0x1e
    13da:	9f 8f       	std	Y+31, r25	; 0x1f
    13dc:	a8 a3       	std	Y+32, r26	; 0x20
    13de:	b9 a3       	std	Y+33, r27	; 0x21
    13e0:	f4 e0       	ldi	r31, 0x04	; 4
    13e2:	af 0e       	add	r10, r31
    13e4:	b1 1c       	adc	r11, r1
      offset += sizeof(this->st_data);
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
    13e6:	c9 01       	movw	r24, r18
    13e8:	80 1b       	sub	r24, r16
    13ea:	91 0b       	sbc	r25, r17
    13ec:	aa a1       	ldd	r26, Y+34	; 0x22
    13ee:	bb a1       	ldd	r27, Y+35	; 0x23
    13f0:	a8 0f       	add	r26, r24
    13f2:	b9 1f       	adc	r27, r25
    13f4:	84 e0       	ldi	r24, 0x04	; 4
    13f6:	fa 01       	movw	r30, r20
    13f8:	01 90       	ld	r0, Z+
    13fa:	0d 92       	st	X+, r0
    13fc:	8a 95       	dec	r24
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0xd2>
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->data_length);
      if(data_lengthT > data_length)
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
      data_length = data_lengthT;
      for( uint32_t i = 0; i < data_length; i++){
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	c8 1a       	sub	r12, r24
    1404:	d8 0a       	sbc	r13, r24
    1406:	e8 0a       	sbc	r14, r24
    1408:	f8 0a       	sbc	r15, r24
    140a:	2c 5f       	subi	r18, 0xFC	; 252
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	cd cf       	rjmp	.-102    	; 0x13aa <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x84>
      this->st_data = u_st_data.real;
      offset += sizeof(this->st_data);
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }
    1410:	c5 01       	movw	r24, r10
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	08 95       	ret

00001428 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:
    endpoint_(endpoint)
  {
    topic_ = topic_name;
  };

  virtual void callback(unsigned char* data) override
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	8c 01       	movw	r16, r24
  {
    msg.deserialize(data);
    1432:	ec 01       	movw	r28, r24
    1434:	26 96       	adiw	r28, 0x06	; 6
    1436:	ce 01       	movw	r24, r28
    1438:	0e 94 93 09 	call	0x1326	; 0x1326 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
    143c:	d8 01       	movw	r26, r16
    143e:	9a 96       	adiw	r26, 0x2a	; 42
    1440:	ed 91       	ld	r30, X+
    1442:	fc 91       	ld	r31, X
    1444:	9b 97       	sbiw	r26, 0x2b	; 43
    1446:	ce 01       	movw	r24, r28
  }
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
  };

  virtual void callback(unsigned char* data) override
  {
    msg.deserialize(data);
    this->cb_(msg);
    1450:	19 94       	eijmp

00001452 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
    1452:	4f 92       	push	r4
    1454:	5f 92       	push	r5
    1456:	6f 92       	push	r6
    1458:	7f 92       	push	r7
    145a:	8f 92       	push	r8
    145c:	9f 92       	push	r9
    145e:	af 92       	push	r10
    1460:	bf 92       	push	r11
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	00 d0       	rcall	.+0      	; 0x1470 <_ZN14rosserial_msgs3Log11deserializeEPh+0x1e>
    1470:	1f 92       	push	r1
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	7c 01       	movw	r14, r24
    1478:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
    147a:	fb 01       	movw	r30, r22
    147c:	81 91       	ld	r24, Z+
    147e:	bf 01       	movw	r22, r30
    1480:	f7 01       	movw	r30, r14
    1482:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	ab 81       	ldd	r26, Y+3	; 0x03
    1492:	bc 81       	ldd	r27, Y+4	; 0x04
    1494:	4c 01       	movw	r8, r24
    1496:	5d 01       	movw	r10, r26
    1498:	f5 e0       	ldi	r31, 0x05	; 5
    149a:	8f 0e       	add	r8, r31
    149c:	91 1c       	adc	r9, r1
    149e:	a1 1c       	adc	r10, r1
    14a0:	b1 1c       	adc	r11, r1
    14a2:	a8 01       	movw	r20, r16
    14a4:	4c 5f       	subi	r20, 0xFC	; 252
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	fa 01       	movw	r30, r20
    14aa:	25 e0       	ldi	r18, 0x05	; 5
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	29 01       	movw	r4, r18
    14b0:	61 2c       	mov	r6, r1
    14b2:	71 2c       	mov	r7, r1
    14b4:	48 14       	cp	r4, r8
    14b6:	59 04       	cpc	r5, r9
    14b8:	6a 04       	cpc	r6, r10
    14ba:	7b 04       	cpc	r7, r11
    14bc:	28 f4       	brcc	.+10     	; 0x14c8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
    14be:	61 81       	ldd	r22, Z+1	; 0x01
    14c0:	61 93       	st	Z+, r22
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
    14c2:	2f 5f       	subi	r18, 0xFF	; 255
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	f3 cf       	rjmp	.-26     	; 0x14ae <_ZN14rosserial_msgs3Log11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
    14c8:	f8 01       	movw	r30, r16
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	14 82       	std	Z+4, r1	; 0x04
      this->msg = (char *)(inbuffer + offset-1);
    14d0:	f7 01       	movw	r30, r14
    14d2:	54 83       	std	Z+4, r21	; 0x04
    14d4:	43 83       	std	Z+3, r20	; 0x03
      offset += length_msg;
     return offset;
    }
    14d6:	05 96       	adiw	r24, 0x05	; 5
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	bf 90       	pop	r11
    14ee:	af 90       	pop	r10
    14f0:	9f 90       	pop	r9
    14f2:	8f 90       	pop	r8
    14f4:	7f 90       	pop	r7
    14f6:	6f 90       	pop	r6
    14f8:	5f 90       	pop	r5
    14fa:	4f 90       	pop	r4
    14fc:	08 95       	ret

000014fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
    14fe:	4f 92       	push	r4
    1500:	5f 92       	push	r5
    1502:	6f 92       	push	r6
    1504:	7f 92       	push	r7
    1506:	8f 92       	push	r8
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	2c 97       	sbiw	r28, 0x0c	; 12
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	7c 01       	movw	r14, r24
    1530:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
    1532:	db 01       	movw	r26, r22
    1534:	8c 91       	ld	r24, X
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	f7 01       	movw	r30, r14
    153a:	93 83       	std	Z+3, r25	; 0x03
    153c:	82 83       	std	Z+2, r24	; 0x02
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	2c 91       	ld	r18, X
    1542:	92 2b       	or	r25, r18
    1544:	93 83       	std	Z+3, r25	; 0x03
    1546:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
    1548:	6e 5f       	subi	r22, 0xFE	; 254
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	ce 01       	movw	r24, r28
    154e:	09 96       	adiw	r24, 0x09	; 9
    1550:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    1554:	89 84       	ldd	r8, Y+9	; 0x09
    1556:	9a 84       	ldd	r9, Y+10	; 0x0a
    1558:	ab 84       	ldd	r10, Y+11	; 0x0b
    155a:	bc 84       	ldd	r11, Y+12	; 0x0c
    155c:	24 01       	movw	r4, r8
    155e:	35 01       	movw	r6, r10
    1560:	f6 e0       	ldi	r31, 0x06	; 6
    1562:	4f 0e       	add	r4, r31
    1564:	51 1c       	adc	r5, r1
    1566:	61 1c       	adc	r6, r1
    1568:	71 1c       	adc	r7, r1
    156a:	98 01       	movw	r18, r16
    156c:	2b 5f       	subi	r18, 0xFB	; 251
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	f9 01       	movw	r30, r18
    1572:	86 e0       	ldi	r24, 0x06	; 6
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	ac 01       	movw	r20, r24
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	44 15       	cp	r20, r4
    157e:	55 05       	cpc	r21, r5
    1580:	66 05       	cpc	r22, r6
    1582:	77 05       	cpc	r23, r7
    1584:	20 f4       	brcc	.+8      	; 0x158e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x90>
          inbuffer[k-1]=inbuffer[k];
    1586:	41 81       	ldd	r20, Z+1	; 0x01
    1588:	41 93       	st	Z+, r20
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	f4 cf       	rjmp	.-24     	; 0x1576 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x78>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
    158e:	f8 01       	movw	r30, r16
    1590:	e8 0d       	add	r30, r8
    1592:	f9 1d       	adc	r31, r9
    1594:	15 82       	std	Z+5, r1	; 0x05
      this->topic_name = (char *)(inbuffer + offset-1);
    1596:	d7 01       	movw	r26, r14
    1598:	15 96       	adiw	r26, 0x05	; 5
    159a:	3c 93       	st	X, r19
    159c:	2e 93       	st	-X, r18
    159e:	14 97       	sbiw	r26, 0x04	; 4
      offset += length_topic_name;
    15a0:	b4 01       	movw	r22, r8
    15a2:	6a 5f       	subi	r22, 0xFA	; 250
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
    15a6:	60 0f       	add	r22, r16
    15a8:	71 1f       	adc	r23, r17
    15aa:	ce 01       	movw	r24, r28
    15ac:	05 96       	adiw	r24, 0x05	; 5
    15ae:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    15b2:	ba e0       	ldi	r27, 0x0A	; 10
    15b4:	8b 0e       	add	r8, r27
    15b6:	91 1c       	adc	r9, r1
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    15b8:	4d 80       	ldd	r4, Y+5	; 0x05
    15ba:	5e 80       	ldd	r5, Y+6	; 0x06
    15bc:	6f 80       	ldd	r6, Y+7	; 0x07
    15be:	78 84       	ldd	r7, Y+8	; 0x08
    15c0:	a4 01       	movw	r20, r8
    15c2:	09 2c       	mov	r0, r9
    15c4:	00 0c       	add	r0, r0
    15c6:	66 0b       	sbc	r22, r22
    15c8:	77 0b       	sbc	r23, r23
    15ca:	44 0d       	add	r20, r4
    15cc:	55 1d       	adc	r21, r5
    15ce:	66 1d       	adc	r22, r6
    15d0:	77 1d       	adc	r23, r7
    15d2:	d8 01       	movw	r26, r16
    15d4:	a8 0d       	add	r26, r8
    15d6:	b9 1d       	adc	r27, r9
    15d8:	cd 01       	movw	r24, r26
    15da:	80 1b       	sub	r24, r16
    15dc:	91 0b       	sbc	r25, r17
    15de:	5c 01       	movw	r10, r24
    15e0:	c1 2c       	mov	r12, r1
    15e2:	d1 2c       	mov	r13, r1
    15e4:	a4 16       	cp	r10, r20
    15e6:	b5 06       	cpc	r11, r21
    15e8:	c6 06       	cpc	r12, r22
    15ea:	d7 06       	cpc	r13, r23
    15ec:	28 f4       	brcc	.+10     	; 0x15f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xfa>
          inbuffer[k-1]=inbuffer[k];
    15ee:	8d 91       	ld	r24, X+
    15f0:	fd 01       	movw	r30, r26
    15f2:	32 97       	sbiw	r30, 0x02	; 2
    15f4:	80 83       	st	Z, r24
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    15f6:	f0 cf       	rjmp	.-32     	; 0x15d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xda>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
    15f8:	54 01       	movw	r10, r8
    15fa:	a4 0c       	add	r10, r4
    15fc:	b5 1c       	adc	r11, r5
    15fe:	b8 01       	movw	r22, r16
    1600:	6a 0d       	add	r22, r10
    1602:	7b 1d       	adc	r23, r11
    1604:	fb 01       	movw	r30, r22
    1606:	31 97       	sbiw	r30, 0x01	; 1
    1608:	10 82       	st	Z, r1
      this->message_type = (char *)(inbuffer + offset-1);
    160a:	c4 01       	movw	r24, r8
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	80 0f       	add	r24, r16
    1610:	91 1f       	adc	r25, r17
    1612:	f7 01       	movw	r30, r14
    1614:	97 83       	std	Z+7, r25	; 0x07
    1616:	86 83       	std	Z+6, r24	; 0x06
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    1620:	95 01       	movw	r18, r10
    1622:	2c 5f       	subi	r18, 0xFC	; 252
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	ab 81       	ldd	r26, Y+3	; 0x03
    162c:	bc 81       	ldd	r27, Y+4	; 0x04
    162e:	29 01       	movw	r4, r18
    1630:	03 2e       	mov	r0, r19
    1632:	00 0c       	add	r0, r0
    1634:	66 08       	sbc	r6, r6
    1636:	77 08       	sbc	r7, r7
    1638:	48 0e       	add	r4, r24
    163a:	59 1e       	adc	r5, r25
    163c:	6a 1e       	adc	r6, r26
    163e:	7b 1e       	adc	r7, r27
    1640:	f5 01       	movw	r30, r10
    1642:	33 96       	adiw	r30, 0x03	; 3
    1644:	e0 0f       	add	r30, r16
    1646:	f1 1f       	adc	r31, r17
    1648:	a9 01       	movw	r20, r18
    164a:	4a 01       	movw	r8, r20
    164c:	a1 2c       	mov	r10, r1
    164e:	b1 2c       	mov	r11, r1
    1650:	84 14       	cp	r8, r4
    1652:	95 04       	cpc	r9, r5
    1654:	a6 04       	cpc	r10, r6
    1656:	b7 04       	cpc	r11, r7
    1658:	28 f4       	brcc	.+10     	; 0x1664 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x166>
          inbuffer[k-1]=inbuffer[k];
    165a:	61 81       	ldd	r22, Z+1	; 0x01
    165c:	61 93       	st	Z+, r22
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    165e:	4f 5f       	subi	r20, 0xFF	; 255
    1660:	5f 4f       	sbci	r21, 0xFF	; 255
    1662:	f3 cf       	rjmp	.-26     	; 0x164a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14c>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
    1664:	82 0f       	add	r24, r18
    1666:	93 1f       	adc	r25, r19
    1668:	f8 01       	movw	r30, r16
    166a:	e8 0f       	add	r30, r24
    166c:	f9 1f       	adc	r31, r25
    166e:	df 01       	movw	r26, r30
    1670:	11 97       	sbiw	r26, 0x01	; 1
    1672:	1c 92       	st	X, r1
      this->md5sum = (char *)(inbuffer + offset-1);
    1674:	21 50       	subi	r18, 0x01	; 1
    1676:	31 09       	sbc	r19, r1
    1678:	02 0f       	add	r16, r18
    167a:	13 1f       	adc	r17, r19
    167c:	d7 01       	movw	r26, r14
    167e:	19 96       	adiw	r26, 0x09	; 9
    1680:	1c 93       	st	X, r17
    1682:	0e 93       	st	-X, r16
    1684:	18 97       	sbiw	r26, 0x08	; 8
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
    1686:	21 81       	ldd	r18, Z+1	; 0x01
    1688:	42 81       	ldd	r20, Z+2	; 0x02
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	ba 01       	movw	r22, r20
    1692:	55 27       	eor	r21, r21
    1694:	44 27       	eor	r20, r20
    1696:	52 2b       	or	r21, r18
    1698:	20 81       	ld	r18, Z
    169a:	42 2b       	or	r20, r18
    169c:	23 81       	ldd	r18, Z+3	; 0x03
    169e:	72 2b       	or	r23, r18
    16a0:	f7 01       	movw	r30, r14
    16a2:	42 87       	std	Z+10, r20	; 0x0a
    16a4:	53 87       	std	Z+11, r21	; 0x0b
    16a6:	64 87       	std	Z+12, r22	; 0x0c
    16a8:	75 87       	std	Z+13, r23	; 0x0d
      offset += sizeof(this->buffer_size);
     return offset;
    }
    16aa:	04 96       	adiw	r24, 0x04	; 4
    16ac:	2c 96       	adiw	r28, 0x0c	; 12
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	bf 90       	pop	r11
    16ca:	af 90       	pop	r10
    16cc:	9f 90       	pop	r9
    16ce:	8f 90       	pop	r8
    16d0:	7f 90       	pop	r7
    16d2:	6f 90       	pop	r6
    16d4:	5f 90       	pop	r5
    16d6:	4f 90       	pop	r4
    16d8:	08 95       	ret

000016da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
    16da:	2f 92       	push	r2
    16dc:	3f 92       	push	r3
    16de:	4f 92       	push	r4
    16e0:	5f 92       	push	r5
    16e2:	6f 92       	push	r6
    16e4:	7f 92       	push	r7
    16e6:	8f 92       	push	r8
    16e8:	9f 92       	push	r9
    16ea:	af 92       	push	r10
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	60 97       	sbiw	r28, 0x10	; 16
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	8c 01       	movw	r16, r24
    1710:	6b 01       	movw	r12, r22
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1712:	db 01       	movw	r26, r22
    1714:	8d 90       	ld	r8, X+
    1716:	9d 90       	ld	r9, X+
    1718:	ad 90       	ld	r10, X+
    171a:	bc 90       	ld	r11, X
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
    171c:	fc 01       	movw	r30, r24
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	a4 81       	ldd	r26, Z+4	; 0x04
    1724:	b5 81       	ldd	r27, Z+5	; 0x05
    1726:	88 15       	cp	r24, r8
    1728:	99 05       	cpc	r25, r9
    172a:	aa 05       	cpc	r26, r10
    172c:	bb 05       	cpc	r27, r11
    172e:	70 f4       	brcc	.+28     	; 0x174c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
    1730:	b4 01       	movw	r22, r8
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	66 0f       	add	r22, r22
    1738:	77 1f       	adc	r23, r23
    173a:	82 85       	ldd	r24, Z+10	; 0x0a
    173c:	93 85       	ldd	r25, Z+11	; 0x0b
    173e:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
    1742:	d8 01       	movw	r26, r16
    1744:	1b 96       	adiw	r26, 0x0b	; 11
    1746:	9c 93       	st	X, r25
    1748:	8e 93       	st	-X, r24
    174a:	1a 97       	sbiw	r26, 0x0a	; 10
      ints_length = ints_lengthT;
    174c:	f8 01       	movw	r30, r16
    174e:	82 82       	std	Z+2, r8	; 0x02
    1750:	93 82       	std	Z+3, r9	; 0x03
    1752:	a4 82       	std	Z+4, r10	; 0x04
    1754:	b5 82       	std	Z+5, r11	; 0x05
    1756:	96 01       	movw	r18, r12
      for( uint32_t i = 0; i < ints_length; i++){
    1758:	81 2c       	mov	r8, r1
    175a:	91 2c       	mov	r9, r1
    175c:	54 01       	movw	r10, r8
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
    175e:	44 e0       	ldi	r20, 0x04	; 4
    1760:	50 e0       	ldi	r21, 0x00	; 0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    1762:	b8 01       	movw	r22, r16
    1764:	6a 5f       	subi	r22, 0xFA	; 250
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	2c 5f       	subi	r18, 0xFC	; 252
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    176c:	f8 01       	movw	r30, r16
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	a4 81       	ldd	r26, Z+4	; 0x04
    1774:	b5 81       	ldd	r27, Z+5	; 0x05
    1776:	fa 01       	movw	r30, r20
    1778:	34 96       	adiw	r30, 0x04	; 4
    177a:	1f 01       	movw	r2, r30
    177c:	88 16       	cp	r8, r24
    177e:	99 06       	cpc	r9, r25
    1780:	aa 06       	cpc	r10, r26
    1782:	bb 06       	cpc	r11, r27
    1784:	50 f5       	brcc	.+84     	; 0x17da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x100>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
    1786:	d9 01       	movw	r26, r18
    1788:	11 96       	adiw	r26, 0x01	; 1
    178a:	fc 90       	ld	r15, X
    178c:	11 97       	sbiw	r26, 0x01	; 1
    178e:	12 96       	adiw	r26, 0x02	; 2
    1790:	8c 91       	ld	r24, X
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	dc 01       	movw	r26, r24
    179a:	99 27       	eor	r25, r25
    179c:	88 27       	eor	r24, r24
    179e:	9f 29       	or	r25, r15
    17a0:	f9 01       	movw	r30, r18
    17a2:	f0 80       	ld	r15, Z
    17a4:	8f 29       	or	r24, r15
    17a6:	f3 80       	ldd	r15, Z+3	; 0x03
    17a8:	bf 29       	or	r27, r15
    17aa:	f8 01       	movw	r30, r16
    17ac:	86 83       	std	Z+6, r24	; 0x06
    17ae:	97 83       	std	Z+7, r25	; 0x07
    17b0:	a0 87       	std	Z+8, r26	; 0x08
    17b2:	b1 87       	std	Z+9, r27	; 0x09
    17b4:	da 01       	movw	r26, r20
    17b6:	a1 01       	movw	r20, r2
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    17b8:	14 97       	sbiw	r26, 0x04	; 4
    17ba:	82 85       	ldd	r24, Z+10	; 0x0a
    17bc:	93 85       	ldd	r25, Z+11	; 0x0b
    17be:	a8 0f       	add	r26, r24
    17c0:	b9 1f       	adc	r27, r25
    17c2:	84 e0       	ldi	r24, 0x04	; 4
    17c4:	fb 01       	movw	r30, r22
    17c6:	01 90       	ld	r0, Z+
    17c8:	0d 92       	st	X+, r0
    17ca:	8a 95       	dec	r24
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    17ce:	ff ef       	ldi	r31, 0xFF	; 255
    17d0:	8f 1a       	sub	r8, r31
    17d2:	9f 0a       	sbc	r9, r31
    17d4:	af 0a       	sbc	r10, r31
    17d6:	bf 0a       	sbc	r11, r31
    17d8:	c7 cf       	rjmp	.-114    	; 0x1768 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    17da:	46 01       	movw	r8, r12
    17dc:	84 0e       	add	r8, r20
    17de:	95 1e       	adc	r9, r21
    17e0:	d4 01       	movw	r26, r8
    17e2:	8c 91       	ld	r24, X
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	9c 91       	ld	r25, X
    17e8:	11 97       	sbiw	r26, 0x01	; 1
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	4c 90       	ld	r4, X
    17ee:	12 97       	sbiw	r26, 0x02	; 2
    17f0:	51 2c       	mov	r5, r1
    17f2:	61 2c       	mov	r6, r1
    17f4:	71 2c       	mov	r7, r1
    17f6:	32 01       	movw	r6, r4
    17f8:	55 24       	eor	r5, r5
    17fa:	44 24       	eor	r4, r4
    17fc:	59 2a       	or	r5, r25
    17fe:	48 2a       	or	r4, r24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1800:	13 96       	adiw	r26, 0x03	; 3
    1802:	8c 91       	ld	r24, X
    1804:	78 2a       	or	r7, r24
      offset += sizeof(this->floats_length);
    1806:	5f 01       	movw	r10, r30
      if(floats_lengthT > floats_length)
    1808:	f8 01       	movw	r30, r16
    180a:	84 85       	ldd	r24, Z+12	; 0x0c
    180c:	95 85       	ldd	r25, Z+13	; 0x0d
    180e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1810:	b7 85       	ldd	r27, Z+15	; 0x0f
    1812:	84 15       	cp	r24, r4
    1814:	95 05       	cpc	r25, r5
    1816:	a6 05       	cpc	r26, r6
    1818:	b7 05       	cpc	r27, r7
    181a:	70 f4       	brcc	.+28     	; 0x1838 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15e>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
    181c:	b2 01       	movw	r22, r4
    181e:	66 0f       	add	r22, r22
    1820:	77 1f       	adc	r23, r23
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	84 89       	ldd	r24, Z+20	; 0x14
    1828:	95 89       	ldd	r25, Z+21	; 0x15
    182a:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
    182e:	d8 01       	movw	r26, r16
    1830:	55 96       	adiw	r26, 0x15	; 21
    1832:	9c 93       	st	X, r25
    1834:	8e 93       	st	-X, r24
    1836:	54 97       	sbiw	r26, 0x14	; 20
      floats_length = floats_lengthT;
    1838:	f8 01       	movw	r30, r16
    183a:	44 86       	std	Z+12, r4	; 0x0c
    183c:	55 86       	std	Z+13, r5	; 0x0d
    183e:	66 86       	std	Z+14, r6	; 0x0e
    1840:	77 86       	std	Z+15, r7	; 0x0f
    1842:	c4 01       	movw	r24, r8
      for( uint32_t i = 0; i < floats_length; i++){
    1844:	41 2c       	mov	r4, r1
    1846:	51 2c       	mov	r5, r1
    1848:	32 01       	movw	r6, r4
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    184a:	98 01       	movw	r18, r16
    184c:	20 5f       	subi	r18, 0xF0	; 240
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    1850:	d8 01       	movw	r26, r16
    1852:	1c 96       	adiw	r26, 0x0c	; 12
    1854:	4d 91       	ld	r20, X+
    1856:	5d 91       	ld	r21, X+
    1858:	6d 91       	ld	r22, X+
    185a:	7c 91       	ld	r23, X
    185c:	1f 97       	sbiw	r26, 0x0f	; 15
    185e:	f5 01       	movw	r30, r10
    1860:	34 96       	adiw	r30, 0x04	; 4
    1862:	44 16       	cp	r4, r20
    1864:	55 06       	cpc	r5, r21
    1866:	66 06       	cpc	r6, r22
    1868:	77 06       	cpc	r7, r23
    186a:	98 f5       	brcc	.+102    	; 0x18d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1f8>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    186c:	dc 01       	movw	r26, r24
    186e:	15 96       	adiw	r26, 0x05	; 5
    1870:	fc 90       	ld	r15, X
    1872:	15 97       	sbiw	r26, 0x05	; 5
    1874:	16 96       	adiw	r26, 0x06	; 6
    1876:	4c 91       	ld	r20, X
    1878:	16 97       	sbiw	r26, 0x06	; 6
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	ba 01       	movw	r22, r20
    1882:	55 27       	eor	r21, r21
    1884:	44 27       	eor	r20, r20
    1886:	5f 29       	or	r21, r15
    1888:	14 96       	adiw	r26, 0x04	; 4
    188a:	fc 90       	ld	r15, X
    188c:	14 97       	sbiw	r26, 0x04	; 4
    188e:	4f 29       	or	r20, r15
    1890:	17 96       	adiw	r26, 0x07	; 7
    1892:	fc 90       	ld	r15, X
    1894:	7f 29       	or	r23, r15
      this->st_floats = u_st_floats.real;
    1896:	d8 01       	movw	r26, r16
    1898:	50 96       	adiw	r26, 0x10	; 16
    189a:	4d 93       	st	X+, r20
    189c:	5d 93       	st	X+, r21
    189e:	6d 93       	st	X+, r22
    18a0:	7c 93       	st	X, r23
    18a2:	53 97       	sbiw	r26, 0x13	; 19
    18a4:	5f 01       	movw	r10, r30
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    18a6:	ac 01       	movw	r20, r24
    18a8:	48 19       	sub	r20, r8
    18aa:	59 09       	sbc	r21, r9
    18ac:	54 96       	adiw	r26, 0x14	; 20
    18ae:	0d 90       	ld	r0, X+
    18b0:	bc 91       	ld	r27, X
    18b2:	a0 2d       	mov	r26, r0
    18b4:	a4 0f       	add	r26, r20
    18b6:	b5 1f       	adc	r27, r21
    18b8:	44 e0       	ldi	r20, 0x04	; 4
    18ba:	f9 01       	movw	r30, r18
    18bc:	01 90       	ld	r0, Z+
    18be:	0d 92       	st	X+, r0
    18c0:	4a 95       	dec	r20
    18c2:	e1 f7       	brne	.-8      	; 0x18bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e2>
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    18c4:	bf ef       	ldi	r27, 0xFF	; 255
    18c6:	4b 1a       	sub	r4, r27
    18c8:	5b 0a       	sbc	r5, r27
    18ca:	6b 0a       	sbc	r6, r27
    18cc:	7b 0a       	sbc	r7, r27
    18ce:	04 96       	adiw	r24, 0x04	; 4
    18d0:	bf cf       	rjmp	.-130    	; 0x1850 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x176>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    18d2:	d6 01       	movw	r26, r12
    18d4:	aa 0d       	add	r26, r10
    18d6:	bb 1d       	adc	r27, r11
    18d8:	8c 91       	ld	r24, X
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	9c 91       	ld	r25, X
    18de:	11 97       	sbiw	r26, 0x01	; 1
    18e0:	12 96       	adiw	r26, 0x02	; 2
    18e2:	8c 90       	ld	r8, X
    18e4:	12 97       	sbiw	r26, 0x02	; 2
    18e6:	91 2c       	mov	r9, r1
    18e8:	a1 2c       	mov	r10, r1
    18ea:	b1 2c       	mov	r11, r1
    18ec:	54 01       	movw	r10, r8
    18ee:	99 24       	eor	r9, r9
    18f0:	88 24       	eor	r8, r8
    18f2:	99 2a       	or	r9, r25
    18f4:	88 2a       	or	r8, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    18f6:	13 96       	adiw	r26, 0x03	; 3
    18f8:	8c 91       	ld	r24, X
    18fa:	b8 2a       	or	r11, r24
      offset += sizeof(this->strings_length);
    18fc:	7f 01       	movw	r14, r30
      if(strings_lengthT > strings_length)
    18fe:	f8 01       	movw	r30, r16
    1900:	86 89       	ldd	r24, Z+22	; 0x16
    1902:	97 89       	ldd	r25, Z+23	; 0x17
    1904:	a0 8d       	ldd	r26, Z+24	; 0x18
    1906:	b1 8d       	ldd	r27, Z+25	; 0x19
    1908:	88 15       	cp	r24, r8
    190a:	99 05       	cpc	r25, r9
    190c:	aa 05       	cpc	r26, r10
    190e:	bb 05       	cpc	r27, r11
    1910:	60 f4       	brcc	.+24     	; 0x192a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
    1912:	b4 01       	movw	r22, r8
    1914:	66 0f       	add	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	84 8d       	ldd	r24, Z+28	; 0x1c
    191a:	95 8d       	ldd	r25, Z+29	; 0x1d
    191c:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
    1920:	d8 01       	movw	r26, r16
    1922:	5d 96       	adiw	r26, 0x1d	; 29
    1924:	9c 93       	st	X, r25
    1926:	8e 93       	st	-X, r24
    1928:	5c 97       	sbiw	r26, 0x1c	; 28
      strings_length = strings_lengthT;
    192a:	f8 01       	movw	r30, r16
    192c:	86 8a       	std	Z+22, r8	; 0x16
    192e:	97 8a       	std	Z+23, r9	; 0x17
    1930:	a0 8e       	std	Z+24, r10	; 0x18
    1932:	b1 8e       	std	Z+25, r11	; 0x19
    1934:	21 2c       	mov	r2, r1
    1936:	31 2c       	mov	r3, r1
      for( uint32_t i = 0; i < strings_length; i++){
    1938:	81 2c       	mov	r8, r1
    193a:	91 2c       	mov	r9, r1
    193c:	54 01       	movw	r10, r8
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    193e:	98 01       	movw	r18, r16
    1940:	26 5e       	subi	r18, 0xE6	; 230
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	3a 87       	std	Y+10, r19	; 0x0a
    1946:	29 87       	std	Y+9, r18	; 0x09
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    1948:	f8 01       	movw	r30, r16
    194a:	86 89       	ldd	r24, Z+22	; 0x16
    194c:	97 89       	ldd	r25, Z+23	; 0x17
    194e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1950:	b1 8d       	ldd	r27, Z+25	; 0x19
    1952:	88 16       	cp	r8, r24
    1954:	99 06       	cpc	r9, r25
    1956:	aa 06       	cpc	r10, r26
    1958:	bb 06       	cpc	r11, r27
    195a:	08 f0       	brcs	.+2      	; 0x195e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x284>
    195c:	5f c0       	rjmp	.+190    	; 0x1a1c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x342>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
    195e:	b6 01       	movw	r22, r12
    1960:	6e 0d       	add	r22, r14
    1962:	7f 1d       	adc	r23, r15
    1964:	ce 01       	movw	r24, r28
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    196c:	97 01       	movw	r18, r14
    196e:	2c 5f       	subi	r18, 0xFC	; 252
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	38 8b       	std	Y+16, r19	; 0x10
    1974:	2f 87       	std	Y+15, r18	; 0x0f
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    1976:	49 81       	ldd	r20, Y+1	; 0x01
    1978:	5a 81       	ldd	r21, Y+2	; 0x02
    197a:	6b 81       	ldd	r22, Y+3	; 0x03
    197c:	7c 81       	ldd	r23, Y+4	; 0x04
    197e:	c9 01       	movw	r24, r18
    1980:	33 0f       	add	r19, r19
    1982:	aa 0b       	sbc	r26, r26
    1984:	bb 0b       	sbc	r27, r27
    1986:	2c 01       	movw	r4, r24
    1988:	3d 01       	movw	r6, r26
    198a:	44 0e       	add	r4, r20
    198c:	55 1e       	adc	r5, r21
    198e:	66 1e       	adc	r6, r22
    1990:	77 1e       	adc	r7, r23
    1992:	4b 86       	std	Y+11, r4	; 0x0b
    1994:	5c 86       	std	Y+12, r5	; 0x0c
    1996:	6d 86       	std	Y+13, r6	; 0x0d
    1998:	7e 86       	std	Y+14, r7	; 0x0e
    199a:	23 e0       	ldi	r18, 0x03	; 3
    199c:	e2 0e       	add	r14, r18
    199e:	f1 1c       	adc	r15, r1
    19a0:	f6 01       	movw	r30, r12
    19a2:	ee 0d       	add	r30, r14
    19a4:	ff 1d       	adc	r31, r15
    19a6:	2f 85       	ldd	r18, Y+15	; 0x0f
    19a8:	38 89       	ldd	r19, Y+16	; 0x10
    19aa:	c9 01       	movw	r24, r18
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	4b 84       	ldd	r4, Y+11	; 0x0b
    19b2:	5c 84       	ldd	r5, Y+12	; 0x0c
    19b4:	6d 84       	ldd	r6, Y+13	; 0x0d
    19b6:	7e 84       	ldd	r7, Y+14	; 0x0e
    19b8:	84 15       	cp	r24, r4
    19ba:	95 05       	cpc	r25, r5
    19bc:	a6 05       	cpc	r26, r6
    19be:	b7 05       	cpc	r27, r7
    19c0:	28 f4       	brcc	.+10     	; 0x19cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2f2>
          inbuffer[k-1]=inbuffer[k];
    19c2:	a1 81       	ldd	r26, Z+1	; 0x01
    19c4:	a1 93       	st	Z+, r26
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    19c6:	2f 5f       	subi	r18, 0xFF	; 255
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	ef cf       	rjmp	.-34     	; 0x19aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d0>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
    19cc:	6f 84       	ldd	r6, Y+15	; 0x0f
    19ce:	78 88       	ldd	r7, Y+16	; 0x10
    19d0:	46 0d       	add	r20, r6
    19d2:	57 1d       	adc	r21, r7
    19d4:	f6 01       	movw	r30, r12
    19d6:	e4 0f       	add	r30, r20
    19d8:	f5 1f       	adc	r31, r21
    19da:	31 97       	sbiw	r30, 0x01	; 1
    19dc:	10 82       	st	Z, r1
      this->st_strings = (char *)(inbuffer + offset-1);
    19de:	c3 01       	movw	r24, r6
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	8c 0d       	add	r24, r12
    19e4:	9d 1d       	adc	r25, r13
    19e6:	d8 01       	movw	r26, r16
    19e8:	5b 96       	adiw	r26, 0x1b	; 27
    19ea:	9c 93       	st	X, r25
    19ec:	8e 93       	st	-X, r24
    19ee:	5a 97       	sbiw	r26, 0x1a	; 26
      offset += length_st_strings;
    19f0:	7a 01       	movw	r14, r20
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    19f2:	5c 96       	adiw	r26, 0x1c	; 28
    19f4:	ed 91       	ld	r30, X+
    19f6:	fc 91       	ld	r31, X
    19f8:	5d 97       	sbiw	r26, 0x1d	; 29
    19fa:	e2 0d       	add	r30, r2
    19fc:	f3 1d       	adc	r31, r3
    19fe:	a9 85       	ldd	r26, Y+9	; 0x09
    1a00:	ba 85       	ldd	r27, Y+10	; 0x0a
    1a02:	8d 91       	ld	r24, X+
    1a04:	9c 91       	ld	r25, X
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    1a0a:	bf ef       	ldi	r27, 0xFF	; 255
    1a0c:	8b 1a       	sub	r8, r27
    1a0e:	9b 0a       	sbc	r9, r27
    1a10:	ab 0a       	sbc	r10, r27
    1a12:	bb 0a       	sbc	r11, r27
    1a14:	e2 e0       	ldi	r30, 0x02	; 2
    1a16:	2e 0e       	add	r2, r30
    1a18:	31 1c       	adc	r3, r1
    1a1a:	96 cf       	rjmp	.-212    	; 0x1948 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	60 96       	adiw	r28, 0x10	; 16
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	bf 90       	pop	r11
    1a3c:	af 90       	pop	r10
    1a3e:	9f 90       	pop	r9
    1a40:	8f 90       	pop	r8
    1a42:	7f 90       	pop	r7
    1a44:	6f 90       	pop	r6
    1a46:	5f 90       	pop	r5
    1a48:	4f 90       	pop	r4
    1a4a:	3f 90       	pop	r3
    1a4c:	2f 90       	pop	r2
    1a4e:	08 95       	ret

00001a50 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	8c 01       	movw	r16, r24
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
    1a6a:	8d ed       	ldi	r24, 0xDD	; 221
    1a6c:	93 e0       	ldi	r25, 0x03	; 3
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
    1a72:	1b 82       	std	Y+3, r1	; 0x03
    1a74:	1c 82       	std	Y+4, r1	; 0x04
    1a76:	1d 82       	std	Y+5, r1	; 0x05
    1a78:	1e 82       	std	Y+6, r1	; 0x06
    1a7a:	1f 82       	std	Y+7, r1	; 0x07
    1a7c:	18 86       	std	Y+8, r1	; 0x08
    1a7e:	19 86       	std	Y+9, r1	; 0x09
    1a80:	1a 86       	std	Y+10, r1	; 0x0a
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    1a82:	d8 01       	movw	r26, r16
    1a84:	ed 91       	ld	r30, X+
    1a86:	fc 91       	ld	r31, X
    1a88:	01 90       	ld	r0, Z+
    1a8a:	f0 81       	ld	r31, Z
    1a8c:	e0 2d       	mov	r30, r0
    1a8e:	ae 01       	movw	r20, r28
    1a90:	4f 5f       	subi	r20, 0xFF	; 255
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	6a e0       	ldi	r22, 0x0A	; 10
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	c8 01       	movw	r24, r16
    1a9a:	19 95       	eicall


    // Returns milliseconds since start of program
    unsigned long time()
    {
      return avr_time_now();
    1a9c:	0e 94 4d 01 	call	0x29a	; 0x29a <avr_time_now>
    rt_time = hardware_.time();
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	63 83       	std	Z+3, r22	; 0x03
    1aa4:	74 83       	std	Z+4, r23	; 0x04
    1aa6:	85 83       	std	Z+5, r24	; 0x05
    1aa8:	96 83       	std	Z+6, r25	; 0x06
  }
    1aaa:	2a 96       	adiw	r28, 0x0a	; 10
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret

00001ac0 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
    1ac0:	4f 92       	push	r4
    1ac2:	5f 92       	push	r5
    1ac4:	6f 92       	push	r6
    1ac6:	7f 92       	push	r7
    1ac8:	af 92       	push	r10
    1aca:	bf 92       	push	r11
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	8c 01       	movw	r16, r24
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
    1aee:	89 ee       	ldi	r24, 0xE9	; 233
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	1c 82       	std	Y+4, r1	; 0x04
    1af8:	1b 82       	std	Y+3, r1	; 0x03
    1afa:	83 ed       	ldi	r24, 0xD3	; 211
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	98 87       	std	Y+8, r25	; 0x08
    1b04:	8f 83       	std	Y+7, r24	; 0x07
    1b06:	9a 87       	std	Y+10, r25	; 0x0a
    1b08:	89 87       	std	Y+9, r24	; 0x09
    1b0a:	1b 86       	std	Y+11, r1	; 0x0b
    1b0c:	1c 86       	std	Y+12, r1	; 0x0c
    1b0e:	1d 86       	std	Y+13, r1	; 0x0d
    1b10:	1e 86       	std	Y+14, r1	; 0x0e
    1b12:	68 01       	movw	r12, r16
    1b14:	8d ee       	ldi	r24, 0xED	; 237
    1b16:	c8 1a       	sub	r12, r24
    1b18:	8b ef       	ldi	r24, 0xFB	; 251
    1b1a:	d8 0a       	sbc	r13, r24
    1b1c:	78 01       	movw	r14, r16
    1b1e:	ab eb       	ldi	r26, 0xBB	; 187
    1b20:	ea 1a       	sub	r14, r26
    1b22:	ab ef       	ldi	r26, 0xFB	; 251
    1b24:	fa 0a       	sbc	r15, r26
      {
        ti.topic_id = publishers[i]->id_;
        ti.topic_name = (char *) publishers[i]->topic_;
        ti.message_type = (char *) publishers[i]->msg_->getType();
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
    1b26:	41 2c       	mov	r4, r1
    1b28:	92 e0       	ldi	r25, 0x02	; 2
    1b2a:	59 2e       	mov	r5, r25
    1b2c:	61 2c       	mov	r6, r1
    1b2e:	71 2c       	mov	r7, r1
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    {
      if (publishers[i] != 0) // non-empty slot
    1b30:	d6 01       	movw	r26, r12
    1b32:	ed 91       	ld	r30, X+
    1b34:	fc 91       	ld	r31, X
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	a9 f1       	breq	.+106    	; 0x1ba4 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      {
        ti.topic_id = publishers[i]->id_;
    1b3a:	84 81       	ldd	r24, Z+4	; 0x04
    1b3c:	95 81       	ldd	r25, Z+5	; 0x05
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) publishers[i]->topic_;
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) publishers[i]->msg_->getType();
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	dc 01       	movw	r26, r24
    1b50:	ed 91       	ld	r30, X+
    1b52:	fc 91       	ld	r31, X
    1b54:	04 80       	ldd	r0, Z+4	; 0x04
    1b56:	f5 81       	ldd	r31, Z+5	; 0x05
    1b58:	e0 2d       	mov	r30, r0
    1b5a:	19 95       	eicall
    1b5c:	98 87       	std	Y+8, r25	; 0x08
    1b5e:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
    1b60:	d6 01       	movw	r26, r12
    1b62:	ed 91       	ld	r30, X+
    1b64:	fc 91       	ld	r31, X
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	06 80       	ldd	r0, Z+6	; 0x06
    1b72:	f7 81       	ldd	r31, Z+7	; 0x07
    1b74:	e0 2d       	mov	r30, r0
    1b76:	19 95       	eicall
    1b78:	9a 87       	std	Y+10, r25	; 0x0a
    1b7a:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = OUTPUT_SIZE;
    1b7c:	4b 86       	std	Y+11, r4	; 0x0b
    1b7e:	5c 86       	std	Y+12, r5	; 0x0c
    1b80:	6d 86       	std	Y+13, r6	; 0x0d
    1b82:	7e 86       	std	Y+14, r7	; 0x0e
    1b84:	d6 01       	movw	r26, r12
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
        publish(publishers[i]->getEndpointType(), &ti);
    1b8a:	60 85       	ldd	r22, Z+8	; 0x08
    1b8c:	71 85       	ldd	r23, Z+9	; 0x09
    1b8e:	d8 01       	movw	r26, r16
    1b90:	ed 91       	ld	r30, X+
    1b92:	fc 91       	ld	r31, X
    1b94:	01 90       	ld	r0, Z+
    1b96:	f0 81       	ld	r31, Z
    1b98:	e0 2d       	mov	r30, r0
    1b9a:	ae 01       	movw	r20, r28
    1b9c:	4f 5f       	subi	r20, 0xFF	; 255
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba0:	c8 01       	movw	r24, r16
    1ba2:	19 95       	eicall
    1ba4:	b2 e0       	ldi	r27, 0x02	; 2
    1ba6:	cb 0e       	add	r12, r27
    1ba8:	d1 1c       	adc	r13, r1

  void negotiateTopics()
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    1baa:	ce 14       	cp	r12, r14
    1bac:	df 04       	cpc	r13, r15
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf2>
    1bb0:	bf cf       	rjmp	.-130    	; 0x1b30 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x70>
    1bb2:	68 01       	movw	r12, r16
    1bb4:	e9 e8       	ldi	r30, 0x89	; 137
    1bb6:	ce 1a       	sub	r12, r30
    1bb8:	eb ef       	ldi	r30, 0xFB	; 251
    1bba:	de 0a       	sbc	r13, r30
      {
        ti.topic_id = subscribers[i]->id_;
        ti.topic_name = (char *) subscribers[i]->topic_;
        ti.message_type = (char *) subscribers[i]->getMsgType();
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
    1bbc:	41 2c       	mov	r4, r1
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	58 2e       	mov	r5, r24
    1bc2:	61 2c       	mov	r6, r1
    1bc4:	71 2c       	mov	r7, r1
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    {
      if (subscribers[i] != 0) // non-empty slot
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	a0 81       	ld	r26, Z
    1bca:	b1 81       	ldd	r27, Z+1	; 0x01
    1bcc:	10 97       	sbiw	r26, 0x00	; 0
    1bce:	e1 f1       	breq	.+120    	; 0x1c48 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x188>
      {
        ti.topic_id = subscribers[i]->id_;
    1bd0:	12 96       	adiw	r26, 0x02	; 2
    1bd2:	8d 91       	ld	r24, X+
    1bd4:	9c 91       	ld	r25, X
    1bd6:	13 97       	sbiw	r26, 0x03	; 3
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) subscribers[i]->topic_;
    1bdc:	14 96       	adiw	r26, 0x04	; 4
    1bde:	8d 91       	ld	r24, X+
    1be0:	9c 91       	ld	r25, X
    1be2:	15 97       	sbiw	r26, 0x05	; 5
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) subscribers[i]->getMsgType();
    1be8:	ed 91       	ld	r30, X+
    1bea:	fc 91       	ld	r31, X
    1bec:	11 97       	sbiw	r26, 0x01	; 1
    1bee:	04 80       	ldd	r0, Z+4	; 0x04
    1bf0:	f5 81       	ldd	r31, Z+5	; 0x05
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	19 95       	eicall
    1bf8:	98 87       	std	Y+8, r25	; 0x08
    1bfa:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
    1bfc:	d7 01       	movw	r26, r14
    1bfe:	8d 91       	ld	r24, X+
    1c00:	9c 91       	ld	r25, X
    1c02:	dc 01       	movw	r26, r24
    1c04:	ed 91       	ld	r30, X+
    1c06:	fc 91       	ld	r31, X
    1c08:	06 80       	ldd	r0, Z+6	; 0x06
    1c0a:	f7 81       	ldd	r31, Z+7	; 0x07
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	19 95       	eicall
    1c10:	9a 87       	std	Y+10, r25	; 0x0a
    1c12:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = INPUT_SIZE;
    1c14:	4b 86       	std	Y+11, r4	; 0x0b
    1c16:	5c 86       	std	Y+12, r5	; 0x0c
    1c18:	6d 86       	std	Y+13, r6	; 0x0d
    1c1a:	7e 86       	std	Y+14, r7	; 0x0e
        publish(subscribers[i]->getEndpointType(), &ti);
    1c1c:	d8 01       	movw	r26, r16
    1c1e:	ed 91       	ld	r30, X+
    1c20:	fc 91       	ld	r31, X
    1c22:	a0 80       	ld	r10, Z
    1c24:	b1 80       	ldd	r11, Z+1	; 0x01
    1c26:	f7 01       	movw	r30, r14
    1c28:	80 81       	ld	r24, Z
    1c2a:	91 81       	ldd	r25, Z+1	; 0x01
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	ed 91       	ld	r30, X+
    1c30:	fc 91       	ld	r31, X
    1c32:	02 80       	ldd	r0, Z+2	; 0x02
    1c34:	f3 81       	ldd	r31, Z+3	; 0x03
    1c36:	e0 2d       	mov	r30, r0
    1c38:	19 95       	eicall
    1c3a:	ae 01       	movw	r20, r28
    1c3c:	4f 5f       	subi	r20, 0xFF	; 255
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	bc 01       	movw	r22, r24
    1c42:	c8 01       	movw	r24, r16
    1c44:	f5 01       	movw	r30, r10
    1c46:	19 95       	eicall
    1c48:	f2 e0       	ldi	r31, 0x02	; 2
    1c4a:	ef 0e       	add	r14, r31
    1c4c:	f1 1c       	adc	r15, r1
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    1c4e:	ce 14       	cp	r12, r14
    1c50:	df 04       	cpc	r13, r15
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x196>
    1c54:	b8 cf       	rjmp	.-144    	; 0x1bc6 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x106>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
        publish(subscribers[i]->getEndpointType(), &ti);
      }
    }
    configured_ = true;
    1c56:	f8 01       	movw	r30, r16
    1c58:	ef 57       	subi	r30, 0x7F	; 127
    1c5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	80 83       	st	Z, r24
  }
    1c60:	2e 96       	adiw	r28, 0x0e	; 14
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	7f 90       	pop	r7
    1c82:	6f 90       	pop	r6
    1c84:	5f 90       	pop	r5
    1c86:	4f 90       	pop	r4
    1c88:	08 95       	ret

00001c8a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    rt_time = hardware_.time();
  }

  void syncTime(uint8_t * data)
    1c8a:	8f 92       	push	r8
    1c8c:	9f 92       	push	r9
    1c8e:	af 92       	push	r10
    1c90:	bf 92       	push	r11
    1c92:	cf 92       	push	r12
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	8c 01       	movw	r16, r24
    1cb4:	5b 01       	movw	r10, r22
    1cb6:	8d ed       	ldi	r24, 0xDD	; 221
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	1b 82       	std	Y+3, r1	; 0x03
    1cc0:	1c 82       	std	Y+4, r1	; 0x04
    1cc2:	1d 82       	std	Y+5, r1	; 0x05
    1cc4:	1e 82       	std	Y+6, r1	; 0x06
    1cc6:	1f 82       	std	Y+7, r1	; 0x07
    1cc8:	18 86       	std	Y+8, r1	; 0x08
    1cca:	19 86       	std	Y+9, r1	; 0x09
    1ccc:	1a 86       	std	Y+10, r1	; 0x0a
    1cce:	0e 94 4d 01 	call	0x29a	; 0x29a <avr_time_now>
  {
    std_msgs::Time t;
    uint32_t offset = hardware_.time() - rt_time;
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	c3 80       	ldd	r12, Z+3	; 0x03
    1cd6:	d4 80       	ldd	r13, Z+4	; 0x04
    1cd8:	e5 80       	ldd	r14, Z+5	; 0x05
    1cda:	f6 80       	ldd	r15, Z+6	; 0x06
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	2c 19       	sub	r18, r12
    1ce2:	3d 09       	sbc	r19, r13
    1ce4:	4e 09       	sbc	r20, r14
    1ce6:	5f 09       	sbc	r21, r15
    1ce8:	69 01       	movw	r12, r18
    1cea:	7a 01       	movw	r14, r20

    t.deserialize(data);
    1cec:	b5 01       	movw	r22, r10
    1cee:	ce 01       	movw	r24, r28
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	0e 94 92 04 	call	0x924	; 0x924 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
    1cf6:	88 ee       	ldi	r24, 0xE8	; 232
    1cf8:	88 2e       	mov	r8, r24
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	98 2e       	mov	r9, r24
    1cfe:	a1 2c       	mov	r10, r1
    1d00:	b1 2c       	mov	r11, r1
    1d02:	c7 01       	movw	r24, r14
    1d04:	b6 01       	movw	r22, r12
    1d06:	a5 01       	movw	r20, r10
    1d08:	94 01       	movw	r18, r8
    1d0a:	0e 94 33 14 	call	0x2866	; 0x2866 <__udivmodsi4>
    1d0e:	cb 80       	ldd	r12, Y+3	; 0x03
    1d10:	dc 80       	ldd	r13, Y+4	; 0x04
    1d12:	ed 80       	ldd	r14, Y+5	; 0x05
    1d14:	fe 80       	ldd	r15, Y+6	; 0x06
    1d16:	c2 0e       	add	r12, r18
    1d18:	d3 1e       	adc	r13, r19
    1d1a:	e4 1e       	adc	r14, r20
    1d1c:	f5 1e       	adc	r15, r21
    1d1e:	cb 82       	std	Y+3, r12	; 0x03
    1d20:	dc 82       	std	Y+4, r13	; 0x04
    1d22:	ed 82       	std	Y+5, r14	; 0x05
    1d24:	fe 82       	std	Y+6, r15	; 0x06
    t.data.nsec += (offset % 1000) * 1000000UL;
    1d26:	9b 01       	movw	r18, r22
    1d28:	ac 01       	movw	r20, r24
    1d2a:	60 e4       	ldi	r22, 0x40	; 64
    1d2c:	72 e4       	ldi	r23, 0x42	; 66
    1d2e:	8f e0       	ldi	r24, 0x0F	; 15
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 0f 14 	call	0x281e	; 0x281e <__mulsi3>
    1d36:	cf 80       	ldd	r12, Y+7	; 0x07
    1d38:	d8 84       	ldd	r13, Y+8	; 0x08
    1d3a:	e9 84       	ldd	r14, Y+9	; 0x09
    1d3c:	fa 84       	ldd	r15, Y+10	; 0x0a
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	8c 0d       	add	r24, r12
    1d44:	9d 1d       	adc	r25, r13
    1d46:	ae 1d       	adc	r26, r14
    1d48:	bf 1d       	adc	r27, r15
    1d4a:	8f 83       	std	Y+7, r24	; 0x07
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	a9 87       	std	Y+9, r26	; 0x09
    1d50:	ba 87       	std	Y+10, r27	; 0x0a
    1d52:	0e 94 4d 01 	call	0x29a	; 0x29a <avr_time_now>
  }

  void setNow(const Time & new_now)
  {
    uint32_t ms = hardware_.time();
    sec_offset = new_now.sec - ms / 1000 - 1;
    1d56:	cb 80       	ldd	r12, Y+3	; 0x03
    1d58:	dc 80       	ldd	r13, Y+4	; 0x04
    1d5a:	ed 80       	ldd	r14, Y+5	; 0x05
    1d5c:	fe 80       	ldd	r15, Y+6	; 0x06
    1d5e:	31 e0       	ldi	r19, 0x01	; 1
    1d60:	c3 1a       	sub	r12, r19
    1d62:	d1 08       	sbc	r13, r1
    1d64:	e1 08       	sbc	r14, r1
    1d66:	f1 08       	sbc	r15, r1
    1d68:	a5 01       	movw	r20, r10
    1d6a:	94 01       	movw	r18, r8
    1d6c:	0e 94 33 14 	call	0x2866	; 0x2866 <__udivmodsi4>
    1d70:	c2 1a       	sub	r12, r18
    1d72:	d3 0a       	sbc	r13, r19
    1d74:	e4 0a       	sbc	r14, r20
    1d76:	f5 0a       	sbc	r15, r21
    1d78:	f8 01       	movw	r30, r16
    1d7a:	c7 82       	std	Z+7, r12	; 0x07
    1d7c:	d0 86       	std	Z+8, r13	; 0x08
    1d7e:	e1 86       	std	Z+9, r14	; 0x09
    1d80:	f2 86       	std	Z+10, r15	; 0x0a
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
    1d82:	cf 80       	ldd	r12, Y+7	; 0x07
    1d84:	d8 84       	ldd	r13, Y+8	; 0x08
    1d86:	e9 84       	ldd	r14, Y+9	; 0x09
    1d88:	fa 84       	ldd	r15, Y+10	; 0x0a
    1d8a:	f6 e3       	ldi	r31, 0x36	; 54
    1d8c:	df 1a       	sub	r13, r31
    1d8e:	f5 e6       	ldi	r31, 0x65	; 101
    1d90:	ef 0a       	sbc	r14, r31
    1d92:	f4 ec       	ldi	r31, 0xC4	; 196
    1d94:	ff 0a       	sbc	r15, r31
    1d96:	9b 01       	movw	r18, r22
    1d98:	ac 01       	movw	r20, r24
    1d9a:	60 e4       	ldi	r22, 0x40	; 64
    1d9c:	72 e4       	ldi	r23, 0x42	; 66
    1d9e:	8f e0       	ldi	r24, 0x0F	; 15
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 0f 14 	call	0x281e	; 0x281e <__mulsi3>
    1da6:	c6 1a       	sub	r12, r22
    1da8:	d7 0a       	sbc	r13, r23
    1daa:	e8 0a       	sbc	r14, r24
    1dac:	f9 0a       	sbc	r15, r25
    1dae:	f8 01       	movw	r30, r16
    1db0:	c3 86       	std	Z+11, r12	; 0x0b
    1db2:	d4 86       	std	Z+12, r13	; 0x0c
    1db4:	e5 86       	std	Z+13, r14	; 0x0d
    1db6:	f6 86       	std	Z+14, r15	; 0x0e
    normalizeSecNSec(sec_offset, nsec_offset);
    1db8:	b8 01       	movw	r22, r16
    1dba:	65 5f       	subi	r22, 0xF5	; 245
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	c8 01       	movw	r24, r16
    1dc0:	07 96       	adiw	r24, 0x07	; 7
    1dc2:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN3ros16normalizeSecNSecERmS0_>
    1dc6:	0e 94 4d 01 	call	0x29a	; 0x29a <avr_time_now>
    t.deserialize(data);
    t.data.sec += offset / 1000;
    t.data.nsec += (offset % 1000) * 1000000UL;

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
    1dca:	f8 01       	movw	r30, r16
    1dcc:	ea 57       	subi	r30, 0x7A	; 122
    1dce:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd0:	60 83       	st	Z, r22
    1dd2:	71 83       	std	Z+1, r23	; 0x01
    1dd4:	82 83       	std	Z+2, r24	; 0x02
    1dd6:	93 83       	std	Z+3, r25	; 0x03
  }
    1dd8:	2a 96       	adiw	r28, 0x0a	; 10
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	bf 90       	pop	r11
    1df6:	af 90       	pop	r10
    1df8:	9f 90       	pop	r9
    1dfa:	8f 90       	pop	r8
    1dfc:	08 95       	ret

00001dfe <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
    1dfe:	2f 92       	push	r2
    1e00:	3f 92       	push	r3
    1e02:	4f 92       	push	r4
    1e04:	5f 92       	push	r5
    1e06:	6f 92       	push	r6
    1e08:	7f 92       	push	r7
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	62 97       	sbiw	r28, 0x12	; 18
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	9a 8b       	std	Y+18, r25	; 0x12
    1e34:	89 8b       	std	Y+17, r24	; 0x11
    1e36:	0e 94 4d 01 	call	0x29a	; 0x29a <avr_time_now>
    1e3a:	4b 01       	movw	r8, r22
    1e3c:	5c 01       	movw	r10, r24
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
    1e3e:	29 89       	ldd	r18, Y+17	; 0x11
    1e40:	3a 89       	ldd	r19, Y+18	; 0x12
    1e42:	2a 57       	subi	r18, 0x7A	; 122
    1e44:	3b 4f       	sbci	r19, 0xFB	; 251
    1e46:	3c 83       	std	Y+4, r19	; 0x04
    1e48:	2b 83       	std	Y+3, r18	; 0x03
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	a2 81       	ldd	r26, Z+2	; 0x02
    1e52:	b3 81       	ldd	r27, Z+3	; 0x03
    1e54:	a5 01       	movw	r20, r10
    1e56:	94 01       	movw	r18, r8
    1e58:	28 1b       	sub	r18, r24
    1e5a:	39 0b       	sbc	r19, r25
    1e5c:	4a 0b       	sbc	r20, r26
    1e5e:	5b 0b       	sbc	r21, r27
    1e60:	da 01       	movw	r26, r20
    1e62:	c9 01       	movw	r24, r18
    1e64:	89 3f       	cpi	r24, 0xF9	; 249
    1e66:	9a 42       	sbci	r25, 0x2A	; 42
    1e68:	a1 05       	cpc	r26, r1
    1e6a:	b1 05       	cpc	r27, r1
    1e6c:	28 f0       	brcs	.+10     	; 0x1e78 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7a>
    {
      configured_ = false;
    1e6e:	e9 89       	ldd	r30, Y+17	; 0x11
    1e70:	fa 89       	ldd	r31, Y+18	; 0x12
    1e72:	ef 57       	subi	r30, 0x7F	; 127
    1e74:	fb 4f       	sbci	r31, 0xFB	; 251
    1e76:	10 82       	st	Z, r1
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
    1e78:	09 89       	ldd	r16, Y+17	; 0x11
    1e7a:	1a 89       	ldd	r17, Y+18	; 0x12
    1e7c:	09 58       	subi	r16, 0x89	; 137
    1e7e:	1b 4f       	sbci	r17, 0xFB	; 251
    1e80:	d8 01       	movw	r26, r16
    1e82:	8d 91       	ld	r24, X+
    1e84:	9c 91       	ld	r25, X
    1e86:	89 2b       	or	r24, r25
    1e88:	81 f0       	breq	.+32     	; 0x1eaa <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xac>
    {
      if (c_time > last_msg_timeout_time)
    1e8a:	e9 89       	ldd	r30, Y+17	; 0x11
    1e8c:	fa 89       	ldd	r31, Y+18	; 0x12
    1e8e:	e6 57       	subi	r30, 0x76	; 118
    1e90:	fb 4f       	sbci	r31, 0xFB	; 251
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	a2 81       	ldd	r26, Z+2	; 0x02
    1e98:	b3 81       	ldd	r27, Z+3	; 0x03
    1e9a:	88 15       	cp	r24, r8
    1e9c:	99 05       	cpc	r25, r9
    1e9e:	aa 05       	cpc	r26, r10
    1ea0:	bb 05       	cpc	r27, r11
    1ea2:	18 f4       	brcc	.+6      	; 0x1eaa <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xac>
      {
        mode_ = MODE_FIRST_FF;
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	11 82       	std	Z+1, r1	; 0x01
    1ea8:	10 82       	st	Z, r1
            last_sync_receive_time = c_time;
            return SPIN_ERR;
          }
          else if (topic_ == TopicInfo::ID_TIME)
          {
            saw_time_msg = true;
    1eaa:	1a 82       	std	Y+2, r1	; 0x02
    1eac:	19 82       	std	Y+1, r1	; 0x01
        }
      }
      int data = hardware_.read();
      if (data < 0)
        break;
      checksum_ += data;
    1eae:	69 88       	ldd	r6, Y+17	; 0x11
    1eb0:	7a 88       	ldd	r7, Y+18	; 0x12
    1eb2:	f1 e8       	ldi	r31, 0x81	; 129
    1eb4:	6f 1a       	sub	r6, r31
    1eb6:	fb ef       	ldi	r31, 0xFB	; 251
    1eb8:	7f 0a       	sbc	r7, r31
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
      {
        mode_ = MODE_FIRST_FF;
        if ((checksum_ % 256) == 255)
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
    1eba:	c9 88       	ldd	r12, Y+17	; 0x11
    1ebc:	da 88       	ldd	r13, Y+18	; 0x12
    1ebe:	25 e8       	ldi	r18, 0x85	; 133
    1ec0:	c2 1a       	sub	r12, r18
    1ec2:	2b ef       	ldi	r18, 0xFB	; 251
    1ec4:	d2 0a       	sbc	r13, r18
            tx_stop_requested = true;
          }
          else
          {
            if (subscribers[topic_ - 100])
              subscribers[topic_ - 100]->callback(message_in);
    1ec6:	49 88       	ldd	r4, Y+17	; 0x11
    1ec8:	5a 88       	ldd	r5, Y+18	; 0x12
    1eca:	33 e1       	ldi	r19, 0x13	; 19
    1ecc:	43 0e       	add	r4, r19
    1ece:	51 1c       	adc	r5, r1
            req_param_resp.deserialize(message_in);
            param_received = true;
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
          {
            configured_ = false;
    1ed0:	49 89       	ldd	r20, Y+17	; 0x11
    1ed2:	5a 89       	ldd	r21, Y+18	; 0x12
    1ed4:	4f 57       	subi	r20, 0x7F	; 127
    1ed6:	5b 4f       	sbci	r21, 0xFB	; 251
    1ed8:	5e 83       	std	Y+6, r21	; 0x06
    1eda:	4d 83       	std	Y+5, r20	; 0x05
            saw_time_msg = true;
            syncTime(message_in);
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
          {
            req_param_resp.deserialize(message_in);
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee0:	81 57       	subi	r24, 0x71	; 113
    1ee2:	9b 4f       	sbci	r25, 0xFB	; 251
    1ee4:	98 87       	std	Y+8, r25	; 0x08
    1ee6:	8f 83       	std	Y+7, r24	; 0x07
            param_received = true;
    1ee8:	a9 89       	ldd	r26, Y+17	; 0x11
    1eea:	ba 89       	ldd	r27, Y+18	; 0x12
    1eec:	a2 57       	subi	r26, 0x72	; 114
    1eee:	bb 4f       	sbci	r27, 0xFB	; 251
    1ef0:	ba 87       	std	Y+10, r27	; 0x0a
    1ef2:	a9 87       	std	Y+9, r26	; 0x09
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
      {
        topic_ += data << 8;
        mode_ = MODE_MESSAGE;
        if (bytes_ == 0)
    1ef4:	e9 88       	ldd	r14, Y+17	; 0x11
    1ef6:	fa 88       	ldd	r15, Y+18	; 0x12
    1ef8:	b7 e8       	ldi	r27, 0x87	; 135
    1efa:	eb 1a       	sub	r14, r27
    1efc:	bb ef       	ldi	r27, 0xFB	; 251
    1efe:	fb 0a       	sbc	r15, r27
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
      {
        bytes_ = data;
        index_ = 0;
    1f00:	29 88       	ldd	r2, Y+17	; 0x11
    1f02:	3a 88       	ldd	r3, Y+18	; 0x12
    1f04:	e3 e8       	ldi	r30, 0x83	; 131
    1f06:	2e 1a       	sub	r2, r30
    1f08:	eb ef       	ldi	r30, 0xFB	; 251
    1f0a:	3e 0a       	sbc	r3, r30
      else if (mode_ == MODE_FIRST_FF)
      {
        if (data == 0xff)
        {
          mode_++;
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    1f0c:	29 89       	ldd	r18, Y+17	; 0x11
    1f0e:	3a 89       	ldd	r19, Y+18	; 0x12
    1f10:	26 57       	subi	r18, 0x76	; 118
    1f12:	3b 4f       	sbci	r19, 0xFB	; 251
    1f14:	3c 87       	std	Y+12, r19	; 0x0c
    1f16:	2b 87       	std	Y+11, r18	; 0x0b
    1f18:	d5 01       	movw	r26, r10
    1f1a:	c4 01       	movw	r24, r8
    1f1c:	44 96       	adiw	r24, 0x14	; 20
    1f1e:	a1 1d       	adc	r26, r1
    1f20:	b1 1d       	adc	r27, r1
    1f22:	8d 87       	std	Y+13, r24	; 0x0d
    1f24:	9e 87       	std	Y+14, r25	; 0x0e
    1f26:	af 87       	std	Y+15, r26	; 0x0f
    1f28:	b8 8b       	std	Y+16, r27	; 0x10

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
    1f2a:	e9 89       	ldd	r30, Y+17	; 0x11
    1f2c:	fa 89       	ldd	r31, Y+18	; 0x12
    1f2e:	87 85       	ldd	r24, Z+15	; 0x0f
    1f30:	90 89       	ldd	r25, Z+16	; 0x10
    1f32:	a1 89       	ldd	r26, Z+17	; 0x11
    1f34:	b2 89       	ldd	r27, Z+18	; 0x12
    1f36:	89 2b       	or	r24, r25
    1f38:	8a 2b       	or	r24, r26
    1f3a:	8b 2b       	or	r24, r27
    1f3c:	31 f4       	brne	.+12     	; 0x1f4a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x14c>

    // Read a byte of data from ROS connection.
    // If no data, returns -1
    int read()
    {
      return avr_uart_receive_byte();
    1f3e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <avr_uart_receive_byte>
    1f42:	9c 01       	movw	r18, r24
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
        }
      }
      int data = hardware_.read();
      if (data < 0)
    1f44:	97 ff       	sbrs	r25, 7
    1f46:	15 c0       	rjmp	.+42     	; 0x1f72 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x174>
    1f48:	49 c1       	rjmp	.+658    	; 0x21dc <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3de>


    // Returns milliseconds since start of program
    unsigned long time()
    {
      return avr_time_now();
    1f4a:	0e 94 4d 01 	call	0x29a	; 0x29a <avr_time_now>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	88 19       	sub	r24, r8
    1f54:	99 09       	sbc	r25, r9
    1f56:	aa 09       	sbc	r26, r10
    1f58:	bb 09       	sbc	r27, r11
    1f5a:	e9 89       	ldd	r30, Y+17	; 0x11
    1f5c:	fa 89       	ldd	r31, Y+18	; 0x12
    1f5e:	27 85       	ldd	r18, Z+15	; 0x0f
    1f60:	30 89       	ldd	r19, Z+16	; 0x10
    1f62:	41 89       	ldd	r20, Z+17	; 0x11
    1f64:	52 89       	ldd	r21, Z+18	; 0x12
    1f66:	28 17       	cp	r18, r24
    1f68:	39 07       	cpc	r19, r25
    1f6a:	4a 07       	cpc	r20, r26
    1f6c:	5b 07       	cpc	r21, r27
    1f6e:	38 f7       	brcc	.-50     	; 0x1f3e <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x140>
    1f70:	65 c1       	rjmp	.+714    	; 0x223c <__stack+0x3d>
        }
      }
      int data = hardware_.read();
      if (data < 0)
        break;
      checksum_ += data;
    1f72:	d3 01       	movw	r26, r6
    1f74:	8d 91       	ld	r24, X+
    1f76:	9c 91       	ld	r25, X
    1f78:	11 97       	sbiw	r26, 0x01	; 1
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	8d 93       	st	X+, r24
    1f80:	9c 93       	st	X, r25
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
    1f82:	f8 01       	movw	r30, r16
    1f84:	40 81       	ld	r20, Z
    1f86:	51 81       	ldd	r21, Z+1	; 0x01
    1f88:	47 30       	cpi	r20, 0x07	; 7
    1f8a:	51 05       	cpc	r21, r1
    1f8c:	e9 f4       	brne	.+58     	; 0x1fc8 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ca>
      {
        message_in[index_++] = data;
    1f8e:	d1 01       	movw	r26, r2
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	11 97       	sbiw	r26, 0x01	; 1
    1f96:	ac 01       	movw	r20, r24
    1f98:	4f 5f       	subi	r20, 0xFF	; 255
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	4d 93       	st	X+, r20
    1f9e:	5c 93       	st	X, r21
    1fa0:	e9 89       	ldd	r30, Y+17	; 0x11
    1fa2:	fa 89       	ldd	r31, Y+18	; 0x12
    1fa4:	e8 0f       	add	r30, r24
    1fa6:	f9 1f       	adc	r31, r25
    1fa8:	23 8b       	std	Z+19, r18	; 0x13
        bytes_--;
    1faa:	f7 01       	movw	r30, r14
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	91 83       	std	Z+1, r25	; 0x01
    1fb4:	80 83       	st	Z, r24
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
    1fb6:	89 2b       	or	r24, r25
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
    1fba:	b7 cf       	rjmp	.-146    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          mode_ = MODE_MSG_CHECKSUM;
    1fbc:	e8 e0       	ldi	r30, 0x08	; 8
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	d8 01       	movw	r26, r16
    1fc2:	ed 93       	st	X+, r30
    1fc4:	fc 93       	st	X, r31
    1fc6:	b1 cf       	rjmp	.-158    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_FIRST_FF)
    1fc8:	41 15       	cp	r20, r1
    1fca:	51 05       	cpc	r21, r1
    1fcc:	41 f5       	brne	.+80     	; 0x201e <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
      {
        if (data == 0xff)
    1fce:	2f 3f       	cpi	r18, 0xFF	; 255
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	81 f4       	brne	.+32     	; 0x1ff4 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f6>
        {
          mode_++;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    1fdc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fde:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fe0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fe2:	58 89       	ldd	r21, Y+16	; 0x10
    1fe4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fe6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fe8:	2d 93       	st	X+, r18
    1fea:	3d 93       	st	X+, r19
    1fec:	4d 93       	st	X+, r20
    1fee:	5c 93       	st	X, r21
    1ff0:	13 97       	sbiw	r26, 0x03	; 3
    1ff2:	9b cf       	rjmp	.-202    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
    1ff4:	0e 94 4d 01 	call	0x29a	; 0x29a <avr_time_now>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	88 19       	sub	r24, r8
    1ffe:	99 09       	sbc	r25, r9
    2000:	aa 09       	sbc	r26, r10
    2002:	bb 09       	sbc	r27, r11
    2004:	89 38       	cpi	r24, 0x89	; 137
    2006:	93 41       	sbci	r25, 0x13	; 19
    2008:	a1 05       	cpc	r26, r1
    200a:	b1 05       	cpc	r27, r1
    200c:	08 f4       	brcc	.+2      	; 0x2010 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x212>
    200e:	8d cf       	rjmp	.-230    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
    2010:	29 89       	ldd	r18, Y+17	; 0x11
    2012:	3a 89       	ldd	r19, Y+18	; 0x12
    2014:	2f 57       	subi	r18, 0x7F	; 127
    2016:	3b 4f       	sbci	r19, 0xFB	; 251
    2018:	d9 01       	movw	r26, r18
    201a:	1c 92       	st	X, r1
    201c:	0f c1       	rjmp	.+542    	; 0x223c <__stack+0x3d>
          return SPIN_TIMEOUT;
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
    201e:	41 30       	cpi	r20, 0x01	; 1
    2020:	51 05       	cpc	r21, r1
    2022:	91 f4       	brne	.+36     	; 0x2048 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
      {
        if (data == PROTOCOL_VER)
    2024:	2e 3f       	cpi	r18, 0xFE	; 254
    2026:	31 05       	cpc	r19, r1
    2028:	19 f4       	brne	.+6      	; 0x2030 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x232>
        {
          mode_++;
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	2b c0       	rjmp	.+86     	; 0x2086 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x288>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
    2030:	11 82       	std	Z+1, r1	; 0x01
    2032:	10 82       	st	Z, r1
          if (configured_ == false)
    2034:	ed 81       	ldd	r30, Y+5	; 0x05
    2036:	fe 81       	ldd	r31, Y+6	; 0x06
    2038:	80 81       	ld	r24, Z
    203a:	81 11       	cpse	r24, r1
    203c:	76 cf       	rjmp	.-276    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
            requestSyncTime();  /* send a msg back showing our protocol version */
    203e:	89 89       	ldd	r24, Y+17	; 0x11
    2040:	9a 89       	ldd	r25, Y+18	; 0x12
    2042:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
    2046:	71 cf       	rjmp	.-286    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
    2048:	42 30       	cpi	r20, 0x02	; 2
    204a:	51 05       	cpc	r21, r1
    204c:	69 f4       	brne	.+26     	; 0x2068 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x26a>
      {
        bytes_ = data;
    204e:	d7 01       	movw	r26, r14
    2050:	2d 93       	st	X+, r18
    2052:	3c 93       	st	X, r19
        index_ = 0;
    2054:	f1 01       	movw	r30, r2
    2056:	11 82       	std	Z+1, r1	; 0x01
    2058:	10 82       	st	Z, r1
        mode_++;
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	d8 01       	movw	r26, r16
    2060:	8d 93       	st	X+, r24
    2062:	9c 93       	st	X, r25
        checksum_ = data;               /* first byte for calculating size checksum */
    2064:	f3 01       	movw	r30, r6
    2066:	4f c0       	rjmp	.+158    	; 0x2106 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x308>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
    2068:	43 30       	cpi	r20, 0x03	; 3
    206a:	51 05       	cpc	r21, r1
    206c:	81 f4       	brne	.+32     	; 0x208e <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x290>
      {
        bytes_ += data << 8;
    206e:	32 2f       	mov	r19, r18
    2070:	22 27       	eor	r18, r18
    2072:	d7 01       	movw	r26, r14
    2074:	8d 91       	ld	r24, X+
    2076:	9c 91       	ld	r25, X
    2078:	11 97       	sbiw	r26, 0x01	; 1
    207a:	28 0f       	add	r18, r24
    207c:	39 1f       	adc	r19, r25
    207e:	2d 93       	st	X+, r18
    2080:	3c 93       	st	X, r19
        mode_++;
    2082:	84 e0       	ldi	r24, 0x04	; 4
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	f8 01       	movw	r30, r16
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	80 83       	st	Z, r24
    208c:	4e cf       	rjmp	.-356    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
    208e:	44 30       	cpi	r20, 0x04	; 4
    2090:	51 05       	cpc	r21, r1
    2092:	81 f4       	brne	.+32     	; 0x20b4 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b6>
      {
        if ((checksum_ % 256) == 255)
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	71 e0       	ldi	r23, 0x01	; 1
    2098:	0e 94 1f 14 	call	0x283e	; 0x283e <__divmodhi4>
    209c:	8f 3f       	cpi	r24, 0xFF	; 255
    209e:	91 05       	cpc	r25, r1
    20a0:	29 f4       	brne	.+10     	; 0x20ac <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ae>
          mode_++;
    20a2:	85 e0       	ldi	r24, 0x05	; 5
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	3f cf       	rjmp	.-386    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
    20ac:	f8 01       	movw	r30, r16
    20ae:	11 82       	std	Z+1, r1	; 0x01
    20b0:	10 82       	st	Z, r1
    20b2:	3b cf       	rjmp	.-394    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
    20b4:	45 30       	cpi	r20, 0x05	; 5
    20b6:	51 05       	cpc	r21, r1
    20b8:	61 f4       	brne	.+24     	; 0x20d2 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
      {
        topic_ = data;
    20ba:	d6 01       	movw	r26, r12
    20bc:	2d 93       	st	X+, r18
    20be:	3c 93       	st	X, r19
        mode_++;
    20c0:	86 e0       	ldi	r24, 0x06	; 6
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	f8 01       	movw	r30, r16
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
        checksum_ = data;               /* first byte included in checksum */
    20ca:	d3 01       	movw	r26, r6
    20cc:	2d 93       	st	X+, r18
    20ce:	3c 93       	st	X, r19
    20d0:	2c cf       	rjmp	.-424    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
    20d2:	46 30       	cpi	r20, 0x06	; 6
    20d4:	51 05       	cpc	r21, r1
    20d6:	d1 f4       	brne	.+52     	; 0x210c <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30e>
      {
        topic_ += data << 8;
    20d8:	32 2f       	mov	r19, r18
    20da:	22 27       	eor	r18, r18
    20dc:	f6 01       	movw	r30, r12
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	28 0f       	add	r18, r24
    20e4:	39 1f       	adc	r19, r25
    20e6:	31 83       	std	Z+1, r19	; 0x01
    20e8:	20 83       	st	Z, r18
        mode_ = MODE_MESSAGE;
    20ea:	e7 e0       	ldi	r30, 0x07	; 7
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	d8 01       	movw	r26, r16
    20f0:	ed 93       	st	X+, r30
    20f2:	fc 93       	st	X, r31
        if (bytes_ == 0)
    20f4:	d7 01       	movw	r26, r14
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	89 2b       	or	r24, r25
    20fc:	09 f0       	breq	.+2      	; 0x2100 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x302>
    20fe:	15 cf       	rjmp	.-470    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          mode_ = MODE_MSG_CHECKSUM;
    2100:	28 e0       	ldi	r18, 0x08	; 8
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	f8 01       	movw	r30, r16
    2106:	31 83       	std	Z+1, r19	; 0x01
    2108:	20 83       	st	Z, r18
    210a:	0f cf       	rjmp	.-482    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
    210c:	48 30       	cpi	r20, 0x08	; 8
    210e:	51 05       	cpc	r21, r1
    2110:	09 f0       	breq	.+2      	; 0x2114 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
    2112:	0b cf       	rjmp	.-490    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      {
        mode_ = MODE_FIRST_FF;
    2114:	11 82       	std	Z+1, r1	; 0x01
    2116:	10 82       	st	Z, r1
        if ((checksum_ % 256) == 255)
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	71 e0       	ldi	r23, 0x01	; 1
    211c:	0e 94 1f 14 	call	0x283e	; 0x283e <__divmodhi4>
    2120:	8f 3f       	cpi	r24, 0xFF	; 255
    2122:	91 05       	cpc	r25, r1
    2124:	09 f0       	breq	.+2      	; 0x2128 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
    2126:	01 cf       	rjmp	.-510    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
    2128:	f6 01       	movw	r30, r12
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	d9 f4       	brne	.+54     	; 0x2168 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36a>
          {
            requestSyncTime();
    2132:	89 89       	ldd	r24, Y+17	; 0x11
    2134:	9a 89       	ldd	r25, Y+18	; 0x12
    2136:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
    213a:	89 89       	ldd	r24, Y+17	; 0x11
    213c:	9a 89       	ldd	r25, Y+18	; 0x12
    213e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
    2142:	29 89       	ldd	r18, Y+17	; 0x11
    2144:	3a 89       	ldd	r19, Y+18	; 0x12
    2146:	2e 57       	subi	r18, 0x7E	; 126
    2148:	3b 4f       	sbci	r19, 0xFB	; 251
    214a:	d9 01       	movw	r26, r18
    214c:	8d 92       	st	X+, r8
    214e:	9d 92       	st	X+, r9
    2150:	ad 92       	st	X+, r10
    2152:	bc 92       	st	X, r11
    2154:	13 97       	sbiw	r26, 0x03	; 3
            last_sync_receive_time = c_time;
    2156:	eb 81       	ldd	r30, Y+3	; 0x03
    2158:	fc 81       	ldd	r31, Y+4	; 0x04
    215a:	80 82       	st	Z, r8
    215c:	91 82       	std	Z+1, r9	; 0x01
    215e:	a2 82       	std	Z+2, r10	; 0x02
    2160:	b3 82       	std	Z+3, r11	; 0x03
            return SPIN_ERR;
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	72 c0       	rjmp	.+228    	; 0x224c <__stack+0x4d>
          }
          else if (topic_ == TopicInfo::ID_TIME)
    2168:	8a 30       	cpi	r24, 0x0A	; 10
    216a:	91 05       	cpc	r25, r1
    216c:	41 f4       	brne	.+16     	; 0x217e <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>
          {
            saw_time_msg = true;
            syncTime(message_in);
    216e:	b2 01       	movw	r22, r4
    2170:	89 89       	ldd	r24, Y+17	; 0x11
    2172:	9a 89       	ldd	r25, Y+18	; 0x12
    2174:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
            last_sync_receive_time = c_time;
            return SPIN_ERR;
          }
          else if (topic_ == TopicInfo::ID_TIME)
          {
            saw_time_msg = true;
    2178:	f1 e0       	ldi	r31, 0x01	; 1
    217a:	fa 83       	std	Y+2, r31	; 0x02
    217c:	d6 ce       	rjmp	.-596    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
            syncTime(message_in);
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
    217e:	86 30       	cpi	r24, 0x06	; 6
    2180:	91 05       	cpc	r25, r1
    2182:	51 f4       	brne	.+20     	; 0x2198 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39a>
          {
            req_param_resp.deserialize(message_in);
    2184:	b2 01       	movw	r22, r4
    2186:	8f 81       	ldd	r24, Y+7	; 0x07
    2188:	98 85       	ldd	r25, Y+8	; 0x08
    218a:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	a9 85       	ldd	r26, Y+9	; 0x09
    2192:	ba 85       	ldd	r27, Y+10	; 0x0a
    2194:	8c 93       	st	X, r24
    2196:	c9 ce       	rjmp	.-622    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
    2198:	8b 30       	cpi	r24, 0x0B	; 11
    219a:	91 05       	cpc	r25, r1
    219c:	31 f4       	brne	.+12     	; 0x21aa <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ac>
          {
            configured_ = false;
    219e:	ed 81       	ldd	r30, Y+5	; 0x05
    21a0:	fe 81       	ldd	r31, Y+6	; 0x06
    21a2:	10 82       	st	Z, r1
            tx_stop_requested = true;
    21a4:	f1 e0       	ldi	r31, 0x01	; 1
    21a6:	f9 83       	std	Y+1, r31	; 0x01
    21a8:	c0 ce       	rjmp	.-640    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          }
          else
          {
            if (subscribers[topic_ - 100])
    21aa:	fc 01       	movw	r30, r24
    21ac:	e4 56       	subi	r30, 0x64	; 100
    21ae:	f1 09       	sbc	r31, r1
    21b0:	ee 0f       	add	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	29 89       	ldd	r18, Y+17	; 0x11
    21b6:	3a 89       	ldd	r19, Y+18	; 0x12
    21b8:	e2 0f       	add	r30, r18
    21ba:	f3 1f       	adc	r31, r19
    21bc:	eb 5b       	subi	r30, 0xBB	; 187
    21be:	fb 4f       	sbci	r31, 0xFB	; 251
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	09 f4       	brne	.+2      	; 0x21ca <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3cc>
    21c8:	b0 ce       	rjmp	.-672    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
              subscribers[topic_ - 100]->callback(message_in);
    21ca:	dc 01       	movw	r26, r24
    21cc:	ed 91       	ld	r30, X+
    21ce:	fc 91       	ld	r31, X
    21d0:	01 90       	ld	r0, Z+
    21d2:	f0 81       	ld	r31, Z
    21d4:	e0 2d       	mov	r30, r0
    21d6:	b2 01       	movw	r22, r4
    21d8:	19 95       	eicall
    21da:	a7 ce       	rjmp	.-690    	; 0x1f2a <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
    21dc:	e9 89       	ldd	r30, Y+17	; 0x11
    21de:	fa 89       	ldd	r31, Y+18	; 0x12
    21e0:	ef 57       	subi	r30, 0x7F	; 127
    21e2:	fb 4f       	sbci	r31, 0xFB	; 251
    21e4:	80 81       	ld	r24, Z
    21e6:	88 23       	and	r24, r24
    21e8:	01 f1       	breq	.+64     	; 0x222a <__stack+0x2b>
    21ea:	09 89       	ldd	r16, Y+17	; 0x11
    21ec:	1a 89       	ldd	r17, Y+18	; 0x12
    21ee:	0e 57       	subi	r16, 0x7E	; 126
    21f0:	1b 4f       	sbci	r17, 0xFB	; 251
    21f2:	f8 01       	movw	r30, r16
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	a2 81       	ldd	r26, Z+2	; 0x02
    21fa:	b3 81       	ldd	r27, Z+3	; 0x03
    21fc:	a5 01       	movw	r20, r10
    21fe:	94 01       	movw	r18, r8
    2200:	28 1b       	sub	r18, r24
    2202:	39 0b       	sbc	r19, r25
    2204:	4a 0b       	sbc	r20, r26
    2206:	5b 0b       	sbc	r21, r27
    2208:	da 01       	movw	r26, r20
    220a:	c9 01       	movw	r24, r18
    220c:	85 3c       	cpi	r24, 0xC5	; 197
    220e:	99 40       	sbci	r25, 0x09	; 9
    2210:	a1 05       	cpc	r26, r1
    2212:	b1 05       	cpc	r27, r1
    2214:	50 f0       	brcs	.+20     	; 0x222a <__stack+0x2b>
    {
      requestSyncTime();
    2216:	89 89       	ldd	r24, Y+17	; 0x11
    2218:	9a 89       	ldd	r25, Y+18	; 0x12
    221a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
    221e:	d8 01       	movw	r26, r16
    2220:	8d 92       	st	X+, r8
    2222:	9d 92       	st	X+, r9
    2224:	ad 92       	st	X+, r10
    2226:	bc 92       	st	X, r11
    2228:	13 97       	sbiw	r26, 0x03	; 3
    }

    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
    222a:	ba 81       	ldd	r27, Y+2	; 0x02
    222c:	b1 11       	cpse	r27, r1
    222e:	09 c0       	rjmp	.+18     	; 0x2242 <__stack+0x43>
    2230:	e9 81       	ldd	r30, Y+1	; 0x01
    2232:	e1 11       	cpse	r30, r1
    2234:	09 c0       	rjmp	.+18     	; 0x2248 <__stack+0x49>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	08 c0       	rjmp	.+16     	; 0x224c <__stack+0x4d>
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
    223c:	8e ef       	ldi	r24, 0xFE	; 254
    223e:	9f ef       	ldi	r25, 0xFF	; 255
    2240:	05 c0       	rjmp	.+10     	; 0x224c <__stack+0x4d>
    {
      requestSyncTime();
      last_sync_time = c_time;
    }

    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
    2242:	8c ef       	ldi	r24, 0xFC	; 252
    2244:	9f ef       	ldi	r25, 0xFF	; 255
    2246:	02 c0       	rjmp	.+4      	; 0x224c <__stack+0x4d>
    2248:	8d ef       	ldi	r24, 0xFD	; 253
    224a:	9f ef       	ldi	r25, 0xFF	; 255
  }
    224c:	62 96       	adiw	r28, 0x12	; 18
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	0f 91       	pop	r16
    2260:	ff 90       	pop	r15
    2262:	ef 90       	pop	r14
    2264:	df 90       	pop	r13
    2266:	cf 90       	pop	r12
    2268:	bf 90       	pop	r11
    226a:	af 90       	pop	r10
    226c:	9f 90       	pop	r9
    226e:	8f 90       	pop	r8
    2270:	7f 90       	pop	r7
    2272:	6f 90       	pop	r6
    2274:	5f 90       	pop	r5
    2276:	4f 90       	pop	r4
    2278:	3f 90       	pop	r3
    227a:	2f 90       	pop	r2
    227c:	08 95       	ret

0000227e <main>:
ros::Subscriber<std_msgs::Float32MultiArray> sub("mani", &messageCb );

int main()
{
  //DDRB |= (1 << 7);
  Nastroika();
    227e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Nastroika>
  SetAngle1(0);
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 8b 01 	call	0x316	; 0x316 <SetAngle1>
  SetAngle2(0);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SetAngle2>
  SetAngle3(0);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	0e 94 2b 02 	call	0x456	; 0x456 <SetAngle3>
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	a8 95       	wdr
    22a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    22a4:	88 61       	ori	r24, 0x18	; 24
    22a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    22aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    22ae:	0f be       	out	0x3f, r0	; 63

    // Initialize the AVR
    void init()
    {
      wdt_disable();
      avr_time_init();
    22b0:	0e 94 44 01 	call	0x288	; 0x288 <avr_time_init>
      avr_uart_init();
    22b4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <avr_uart_init>
      sei();
    22b8:	78 94       	sei

  /* Start serial, initialize buffers */
  void initNode()
  {
    hardware_.init();
    mode_ = 0;
    22ba:	10 92 f2 08 	sts	0x08F2, r1	; 0x8008f2 <nh+0x478>
    22be:	10 92 f1 08 	sts	0x08F1, r1	; 0x8008f1 <nh+0x477>
    bytes_ = 0;
    22c2:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <nh+0x47a>
    22c6:	10 92 f3 08 	sts	0x08F3, r1	; 0x8008f3 <nh+0x479>
    index_ = 0;
    22ca:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <nh+0x47e>
    22ce:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <nh+0x47d>
    topic_ = 0;
    22d2:	10 92 f6 08 	sts	0x08F6, r1	; 0x8008f6 <nh+0x47c>
    22d6:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <nh+0x47b>
    22da:	ef eb       	ldi	r30, 0xBF	; 191
    22dc:	f8 e0       	ldi	r31, 0x08	; 8
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (subscribers[i] == 0) // empty slot
    22e2:	21 91       	ld	r18, Z+
    22e4:	31 91       	ld	r19, Z+
    22e6:	23 2b       	or	r18, r19
    22e8:	81 f4       	brne	.+32     	; 0x230a <main+0x8c>
      {
        subscribers[i] = &s;
    22ea:	fc 01       	movw	r30, r24
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	e1 54       	subi	r30, 0x41	; 65
    22f2:	f7 4f       	sbci	r31, 0xF7	; 247
    22f4:	2c e4       	ldi	r18, 0x4C	; 76
    22f6:	34 e0       	ldi	r19, 0x04	; 4
    22f8:	31 83       	std	Z+1, r19	; 0x01
    22fa:	20 83       	st	Z, r18
        s.id_ = i + 100;
    22fc:	8c 59       	subi	r24, 0x9C	; 156
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <sub+0x3>
    2304:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <sub+0x2>
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <main+0x94>
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	89 31       	cpi	r24, 0x19	; 25
    230e:	91 05       	cpc	r25, r1
    2310:	41 f7       	brne	.-48     	; 0x22e2 <main+0x64>
    // {
    //   PORTB ^= (1 << PB7);
    //   lasttime = avr_time_now();

    // }
    nh.spinOnce();
    2312:	8a e7       	ldi	r24, 0x7A	; 122
    2314:	94 e0       	ldi	r25, 0x04	; 4
    2316:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_ZN3ros11NodeHandle_I18Atmega2560HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
    231a:	fb cf       	rjmp	.-10     	; 0x2312 <main+0x94>

0000231c <_GLOBAL__sub_I___cxa_pure_virtual>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
    231c:	ea e7       	ldi	r30, 0x7A	; 122
    231e:	f4 e0       	ldi	r31, 0x04	; 4
    2320:	81 e3       	ldi	r24, 0x31	; 49
    2322:	94 e0       	ldi	r25, 0x04	; 4
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	13 82       	std	Z+3, r1	; 0x03
    232a:	14 82       	std	Z+4, r1	; 0x04
    232c:	15 82       	std	Z+5, r1	; 0x05
    232e:	16 82       	std	Z+6, r1	; 0x06
    2330:	17 82       	std	Z+7, r1	; 0x07
    2332:	10 86       	std	Z+8, r1	; 0x08
    2334:	11 86       	std	Z+9, r1	; 0x09
    2336:	12 86       	std	Z+10, r1	; 0x0a
    2338:	13 86       	std	Z+11, r1	; 0x0b
    233a:	14 86       	std	Z+12, r1	; 0x0c
    233c:	15 86       	std	Z+13, r1	; 0x0d
    233e:	16 86       	std	Z+14, r1	; 0x0e
    2340:	17 86       	std	Z+15, r1	; 0x0f
    2342:	10 8a       	std	Z+16, r1	; 0x10
    2344:	11 8a       	std	Z+17, r1	; 0x11
    2346:	12 8a       	std	Z+18, r1	; 0x12
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	92 e0       	ldi	r25, 0x02	; 2
    234c:	ed e8       	ldi	r30, 0x8D	; 141
    234e:	f4 e0       	ldi	r31, 0x04	; 4
    2350:	df 01       	movw	r26, r30
    2352:	9c 01       	movw	r18, r24
    2354:	1d 92       	st	X+, r1
    2356:	21 50       	subi	r18, 0x01	; 1
    2358:	30 40       	sbci	r19, 0x00	; 0
    235a:	e1 f7       	brne	.-8      	; 0x2354 <_GLOBAL__sub_I___cxa_pure_virtual+0x38>
    235c:	ed e8       	ldi	r30, 0x8D	; 141
    235e:	f6 e0       	ldi	r31, 0x06	; 6
    2360:	df 01       	movw	r26, r30
    2362:	9c 01       	movw	r18, r24
    2364:	1d 92       	st	X+, r1
    2366:	21 50       	subi	r18, 0x01	; 1
    2368:	30 40       	sbci	r19, 0x00	; 0
    236a:	e1 f7       	brne	.-8      	; 0x2364 <_GLOBAL__sub_I___cxa_pure_virtual+0x48>
    236c:	82 e3       	ldi	r24, 0x32	; 50
    236e:	ed e8       	ldi	r30, 0x8D	; 141
    2370:	f8 e0       	ldi	r31, 0x08	; 8
    2372:	df 01       	movw	r26, r30
    2374:	28 2f       	mov	r18, r24
    2376:	1d 92       	st	X+, r1
    2378:	2a 95       	dec	r18
    237a:	e9 f7       	brne	.-6      	; 0x2376 <_GLOBAL__sub_I___cxa_pure_virtual+0x5a>
    237c:	ef eb       	ldi	r30, 0xBF	; 191
    237e:	f8 e0       	ldi	r31, 0x08	; 8
    2380:	df 01       	movw	r26, r30
    2382:	1d 92       	st	X+, r1
    2384:	8a 95       	dec	r24
    2386:	e9 f7       	brne	.-6      	; 0x2382 <_GLOBAL__sub_I___cxa_pure_virtual+0x66>
    2388:	10 92 f2 08 	sts	0x08F2, r1	; 0x8008f2 <nh+0x478>
    238c:	10 92 f1 08 	sts	0x08F1, r1	; 0x8008f1 <nh+0x477>
    2390:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <nh+0x47a>
    2394:	10 92 f3 08 	sts	0x08F3, r1	; 0x8008f3 <nh+0x479>
    2398:	10 92 f6 08 	sts	0x08F6, r1	; 0x8008f6 <nh+0x47c>
    239c:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <nh+0x47b>
    23a0:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <nh+0x47e>
    23a4:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <nh+0x47d>
    23a8:	10 92 fa 08 	sts	0x08FA, r1	; 0x8008fa <nh+0x480>
    23ac:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <nh+0x47f>
    23b0:	10 92 fb 08 	sts	0x08FB, r1	; 0x8008fb <nh+0x481>
    23b4:	10 92 fc 08 	sts	0x08FC, r1	; 0x8008fc <nh+0x482>
    23b8:	10 92 fd 08 	sts	0x08FD, r1	; 0x8008fd <nh+0x483>
    23bc:	10 92 fe 08 	sts	0x08FE, r1	; 0x8008fe <nh+0x484>
    23c0:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <nh+0x485>
    23c4:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <nh+0x486>
    23c8:	10 92 01 09 	sts	0x0901, r1	; 0x800901 <nh+0x487>
    23cc:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <nh+0x488>
    23d0:	10 92 03 09 	sts	0x0903, r1	; 0x800903 <nh+0x489>
    23d4:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <nh+0x48a>
    23d8:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <nh+0x48b>
    23dc:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <nh+0x48c>
    23e0:	10 92 07 09 	sts	0x0907, r1	; 0x800907 <nh+0x48d>
    23e4:	10 92 08 09 	sts	0x0908, r1	; 0x800908 <nh+0x48e>
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	94 e0       	ldi	r25, 0x04	; 4
    23ec:	90 93 0a 09 	sts	0x090A, r25	; 0x80090a <nh+0x490>
    23f0:	80 93 09 09 	sts	0x0909, r24	; 0x800909 <nh+0x48f>
    23f4:	10 92 0b 09 	sts	0x090B, r1	; 0x80090b <nh+0x491>
    23f8:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <nh+0x492>
    23fc:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <nh+0x493>
    2400:	10 92 0e 09 	sts	0x090E, r1	; 0x80090e <nh+0x494>
    2404:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <nh+0x495>
    2408:	10 92 10 09 	sts	0x0910, r1	; 0x800910 <nh+0x496>
    240c:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <nh+0x497>
    2410:	10 92 12 09 	sts	0x0912, r1	; 0x800912 <nh+0x498>
    2414:	10 92 14 09 	sts	0x0914, r1	; 0x800914 <nh+0x49a>
    2418:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <nh+0x499>
    241c:	10 92 15 09 	sts	0x0915, r1	; 0x800915 <nh+0x49b>
    2420:	10 92 16 09 	sts	0x0916, r1	; 0x800916 <nh+0x49c>
    2424:	10 92 17 09 	sts	0x0917, r1	; 0x800917 <nh+0x49d>
    2428:	10 92 18 09 	sts	0x0918, r1	; 0x800918 <nh+0x49e>
    242c:	10 92 19 09 	sts	0x0919, r1	; 0x800919 <nh+0x49f>
    2430:	10 92 1a 09 	sts	0x091A, r1	; 0x80091a <nh+0x4a0>
    2434:	10 92 1b 09 	sts	0x091B, r1	; 0x80091b <nh+0x4a1>
    2438:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <nh+0x4a2>
    243c:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <nh+0x4a4>
    2440:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <nh+0x4a3>
    2444:	10 92 1f 09 	sts	0x091F, r1	; 0x80091f <nh+0x4a5>
    2448:	10 92 20 09 	sts	0x0920, r1	; 0x800920 <nh+0x4a6>
    244c:	10 92 21 09 	sts	0x0921, r1	; 0x800921 <nh+0x4a7>
    2450:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <nh+0x4a8>
    2454:	10 92 24 09 	sts	0x0924, r1	; 0x800924 <nh+0x4aa>
    2458:	10 92 23 09 	sts	0x0923, r1	; 0x800923 <nh+0x4a9>
    245c:	10 92 26 09 	sts	0x0926, r1	; 0x800926 <nh+0x4ac>
    2460:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <nh+0x4ab>
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
    cb_(cb),
    endpoint_(endpoint)
    2464:	ec e4       	ldi	r30, 0x4C	; 76
    2466:	f4 e0       	ldi	r31, 0x04	; 4
    2468:	8b e3       	ldi	r24, 0x3B	; 59
    246a:	94 e0       	ldi	r25, 0x04	; 4
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
      layout(),
      data_length(0), st_data(), data(nullptr)
    2470:	85 e2       	ldi	r24, 0x25	; 37
    2472:	94 e0       	ldi	r25, 0x04	; 4
    2474:	97 83       	std	Z+7, r25	; 0x07
    2476:	86 83       	std	Z+6, r24	; 0x06
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
    2478:	89 e1       	ldi	r24, 0x19	; 25
    247a:	94 e0       	ldi	r25, 0x04	; 4
    247c:	91 87       	std	Z+9, r25	; 0x09
    247e:	80 87       	std	Z+8, r24	; 0x08
    2480:	12 86       	std	Z+10, r1	; 0x0a
    2482:	13 86       	std	Z+11, r1	; 0x0b
    2484:	14 86       	std	Z+12, r1	; 0x0c
    2486:	15 86       	std	Z+13, r1	; 0x0d
      _stride_type stride;

    MultiArrayDimension():
      label(""),
      size(0),
      stride(0)
    2488:	8d e0       	ldi	r24, 0x0D	; 13
    248a:	94 e0       	ldi	r25, 0x04	; 4
    248c:	97 87       	std	Z+15, r25	; 0x0f
    248e:	86 87       	std	Z+14, r24	; 0x0e
    2490:	83 ed       	ldi	r24, 0xD3	; 211
    2492:	93 e0       	ldi	r25, 0x03	; 3
    2494:	91 8b       	std	Z+17, r25	; 0x11
    2496:	80 8b       	std	Z+16, r24	; 0x10
    2498:	12 8a       	std	Z+18, r1	; 0x12
    249a:	13 8a       	std	Z+19, r1	; 0x13
    249c:	14 8a       	std	Z+20, r1	; 0x14
    249e:	15 8a       	std	Z+21, r1	; 0x15
    24a0:	16 8a       	std	Z+22, r1	; 0x16
    24a2:	17 8a       	std	Z+23, r1	; 0x17
    24a4:	10 8e       	std	Z+24, r1	; 0x18
    24a6:	11 8e       	std	Z+25, r1	; 0x19
    24a8:	13 8e       	std	Z+27, r1	; 0x1b
    24aa:	12 8e       	std	Z+26, r1	; 0x1a
    24ac:	14 8e       	std	Z+28, r1	; 0x1c
    24ae:	15 8e       	std	Z+29, r1	; 0x1d
    24b0:	16 8e       	std	Z+30, r1	; 0x1e
    24b2:	17 8e       	std	Z+31, r1	; 0x1f
    24b4:	10 a2       	std	Z+32, r1	; 0x20
    24b6:	11 a2       	std	Z+33, r1	; 0x21
    24b8:	12 a2       	std	Z+34, r1	; 0x22
    24ba:	13 a2       	std	Z+35, r1	; 0x23
    24bc:	14 a2       	std	Z+36, r1	; 0x24
    24be:	15 a2       	std	Z+37, r1	; 0x25
    24c0:	16 a2       	std	Z+38, r1	; 0x26
    24c2:	17 a2       	std	Z+39, r1	; 0x27
    24c4:	11 a6       	std	Z+41, r1	; 0x29
    24c6:	10 a6       	std	Z+40, r1	; 0x28
    24c8:	88 e6       	ldi	r24, 0x68	; 104
    24ca:	92 e0       	ldi	r25, 0x02	; 2
    24cc:	93 a7       	std	Z+43, r25	; 0x2b
    24ce:	82 a7       	std	Z+42, r24	; 0x2a
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	95 a7       	std	Z+45, r25	; 0x2d
    24d6:	84 a7       	std	Z+44, r24	; 0x2c
  {
    topic_ = topic_name;
    24d8:	84 ed       	ldi	r24, 0xD4	; 212
    24da:	93 e0       	ldi	r25, 0x03	; 3
    24dc:	95 83       	std	Z+5, r25	; 0x05
    24de:	84 83       	std	Z+4, r24	; 0x04
    24e0:	08 95       	ret

000024e2 <__subsf3>:
    24e2:	50 58       	subi	r21, 0x80	; 128

000024e4 <__addsf3>:
    24e4:	bb 27       	eor	r27, r27
    24e6:	aa 27       	eor	r26, r26
    24e8:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3x>
    24ec:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_round>
    24f0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fp_pscA>
    24f4:	38 f0       	brcs	.+14     	; 0x2504 <__addsf3+0x20>
    24f6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__fp_pscB>
    24fa:	20 f0       	brcs	.+8      	; 0x2504 <__addsf3+0x20>
    24fc:	39 f4       	brne	.+14     	; 0x250c <__addsf3+0x28>
    24fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2500:	19 f4       	brne	.+6      	; 0x2508 <__addsf3+0x24>
    2502:	26 f4       	brtc	.+8      	; 0x250c <__addsf3+0x28>
    2504:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__fp_nan>
    2508:	0e f4       	brtc	.+2      	; 0x250c <__addsf3+0x28>
    250a:	e0 95       	com	r30
    250c:	e7 fb       	bst	r30, 7
    250e:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__fp_inf>

00002512 <__addsf3x>:
    2512:	e9 2f       	mov	r30, r25
    2514:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__fp_split3>
    2518:	58 f3       	brcs	.-42     	; 0x24f0 <__addsf3+0xc>
    251a:	ba 17       	cp	r27, r26
    251c:	62 07       	cpc	r22, r18
    251e:	73 07       	cpc	r23, r19
    2520:	84 07       	cpc	r24, r20
    2522:	95 07       	cpc	r25, r21
    2524:	20 f0       	brcs	.+8      	; 0x252e <__addsf3x+0x1c>
    2526:	79 f4       	brne	.+30     	; 0x2546 <__addsf3x+0x34>
    2528:	a6 f5       	brtc	.+104    	; 0x2592 <__addsf3x+0x80>
    252a:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__fp_zero>
    252e:	0e f4       	brtc	.+2      	; 0x2532 <__addsf3x+0x20>
    2530:	e0 95       	com	r30
    2532:	0b 2e       	mov	r0, r27
    2534:	ba 2f       	mov	r27, r26
    2536:	a0 2d       	mov	r26, r0
    2538:	0b 01       	movw	r0, r22
    253a:	b9 01       	movw	r22, r18
    253c:	90 01       	movw	r18, r0
    253e:	0c 01       	movw	r0, r24
    2540:	ca 01       	movw	r24, r20
    2542:	a0 01       	movw	r20, r0
    2544:	11 24       	eor	r1, r1
    2546:	ff 27       	eor	r31, r31
    2548:	59 1b       	sub	r21, r25
    254a:	99 f0       	breq	.+38     	; 0x2572 <__addsf3x+0x60>
    254c:	59 3f       	cpi	r21, 0xF9	; 249
    254e:	50 f4       	brcc	.+20     	; 0x2564 <__addsf3x+0x52>
    2550:	50 3e       	cpi	r21, 0xE0	; 224
    2552:	68 f1       	brcs	.+90     	; 0x25ae <__addsf3x+0x9c>
    2554:	1a 16       	cp	r1, r26
    2556:	f0 40       	sbci	r31, 0x00	; 0
    2558:	a2 2f       	mov	r26, r18
    255a:	23 2f       	mov	r18, r19
    255c:	34 2f       	mov	r19, r20
    255e:	44 27       	eor	r20, r20
    2560:	58 5f       	subi	r21, 0xF8	; 248
    2562:	f3 cf       	rjmp	.-26     	; 0x254a <__addsf3x+0x38>
    2564:	46 95       	lsr	r20
    2566:	37 95       	ror	r19
    2568:	27 95       	ror	r18
    256a:	a7 95       	ror	r26
    256c:	f0 40       	sbci	r31, 0x00	; 0
    256e:	53 95       	inc	r21
    2570:	c9 f7       	brne	.-14     	; 0x2564 <__addsf3x+0x52>
    2572:	7e f4       	brtc	.+30     	; 0x2592 <__addsf3x+0x80>
    2574:	1f 16       	cp	r1, r31
    2576:	ba 0b       	sbc	r27, r26
    2578:	62 0b       	sbc	r22, r18
    257a:	73 0b       	sbc	r23, r19
    257c:	84 0b       	sbc	r24, r20
    257e:	ba f0       	brmi	.+46     	; 0x25ae <__addsf3x+0x9c>
    2580:	91 50       	subi	r25, 0x01	; 1
    2582:	a1 f0       	breq	.+40     	; 0x25ac <__addsf3x+0x9a>
    2584:	ff 0f       	add	r31, r31
    2586:	bb 1f       	adc	r27, r27
    2588:	66 1f       	adc	r22, r22
    258a:	77 1f       	adc	r23, r23
    258c:	88 1f       	adc	r24, r24
    258e:	c2 f7       	brpl	.-16     	; 0x2580 <__addsf3x+0x6e>
    2590:	0e c0       	rjmp	.+28     	; 0x25ae <__addsf3x+0x9c>
    2592:	ba 0f       	add	r27, r26
    2594:	62 1f       	adc	r22, r18
    2596:	73 1f       	adc	r23, r19
    2598:	84 1f       	adc	r24, r20
    259a:	48 f4       	brcc	.+18     	; 0x25ae <__addsf3x+0x9c>
    259c:	87 95       	ror	r24
    259e:	77 95       	ror	r23
    25a0:	67 95       	ror	r22
    25a2:	b7 95       	ror	r27
    25a4:	f7 95       	ror	r31
    25a6:	9e 3f       	cpi	r25, 0xFE	; 254
    25a8:	08 f0       	brcs	.+2      	; 0x25ac <__addsf3x+0x9a>
    25aa:	b0 cf       	rjmp	.-160    	; 0x250c <__addsf3+0x28>
    25ac:	93 95       	inc	r25
    25ae:	88 0f       	add	r24, r24
    25b0:	08 f0       	brcs	.+2      	; 0x25b4 <__addsf3x+0xa2>
    25b2:	99 27       	eor	r25, r25
    25b4:	ee 0f       	add	r30, r30
    25b6:	97 95       	ror	r25
    25b8:	87 95       	ror	r24
    25ba:	08 95       	ret

000025bc <__fixsfsi>:
    25bc:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__fixunssfsi>
    25c0:	68 94       	set
    25c2:	b1 11       	cpse	r27, r1
    25c4:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__fp_szero>
    25c8:	08 95       	ret

000025ca <__fixunssfsi>:
    25ca:	0e 94 81 13 	call	0x2702	; 0x2702 <__fp_splitA>
    25ce:	88 f0       	brcs	.+34     	; 0x25f2 <__fixunssfsi+0x28>
    25d0:	9f 57       	subi	r25, 0x7F	; 127
    25d2:	98 f0       	brcs	.+38     	; 0x25fa <__fixunssfsi+0x30>
    25d4:	b9 2f       	mov	r27, r25
    25d6:	99 27       	eor	r25, r25
    25d8:	b7 51       	subi	r27, 0x17	; 23
    25da:	b0 f0       	brcs	.+44     	; 0x2608 <__fixunssfsi+0x3e>
    25dc:	e1 f0       	breq	.+56     	; 0x2616 <__fixunssfsi+0x4c>
    25de:	66 0f       	add	r22, r22
    25e0:	77 1f       	adc	r23, r23
    25e2:	88 1f       	adc	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	1a f0       	brmi	.+6      	; 0x25ee <__fixunssfsi+0x24>
    25e8:	ba 95       	dec	r27
    25ea:	c9 f7       	brne	.-14     	; 0x25de <__fixunssfsi+0x14>
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <__fixunssfsi+0x4c>
    25ee:	b1 30       	cpi	r27, 0x01	; 1
    25f0:	91 f0       	breq	.+36     	; 0x2616 <__fixunssfsi+0x4c>
    25f2:	0e 94 9b 13 	call	0x2736	; 0x2736 <__fp_zero>
    25f6:	b1 e0       	ldi	r27, 0x01	; 1
    25f8:	08 95       	ret
    25fa:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__fp_zero>
    25fe:	67 2f       	mov	r22, r23
    2600:	78 2f       	mov	r23, r24
    2602:	88 27       	eor	r24, r24
    2604:	b8 5f       	subi	r27, 0xF8	; 248
    2606:	39 f0       	breq	.+14     	; 0x2616 <__fixunssfsi+0x4c>
    2608:	b9 3f       	cpi	r27, 0xF9	; 249
    260a:	cc f3       	brlt	.-14     	; 0x25fe <__fixunssfsi+0x34>
    260c:	86 95       	lsr	r24
    260e:	77 95       	ror	r23
    2610:	67 95       	ror	r22
    2612:	b3 95       	inc	r27
    2614:	d9 f7       	brne	.-10     	; 0x260c <__fixunssfsi+0x42>
    2616:	3e f4       	brtc	.+14     	; 0x2626 <__fixunssfsi+0x5c>
    2618:	90 95       	com	r25
    261a:	80 95       	com	r24
    261c:	70 95       	com	r23
    261e:	61 95       	neg	r22
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	8f 4f       	sbci	r24, 0xFF	; 255
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	08 95       	ret

00002628 <__floatunsisf>:
    2628:	e8 94       	clt
    262a:	09 c0       	rjmp	.+18     	; 0x263e <__floatsisf+0x12>

0000262c <__floatsisf>:
    262c:	97 fb       	bst	r25, 7
    262e:	3e f4       	brtc	.+14     	; 0x263e <__floatsisf+0x12>
    2630:	90 95       	com	r25
    2632:	80 95       	com	r24
    2634:	70 95       	com	r23
    2636:	61 95       	neg	r22
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	8f 4f       	sbci	r24, 0xFF	; 255
    263c:	9f 4f       	sbci	r25, 0xFF	; 255
    263e:	99 23       	and	r25, r25
    2640:	a9 f0       	breq	.+42     	; 0x266c <__floatsisf+0x40>
    2642:	f9 2f       	mov	r31, r25
    2644:	96 e9       	ldi	r25, 0x96	; 150
    2646:	bb 27       	eor	r27, r27
    2648:	93 95       	inc	r25
    264a:	f6 95       	lsr	r31
    264c:	87 95       	ror	r24
    264e:	77 95       	ror	r23
    2650:	67 95       	ror	r22
    2652:	b7 95       	ror	r27
    2654:	f1 11       	cpse	r31, r1
    2656:	f8 cf       	rjmp	.-16     	; 0x2648 <__floatsisf+0x1c>
    2658:	fa f4       	brpl	.+62     	; 0x2698 <__floatsisf+0x6c>
    265a:	bb 0f       	add	r27, r27
    265c:	11 f4       	brne	.+4      	; 0x2662 <__floatsisf+0x36>
    265e:	60 ff       	sbrs	r22, 0
    2660:	1b c0       	rjmp	.+54     	; 0x2698 <__floatsisf+0x6c>
    2662:	6f 5f       	subi	r22, 0xFF	; 255
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	8f 4f       	sbci	r24, 0xFF	; 255
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	16 c0       	rjmp	.+44     	; 0x2698 <__floatsisf+0x6c>
    266c:	88 23       	and	r24, r24
    266e:	11 f0       	breq	.+4      	; 0x2674 <__floatsisf+0x48>
    2670:	96 e9       	ldi	r25, 0x96	; 150
    2672:	11 c0       	rjmp	.+34     	; 0x2696 <__floatsisf+0x6a>
    2674:	77 23       	and	r23, r23
    2676:	21 f0       	breq	.+8      	; 0x2680 <__floatsisf+0x54>
    2678:	9e e8       	ldi	r25, 0x8E	; 142
    267a:	87 2f       	mov	r24, r23
    267c:	76 2f       	mov	r23, r22
    267e:	05 c0       	rjmp	.+10     	; 0x268a <__floatsisf+0x5e>
    2680:	66 23       	and	r22, r22
    2682:	71 f0       	breq	.+28     	; 0x26a0 <__floatsisf+0x74>
    2684:	96 e8       	ldi	r25, 0x86	; 134
    2686:	86 2f       	mov	r24, r22
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	2a f0       	brmi	.+10     	; 0x2698 <__floatsisf+0x6c>
    268e:	9a 95       	dec	r25
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	da f7       	brpl	.-10     	; 0x268e <__floatsisf+0x62>
    2698:	88 0f       	add	r24, r24
    269a:	96 95       	lsr	r25
    269c:	87 95       	ror	r24
    269e:	97 f9       	bld	r25, 7
    26a0:	08 95       	ret

000026a2 <__fp_inf>:
    26a2:	97 f9       	bld	r25, 7
    26a4:	9f 67       	ori	r25, 0x7F	; 127
    26a6:	80 e8       	ldi	r24, 0x80	; 128
    26a8:	70 e0       	ldi	r23, 0x00	; 0
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	08 95       	ret

000026ae <__fp_nan>:
    26ae:	9f ef       	ldi	r25, 0xFF	; 255
    26b0:	80 ec       	ldi	r24, 0xC0	; 192
    26b2:	08 95       	ret

000026b4 <__fp_pscA>:
    26b4:	00 24       	eor	r0, r0
    26b6:	0a 94       	dec	r0
    26b8:	16 16       	cp	r1, r22
    26ba:	17 06       	cpc	r1, r23
    26bc:	18 06       	cpc	r1, r24
    26be:	09 06       	cpc	r0, r25
    26c0:	08 95       	ret

000026c2 <__fp_pscB>:
    26c2:	00 24       	eor	r0, r0
    26c4:	0a 94       	dec	r0
    26c6:	12 16       	cp	r1, r18
    26c8:	13 06       	cpc	r1, r19
    26ca:	14 06       	cpc	r1, r20
    26cc:	05 06       	cpc	r0, r21
    26ce:	08 95       	ret

000026d0 <__fp_round>:
    26d0:	09 2e       	mov	r0, r25
    26d2:	03 94       	inc	r0
    26d4:	00 0c       	add	r0, r0
    26d6:	11 f4       	brne	.+4      	; 0x26dc <__fp_round+0xc>
    26d8:	88 23       	and	r24, r24
    26da:	52 f0       	brmi	.+20     	; 0x26f0 <__fp_round+0x20>
    26dc:	bb 0f       	add	r27, r27
    26de:	40 f4       	brcc	.+16     	; 0x26f0 <__fp_round+0x20>
    26e0:	bf 2b       	or	r27, r31
    26e2:	11 f4       	brne	.+4      	; 0x26e8 <__fp_round+0x18>
    26e4:	60 ff       	sbrs	r22, 0
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <__fp_round+0x20>
    26e8:	6f 5f       	subi	r22, 0xFF	; 255
    26ea:	7f 4f       	sbci	r23, 0xFF	; 255
    26ec:	8f 4f       	sbci	r24, 0xFF	; 255
    26ee:	9f 4f       	sbci	r25, 0xFF	; 255
    26f0:	08 95       	ret

000026f2 <__fp_split3>:
    26f2:	57 fd       	sbrc	r21, 7
    26f4:	90 58       	subi	r25, 0x80	; 128
    26f6:	44 0f       	add	r20, r20
    26f8:	55 1f       	adc	r21, r21
    26fa:	59 f0       	breq	.+22     	; 0x2712 <__fp_splitA+0x10>
    26fc:	5f 3f       	cpi	r21, 0xFF	; 255
    26fe:	71 f0       	breq	.+28     	; 0x271c <__fp_splitA+0x1a>
    2700:	47 95       	ror	r20

00002702 <__fp_splitA>:
    2702:	88 0f       	add	r24, r24
    2704:	97 fb       	bst	r25, 7
    2706:	99 1f       	adc	r25, r25
    2708:	61 f0       	breq	.+24     	; 0x2722 <__fp_splitA+0x20>
    270a:	9f 3f       	cpi	r25, 0xFF	; 255
    270c:	79 f0       	breq	.+30     	; 0x272c <__fp_splitA+0x2a>
    270e:	87 95       	ror	r24
    2710:	08 95       	ret
    2712:	12 16       	cp	r1, r18
    2714:	13 06       	cpc	r1, r19
    2716:	14 06       	cpc	r1, r20
    2718:	55 1f       	adc	r21, r21
    271a:	f2 cf       	rjmp	.-28     	; 0x2700 <__fp_split3+0xe>
    271c:	46 95       	lsr	r20
    271e:	f1 df       	rcall	.-30     	; 0x2702 <__fp_splitA>
    2720:	08 c0       	rjmp	.+16     	; 0x2732 <__fp_splitA+0x30>
    2722:	16 16       	cp	r1, r22
    2724:	17 06       	cpc	r1, r23
    2726:	18 06       	cpc	r1, r24
    2728:	99 1f       	adc	r25, r25
    272a:	f1 cf       	rjmp	.-30     	; 0x270e <__fp_splitA+0xc>
    272c:	86 95       	lsr	r24
    272e:	71 05       	cpc	r23, r1
    2730:	61 05       	cpc	r22, r1
    2732:	08 94       	sec
    2734:	08 95       	ret

00002736 <__fp_zero>:
    2736:	e8 94       	clt

00002738 <__fp_szero>:
    2738:	bb 27       	eor	r27, r27
    273a:	66 27       	eor	r22, r22
    273c:	77 27       	eor	r23, r23
    273e:	cb 01       	movw	r24, r22
    2740:	97 f9       	bld	r25, 7
    2742:	08 95       	ret

00002744 <__mulsf3>:
    2744:	0e 94 b5 13 	call	0x276a	; 0x276a <__mulsf3x>
    2748:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_round>
    274c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fp_pscA>
    2750:	38 f0       	brcs	.+14     	; 0x2760 <__mulsf3+0x1c>
    2752:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__fp_pscB>
    2756:	20 f0       	brcs	.+8      	; 0x2760 <__mulsf3+0x1c>
    2758:	95 23       	and	r25, r21
    275a:	11 f0       	breq	.+4      	; 0x2760 <__mulsf3+0x1c>
    275c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__fp_inf>
    2760:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__fp_nan>
    2764:	11 24       	eor	r1, r1
    2766:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__fp_szero>

0000276a <__mulsf3x>:
    276a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__fp_split3>
    276e:	70 f3       	brcs	.-36     	; 0x274c <__mulsf3+0x8>

00002770 <__mulsf3_pse>:
    2770:	95 9f       	mul	r25, r21
    2772:	c1 f3       	breq	.-16     	; 0x2764 <__mulsf3+0x20>
    2774:	95 0f       	add	r25, r21
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	55 1f       	adc	r21, r21
    277a:	62 9f       	mul	r22, r18
    277c:	f0 01       	movw	r30, r0
    277e:	72 9f       	mul	r23, r18
    2780:	bb 27       	eor	r27, r27
    2782:	f0 0d       	add	r31, r0
    2784:	b1 1d       	adc	r27, r1
    2786:	63 9f       	mul	r22, r19
    2788:	aa 27       	eor	r26, r26
    278a:	f0 0d       	add	r31, r0
    278c:	b1 1d       	adc	r27, r1
    278e:	aa 1f       	adc	r26, r26
    2790:	64 9f       	mul	r22, r20
    2792:	66 27       	eor	r22, r22
    2794:	b0 0d       	add	r27, r0
    2796:	a1 1d       	adc	r26, r1
    2798:	66 1f       	adc	r22, r22
    279a:	82 9f       	mul	r24, r18
    279c:	22 27       	eor	r18, r18
    279e:	b0 0d       	add	r27, r0
    27a0:	a1 1d       	adc	r26, r1
    27a2:	62 1f       	adc	r22, r18
    27a4:	73 9f       	mul	r23, r19
    27a6:	b0 0d       	add	r27, r0
    27a8:	a1 1d       	adc	r26, r1
    27aa:	62 1f       	adc	r22, r18
    27ac:	83 9f       	mul	r24, r19
    27ae:	a0 0d       	add	r26, r0
    27b0:	61 1d       	adc	r22, r1
    27b2:	22 1f       	adc	r18, r18
    27b4:	74 9f       	mul	r23, r20
    27b6:	33 27       	eor	r19, r19
    27b8:	a0 0d       	add	r26, r0
    27ba:	61 1d       	adc	r22, r1
    27bc:	23 1f       	adc	r18, r19
    27be:	84 9f       	mul	r24, r20
    27c0:	60 0d       	add	r22, r0
    27c2:	21 1d       	adc	r18, r1
    27c4:	82 2f       	mov	r24, r18
    27c6:	76 2f       	mov	r23, r22
    27c8:	6a 2f       	mov	r22, r26
    27ca:	11 24       	eor	r1, r1
    27cc:	9f 57       	subi	r25, 0x7F	; 127
    27ce:	50 40       	sbci	r21, 0x00	; 0
    27d0:	9a f0       	brmi	.+38     	; 0x27f8 <__mulsf3_pse+0x88>
    27d2:	f1 f0       	breq	.+60     	; 0x2810 <__mulsf3_pse+0xa0>
    27d4:	88 23       	and	r24, r24
    27d6:	4a f0       	brmi	.+18     	; 0x27ea <__mulsf3_pse+0x7a>
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	bb 1f       	adc	r27, r27
    27de:	66 1f       	adc	r22, r22
    27e0:	77 1f       	adc	r23, r23
    27e2:	88 1f       	adc	r24, r24
    27e4:	91 50       	subi	r25, 0x01	; 1
    27e6:	50 40       	sbci	r21, 0x00	; 0
    27e8:	a9 f7       	brne	.-22     	; 0x27d4 <__mulsf3_pse+0x64>
    27ea:	9e 3f       	cpi	r25, 0xFE	; 254
    27ec:	51 05       	cpc	r21, r1
    27ee:	80 f0       	brcs	.+32     	; 0x2810 <__mulsf3_pse+0xa0>
    27f0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__fp_inf>
    27f4:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__fp_szero>
    27f8:	5f 3f       	cpi	r21, 0xFF	; 255
    27fa:	e4 f3       	brlt	.-8      	; 0x27f4 <__mulsf3_pse+0x84>
    27fc:	98 3e       	cpi	r25, 0xE8	; 232
    27fe:	d4 f3       	brlt	.-12     	; 0x27f4 <__mulsf3_pse+0x84>
    2800:	86 95       	lsr	r24
    2802:	77 95       	ror	r23
    2804:	67 95       	ror	r22
    2806:	b7 95       	ror	r27
    2808:	f7 95       	ror	r31
    280a:	e7 95       	ror	r30
    280c:	9f 5f       	subi	r25, 0xFF	; 255
    280e:	c1 f7       	brne	.-16     	; 0x2800 <__mulsf3_pse+0x90>
    2810:	fe 2b       	or	r31, r30
    2812:	88 0f       	add	r24, r24
    2814:	91 1d       	adc	r25, r1
    2816:	96 95       	lsr	r25
    2818:	87 95       	ror	r24
    281a:	97 f9       	bld	r25, 7
    281c:	08 95       	ret

0000281e <__mulsi3>:
    281e:	db 01       	movw	r26, r22
    2820:	8f 93       	push	r24
    2822:	9f 93       	push	r25
    2824:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__muluhisi3>
    2828:	bf 91       	pop	r27
    282a:	af 91       	pop	r26
    282c:	a2 9f       	mul	r26, r18
    282e:	80 0d       	add	r24, r0
    2830:	91 1d       	adc	r25, r1
    2832:	a3 9f       	mul	r26, r19
    2834:	90 0d       	add	r25, r0
    2836:	b2 9f       	mul	r27, r18
    2838:	90 0d       	add	r25, r0
    283a:	11 24       	eor	r1, r1
    283c:	08 95       	ret

0000283e <__divmodhi4>:
    283e:	97 fb       	bst	r25, 7
    2840:	07 2e       	mov	r0, r23
    2842:	16 f4       	brtc	.+4      	; 0x2848 <__divmodhi4+0xa>
    2844:	00 94       	com	r0
    2846:	07 d0       	rcall	.+14     	; 0x2856 <__divmodhi4_neg1>
    2848:	77 fd       	sbrc	r23, 7
    284a:	09 d0       	rcall	.+18     	; 0x285e <__divmodhi4_neg2>
    284c:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__udivmodhi4>
    2850:	07 fc       	sbrc	r0, 7
    2852:	05 d0       	rcall	.+10     	; 0x285e <__divmodhi4_neg2>
    2854:	3e f4       	brtc	.+14     	; 0x2864 <__divmodhi4_exit>

00002856 <__divmodhi4_neg1>:
    2856:	90 95       	com	r25
    2858:	81 95       	neg	r24
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	08 95       	ret

0000285e <__divmodhi4_neg2>:
    285e:	70 95       	com	r23
    2860:	61 95       	neg	r22
    2862:	7f 4f       	sbci	r23, 0xFF	; 255

00002864 <__divmodhi4_exit>:
    2864:	08 95       	ret

00002866 <__udivmodsi4>:
    2866:	a1 e2       	ldi	r26, 0x21	; 33
    2868:	1a 2e       	mov	r1, r26
    286a:	aa 1b       	sub	r26, r26
    286c:	bb 1b       	sub	r27, r27
    286e:	fd 01       	movw	r30, r26
    2870:	0d c0       	rjmp	.+26     	; 0x288c <__udivmodsi4_ep>

00002872 <__udivmodsi4_loop>:
    2872:	aa 1f       	adc	r26, r26
    2874:	bb 1f       	adc	r27, r27
    2876:	ee 1f       	adc	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	a2 17       	cp	r26, r18
    287c:	b3 07       	cpc	r27, r19
    287e:	e4 07       	cpc	r30, r20
    2880:	f5 07       	cpc	r31, r21
    2882:	20 f0       	brcs	.+8      	; 0x288c <__udivmodsi4_ep>
    2884:	a2 1b       	sub	r26, r18
    2886:	b3 0b       	sbc	r27, r19
    2888:	e4 0b       	sbc	r30, r20
    288a:	f5 0b       	sbc	r31, r21

0000288c <__udivmodsi4_ep>:
    288c:	66 1f       	adc	r22, r22
    288e:	77 1f       	adc	r23, r23
    2890:	88 1f       	adc	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	1a 94       	dec	r1
    2896:	69 f7       	brne	.-38     	; 0x2872 <__udivmodsi4_loop>
    2898:	60 95       	com	r22
    289a:	70 95       	com	r23
    289c:	80 95       	com	r24
    289e:	90 95       	com	r25
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	bd 01       	movw	r22, r26
    28a6:	cf 01       	movw	r24, r30
    28a8:	08 95       	ret

000028aa <__divmodsi4>:
    28aa:	05 2e       	mov	r0, r21
    28ac:	97 fb       	bst	r25, 7
    28ae:	1e f4       	brtc	.+6      	; 0x28b6 <__divmodsi4+0xc>
    28b0:	00 94       	com	r0
    28b2:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__negsi2>
    28b6:	57 fd       	sbrc	r21, 7
    28b8:	07 d0       	rcall	.+14     	; 0x28c8 <__divmodsi4_neg2>
    28ba:	0e 94 33 14 	call	0x2866	; 0x2866 <__udivmodsi4>
    28be:	07 fc       	sbrc	r0, 7
    28c0:	03 d0       	rcall	.+6      	; 0x28c8 <__divmodsi4_neg2>
    28c2:	4e f4       	brtc	.+18     	; 0x28d6 <__divmodsi4_exit>
    28c4:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__negsi2>

000028c8 <__divmodsi4_neg2>:
    28c8:	50 95       	com	r21
    28ca:	40 95       	com	r20
    28cc:	30 95       	com	r19
    28ce:	21 95       	neg	r18
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	4f 4f       	sbci	r20, 0xFF	; 255
    28d4:	5f 4f       	sbci	r21, 0xFF	; 255

000028d6 <__divmodsi4_exit>:
    28d6:	08 95       	ret

000028d8 <__negsi2>:
    28d8:	90 95       	com	r25
    28da:	80 95       	com	r24
    28dc:	70 95       	com	r23
    28de:	61 95       	neg	r22
    28e0:	7f 4f       	sbci	r23, 0xFF	; 255
    28e2:	8f 4f       	sbci	r24, 0xFF	; 255
    28e4:	9f 4f       	sbci	r25, 0xFF	; 255
    28e6:	08 95       	ret

000028e8 <__muluhisi3>:
    28e8:	0e 94 9b 14 	call	0x2936	; 0x2936 <__umulhisi3>
    28ec:	a5 9f       	mul	r26, r21
    28ee:	90 0d       	add	r25, r0
    28f0:	b4 9f       	mul	r27, r20
    28f2:	90 0d       	add	r25, r0
    28f4:	a4 9f       	mul	r26, r20
    28f6:	80 0d       	add	r24, r0
    28f8:	91 1d       	adc	r25, r1
    28fa:	11 24       	eor	r1, r1
    28fc:	08 95       	ret

000028fe <__udivmodhi4>:
    28fe:	aa 1b       	sub	r26, r26
    2900:	bb 1b       	sub	r27, r27
    2902:	51 e1       	ldi	r21, 0x11	; 17
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <__udivmodhi4_ep>

00002906 <__udivmodhi4_loop>:
    2906:	aa 1f       	adc	r26, r26
    2908:	bb 1f       	adc	r27, r27
    290a:	a6 17       	cp	r26, r22
    290c:	b7 07       	cpc	r27, r23
    290e:	10 f0       	brcs	.+4      	; 0x2914 <__udivmodhi4_ep>
    2910:	a6 1b       	sub	r26, r22
    2912:	b7 0b       	sbc	r27, r23

00002914 <__udivmodhi4_ep>:
    2914:	88 1f       	adc	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	5a 95       	dec	r21
    291a:	a9 f7       	brne	.-22     	; 0x2906 <__udivmodhi4_loop>
    291c:	80 95       	com	r24
    291e:	90 95       	com	r25
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	08 95       	ret

00002926 <__tablejump2__>:
    2926:	ee 0f       	add	r30, r30
    2928:	ff 1f       	adc	r31, r31
    292a:	88 1f       	adc	r24, r24
    292c:	8b bf       	out	0x3b, r24	; 59
    292e:	07 90       	elpm	r0, Z+
    2930:	f6 91       	elpm	r31, Z
    2932:	e0 2d       	mov	r30, r0
    2934:	19 94       	eijmp

00002936 <__umulhisi3>:
    2936:	a2 9f       	mul	r26, r18
    2938:	b0 01       	movw	r22, r0
    293a:	b3 9f       	mul	r27, r19
    293c:	c0 01       	movw	r24, r0
    293e:	a3 9f       	mul	r26, r19
    2940:	70 0d       	add	r23, r0
    2942:	81 1d       	adc	r24, r1
    2944:	11 24       	eor	r1, r1
    2946:	91 1d       	adc	r25, r1
    2948:	b2 9f       	mul	r27, r18
    294a:	70 0d       	add	r23, r0
    294c:	81 1d       	adc	r24, r1
    294e:	11 24       	eor	r1, r1
    2950:	91 1d       	adc	r25, r1
    2952:	08 95       	ret

00002954 <realloc>:
    2954:	6f 92       	push	r6
    2956:	7f 92       	push	r7
    2958:	8f 92       	push	r8
    295a:	9f 92       	push	r9
    295c:	af 92       	push	r10
    295e:	bf 92       	push	r11
    2960:	cf 92       	push	r12
    2962:	df 92       	push	r13
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	89 f4       	brne	.+34     	; 0x2996 <realloc+0x42>
    2974:	cb 01       	movw	r24, r22
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	7f 90       	pop	r7
    2990:	6f 90       	pop	r6
    2992:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <malloc>
    2996:	fc 01       	movw	r30, r24
    2998:	e6 0f       	add	r30, r22
    299a:	f7 1f       	adc	r31, r23
    299c:	9c 01       	movw	r18, r24
    299e:	22 50       	subi	r18, 0x02	; 2
    29a0:	31 09       	sbc	r19, r1
    29a2:	e2 17       	cp	r30, r18
    29a4:	f3 07       	cpc	r31, r19
    29a6:	08 f4       	brcc	.+2      	; 0x29aa <realloc+0x56>
    29a8:	a9 c0       	rjmp	.+338    	; 0x2afc <realloc+0x1a8>
    29aa:	ec 01       	movw	r28, r24
    29ac:	d9 01       	movw	r26, r18
    29ae:	0d 91       	ld	r16, X+
    29b0:	1c 91       	ld	r17, X
    29b2:	11 97       	sbiw	r26, 0x01	; 1
    29b4:	06 17       	cp	r16, r22
    29b6:	17 07       	cpc	r17, r23
    29b8:	b0 f0       	brcs	.+44     	; 0x29e6 <realloc+0x92>
    29ba:	05 30       	cpi	r16, 0x05	; 5
    29bc:	11 05       	cpc	r17, r1
    29be:	08 f4       	brcc	.+2      	; 0x29c2 <realloc+0x6e>
    29c0:	9b c0       	rjmp	.+310    	; 0x2af8 <realloc+0x1a4>
    29c2:	c8 01       	movw	r24, r16
    29c4:	04 97       	sbiw	r24, 0x04	; 4
    29c6:	86 17       	cp	r24, r22
    29c8:	97 07       	cpc	r25, r23
    29ca:	08 f4       	brcc	.+2      	; 0x29ce <realloc+0x7a>
    29cc:	95 c0       	rjmp	.+298    	; 0x2af8 <realloc+0x1a4>
    29ce:	02 50       	subi	r16, 0x02	; 2
    29d0:	11 09       	sbc	r17, r1
    29d2:	06 1b       	sub	r16, r22
    29d4:	17 0b       	sbc	r17, r23
    29d6:	01 93       	st	Z+, r16
    29d8:	11 93       	st	Z+, r17
    29da:	6d 93       	st	X+, r22
    29dc:	7c 93       	st	X, r23
    29de:	cf 01       	movw	r24, r30
    29e0:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
    29e4:	89 c0       	rjmp	.+274    	; 0x2af8 <realloc+0x1a4>
    29e6:	5b 01       	movw	r10, r22
    29e8:	a0 1a       	sub	r10, r16
    29ea:	b1 0a       	sbc	r11, r17
    29ec:	4c 01       	movw	r8, r24
    29ee:	80 0e       	add	r8, r16
    29f0:	91 1e       	adc	r9, r17
    29f2:	a0 91 3d 09 	lds	r26, 0x093D	; 0x80093d <__flp>
    29f6:	b0 91 3e 09 	lds	r27, 0x093E	; 0x80093e <__flp+0x1>
    29fa:	61 2c       	mov	r6, r1
    29fc:	71 2c       	mov	r7, r1
    29fe:	e1 2c       	mov	r14, r1
    2a00:	f1 2c       	mov	r15, r1
    2a02:	10 97       	sbiw	r26, 0x00	; 0
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <realloc+0xb4>
    2a06:	46 c0       	rjmp	.+140    	; 0x2a94 <realloc+0x140>
    2a08:	8d 91       	ld	r24, X+
    2a0a:	9c 91       	ld	r25, X
    2a0c:	11 97       	sbiw	r26, 0x01	; 1
    2a0e:	a8 15       	cp	r26, r8
    2a10:	b9 05       	cpc	r27, r9
    2a12:	b1 f5       	brne	.+108    	; 0x2a80 <realloc+0x12c>
    2a14:	6c 01       	movw	r12, r24
    2a16:	42 e0       	ldi	r20, 0x02	; 2
    2a18:	c4 0e       	add	r12, r20
    2a1a:	d1 1c       	adc	r13, r1
    2a1c:	ca 14       	cp	r12, r10
    2a1e:	db 04       	cpc	r13, r11
    2a20:	78 f1       	brcs	.+94     	; 0x2a80 <realloc+0x12c>
    2a22:	4c 01       	movw	r8, r24
    2a24:	8a 18       	sub	r8, r10
    2a26:	9b 08       	sbc	r9, r11
    2a28:	64 01       	movw	r12, r8
    2a2a:	42 e0       	ldi	r20, 0x02	; 2
    2a2c:	c4 0e       	add	r12, r20
    2a2e:	d1 1c       	adc	r13, r1
    2a30:	12 96       	adiw	r26, 0x02	; 2
    2a32:	bc 90       	ld	r11, X
    2a34:	12 97       	sbiw	r26, 0x02	; 2
    2a36:	13 96       	adiw	r26, 0x03	; 3
    2a38:	ac 91       	ld	r26, X
    2a3a:	b5 e0       	ldi	r27, 0x05	; 5
    2a3c:	cb 16       	cp	r12, r27
    2a3e:	d1 04       	cpc	r13, r1
    2a40:	40 f0       	brcs	.+16     	; 0x2a52 <realloc+0xfe>
    2a42:	b2 82       	std	Z+2, r11	; 0x02
    2a44:	a3 83       	std	Z+3, r26	; 0x03
    2a46:	91 82       	std	Z+1, r9	; 0x01
    2a48:	80 82       	st	Z, r8
    2a4a:	d9 01       	movw	r26, r18
    2a4c:	6d 93       	st	X+, r22
    2a4e:	7c 93       	st	X, r23
    2a50:	09 c0       	rjmp	.+18     	; 0x2a64 <realloc+0x110>
    2a52:	0e 5f       	subi	r16, 0xFE	; 254
    2a54:	1f 4f       	sbci	r17, 0xFF	; 255
    2a56:	80 0f       	add	r24, r16
    2a58:	91 1f       	adc	r25, r17
    2a5a:	f9 01       	movw	r30, r18
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
    2a60:	eb 2d       	mov	r30, r11
    2a62:	fa 2f       	mov	r31, r26
    2a64:	e1 14       	cp	r14, r1
    2a66:	f1 04       	cpc	r15, r1
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <realloc+0x122>
    2a6a:	d7 01       	movw	r26, r14
    2a6c:	13 96       	adiw	r26, 0x03	; 3
    2a6e:	fc 93       	st	X, r31
    2a70:	ee 93       	st	-X, r30
    2a72:	12 97       	sbiw	r26, 0x02	; 2
    2a74:	41 c0       	rjmp	.+130    	; 0x2af8 <realloc+0x1a4>
    2a76:	f0 93 3e 09 	sts	0x093E, r31	; 0x80093e <__flp+0x1>
    2a7a:	e0 93 3d 09 	sts	0x093D, r30	; 0x80093d <__flp>
    2a7e:	3c c0       	rjmp	.+120    	; 0x2af8 <realloc+0x1a4>
    2a80:	68 16       	cp	r6, r24
    2a82:	79 06       	cpc	r7, r25
    2a84:	08 f4       	brcc	.+2      	; 0x2a88 <realloc+0x134>
    2a86:	3c 01       	movw	r6, r24
    2a88:	7d 01       	movw	r14, r26
    2a8a:	12 96       	adiw	r26, 0x02	; 2
    2a8c:	0d 90       	ld	r0, X+
    2a8e:	bc 91       	ld	r27, X
    2a90:	a0 2d       	mov	r26, r0
    2a92:	b7 cf       	rjmp	.-146    	; 0x2a02 <realloc+0xae>
    2a94:	80 91 3b 09 	lds	r24, 0x093B	; 0x80093b <__brkval>
    2a98:	90 91 3c 09 	lds	r25, 0x093C	; 0x80093c <__brkval+0x1>
    2a9c:	88 16       	cp	r8, r24
    2a9e:	99 06       	cpc	r9, r25
    2aa0:	e1 f4       	brne	.+56     	; 0x2ada <realloc+0x186>
    2aa2:	66 16       	cp	r6, r22
    2aa4:	77 06       	cpc	r7, r23
    2aa6:	c8 f4       	brcc	.+50     	; 0x2ada <realloc+0x186>
    2aa8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__malloc_heap_end>
    2aac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__malloc_heap_end+0x1>
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	41 f4       	brne	.+16     	; 0x2ac4 <realloc+0x170>
    2ab4:	8d b7       	in	r24, 0x3d	; 61
    2ab6:	9e b7       	in	r25, 0x3e	; 62
    2ab8:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <__malloc_margin>
    2abc:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <__malloc_margin+0x1>
    2ac0:	84 1b       	sub	r24, r20
    2ac2:	95 0b       	sbc	r25, r21
    2ac4:	e8 17       	cp	r30, r24
    2ac6:	f9 07       	cpc	r31, r25
    2ac8:	c8 f4       	brcc	.+50     	; 0x2afc <realloc+0x1a8>
    2aca:	f0 93 3c 09 	sts	0x093C, r31	; 0x80093c <__brkval+0x1>
    2ace:	e0 93 3b 09 	sts	0x093B, r30	; 0x80093b <__brkval>
    2ad2:	f9 01       	movw	r30, r18
    2ad4:	71 83       	std	Z+1, r23	; 0x01
    2ad6:	60 83       	st	Z, r22
    2ad8:	0f c0       	rjmp	.+30     	; 0x2af8 <realloc+0x1a4>
    2ada:	cb 01       	movw	r24, r22
    2adc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <malloc>
    2ae0:	7c 01       	movw	r14, r24
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	59 f0       	breq	.+22     	; 0x2afc <realloc+0x1a8>
    2ae6:	a8 01       	movw	r20, r16
    2ae8:	be 01       	movw	r22, r28
    2aea:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <memcpy>
    2aee:	ce 01       	movw	r24, r28
    2af0:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
    2af4:	c7 01       	movw	r24, r14
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <realloc+0x1ac>
    2af8:	ce 01       	movw	r24, r28
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <realloc+0x1ac>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
    2b10:	bf 90       	pop	r11
    2b12:	af 90       	pop	r10
    2b14:	9f 90       	pop	r9
    2b16:	8f 90       	pop	r8
    2b18:	7f 90       	pop	r7
    2b1a:	6f 90       	pop	r6
    2b1c:	08 95       	ret

00002b1e <memcpy>:
    2b1e:	fb 01       	movw	r30, r22
    2b20:	dc 01       	movw	r26, r24
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <memcpy+0xa>
    2b24:	01 90       	ld	r0, Z+
    2b26:	0d 92       	st	X+, r0
    2b28:	41 50       	subi	r20, 0x01	; 1
    2b2a:	50 40       	sbci	r21, 0x00	; 0
    2b2c:	d8 f7       	brcc	.-10     	; 0x2b24 <memcpy+0x6>
    2b2e:	08 95       	ret

00002b30 <malloc>:
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	10 f4       	brcc	.+4      	; 0x2b42 <malloc+0x12>
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	e0 91 3d 09 	lds	r30, 0x093D	; 0x80093d <__flp>
    2b46:	f0 91 3e 09 	lds	r31, 0x093E	; 0x80093e <__flp+0x1>
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	30 97       	sbiw	r30, 0x00	; 0
    2b54:	19 f1       	breq	.+70     	; 0x2b9c <malloc+0x6c>
    2b56:	40 81       	ld	r20, Z
    2b58:	51 81       	ldd	r21, Z+1	; 0x01
    2b5a:	02 81       	ldd	r16, Z+2	; 0x02
    2b5c:	13 81       	ldd	r17, Z+3	; 0x03
    2b5e:	48 17       	cp	r20, r24
    2b60:	59 07       	cpc	r21, r25
    2b62:	c8 f0       	brcs	.+50     	; 0x2b96 <malloc+0x66>
    2b64:	84 17       	cp	r24, r20
    2b66:	95 07       	cpc	r25, r21
    2b68:	69 f4       	brne	.+26     	; 0x2b84 <malloc+0x54>
    2b6a:	10 97       	sbiw	r26, 0x00	; 0
    2b6c:	31 f0       	breq	.+12     	; 0x2b7a <malloc+0x4a>
    2b6e:	12 96       	adiw	r26, 0x02	; 2
    2b70:	0c 93       	st	X, r16
    2b72:	12 97       	sbiw	r26, 0x02	; 2
    2b74:	13 96       	adiw	r26, 0x03	; 3
    2b76:	1c 93       	st	X, r17
    2b78:	27 c0       	rjmp	.+78     	; 0x2bc8 <malloc+0x98>
    2b7a:	00 93 3d 09 	sts	0x093D, r16	; 0x80093d <__flp>
    2b7e:	10 93 3e 09 	sts	0x093E, r17	; 0x80093e <__flp+0x1>
    2b82:	22 c0       	rjmp	.+68     	; 0x2bc8 <malloc+0x98>
    2b84:	21 15       	cp	r18, r1
    2b86:	31 05       	cpc	r19, r1
    2b88:	19 f0       	breq	.+6      	; 0x2b90 <malloc+0x60>
    2b8a:	42 17       	cp	r20, r18
    2b8c:	53 07       	cpc	r21, r19
    2b8e:	18 f4       	brcc	.+6      	; 0x2b96 <malloc+0x66>
    2b90:	9a 01       	movw	r18, r20
    2b92:	bd 01       	movw	r22, r26
    2b94:	ef 01       	movw	r28, r30
    2b96:	df 01       	movw	r26, r30
    2b98:	f8 01       	movw	r30, r16
    2b9a:	db cf       	rjmp	.-74     	; 0x2b52 <malloc+0x22>
    2b9c:	21 15       	cp	r18, r1
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	f9 f0       	breq	.+62     	; 0x2be0 <malloc+0xb0>
    2ba2:	28 1b       	sub	r18, r24
    2ba4:	39 0b       	sbc	r19, r25
    2ba6:	24 30       	cpi	r18, 0x04	; 4
    2ba8:	31 05       	cpc	r19, r1
    2baa:	80 f4       	brcc	.+32     	; 0x2bcc <malloc+0x9c>
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb0:	61 15       	cp	r22, r1
    2bb2:	71 05       	cpc	r23, r1
    2bb4:	21 f0       	breq	.+8      	; 0x2bbe <malloc+0x8e>
    2bb6:	fb 01       	movw	r30, r22
    2bb8:	93 83       	std	Z+3, r25	; 0x03
    2bba:	82 83       	std	Z+2, r24	; 0x02
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <malloc+0x96>
    2bbe:	90 93 3e 09 	sts	0x093E, r25	; 0x80093e <__flp+0x1>
    2bc2:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <__flp>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	32 96       	adiw	r30, 0x02	; 2
    2bca:	44 c0       	rjmp	.+136    	; 0x2c54 <malloc+0x124>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e2 0f       	add	r30, r18
    2bd0:	f3 1f       	adc	r31, r19
    2bd2:	81 93       	st	Z+, r24
    2bd4:	91 93       	st	Z+, r25
    2bd6:	22 50       	subi	r18, 0x02	; 2
    2bd8:	31 09       	sbc	r19, r1
    2bda:	39 83       	std	Y+1, r19	; 0x01
    2bdc:	28 83       	st	Y, r18
    2bde:	3a c0       	rjmp	.+116    	; 0x2c54 <malloc+0x124>
    2be0:	20 91 3b 09 	lds	r18, 0x093B	; 0x80093b <__brkval>
    2be4:	30 91 3c 09 	lds	r19, 0x093C	; 0x80093c <__brkval+0x1>
    2be8:	23 2b       	or	r18, r19
    2bea:	41 f4       	brne	.+16     	; 0x2bfc <malloc+0xcc>
    2bec:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__malloc_heap_start>
    2bf0:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__malloc_heap_start+0x1>
    2bf4:	30 93 3c 09 	sts	0x093C, r19	; 0x80093c <__brkval+0x1>
    2bf8:	20 93 3b 09 	sts	0x093B, r18	; 0x80093b <__brkval>
    2bfc:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__malloc_heap_end>
    2c00:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__malloc_heap_end+0x1>
    2c04:	21 15       	cp	r18, r1
    2c06:	31 05       	cpc	r19, r1
    2c08:	41 f4       	brne	.+16     	; 0x2c1a <malloc+0xea>
    2c0a:	2d b7       	in	r18, 0x3d	; 61
    2c0c:	3e b7       	in	r19, 0x3e	; 62
    2c0e:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <__malloc_margin>
    2c12:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <__malloc_margin+0x1>
    2c16:	24 1b       	sub	r18, r20
    2c18:	35 0b       	sbc	r19, r21
    2c1a:	e0 91 3b 09 	lds	r30, 0x093B	; 0x80093b <__brkval>
    2c1e:	f0 91 3c 09 	lds	r31, 0x093C	; 0x80093c <__brkval+0x1>
    2c22:	e2 17       	cp	r30, r18
    2c24:	f3 07       	cpc	r31, r19
    2c26:	a0 f4       	brcc	.+40     	; 0x2c50 <malloc+0x120>
    2c28:	2e 1b       	sub	r18, r30
    2c2a:	3f 0b       	sbc	r19, r31
    2c2c:	28 17       	cp	r18, r24
    2c2e:	39 07       	cpc	r19, r25
    2c30:	78 f0       	brcs	.+30     	; 0x2c50 <malloc+0x120>
    2c32:	ac 01       	movw	r20, r24
    2c34:	4e 5f       	subi	r20, 0xFE	; 254
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	24 17       	cp	r18, r20
    2c3a:	35 07       	cpc	r19, r21
    2c3c:	48 f0       	brcs	.+18     	; 0x2c50 <malloc+0x120>
    2c3e:	4e 0f       	add	r20, r30
    2c40:	5f 1f       	adc	r21, r31
    2c42:	50 93 3c 09 	sts	0x093C, r21	; 0x80093c <__brkval+0x1>
    2c46:	40 93 3b 09 	sts	0x093B, r20	; 0x80093b <__brkval>
    2c4a:	81 93       	st	Z+, r24
    2c4c:	91 93       	st	Z+, r25
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <malloc+0x124>
    2c50:	e0 e0       	ldi	r30, 0x00	; 0
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	cf 01       	movw	r24, r30
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	08 95       	ret

00002c60 <free>:
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <free+0xa>
    2c68:	81 c0       	rjmp	.+258    	; 0x2d6c <free+0x10c>
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	32 97       	sbiw	r30, 0x02	; 2
    2c6e:	13 82       	std	Z+3, r1	; 0x03
    2c70:	12 82       	std	Z+2, r1	; 0x02
    2c72:	a0 91 3d 09 	lds	r26, 0x093D	; 0x80093d <__flp>
    2c76:	b0 91 3e 09 	lds	r27, 0x093E	; 0x80093e <__flp+0x1>
    2c7a:	10 97       	sbiw	r26, 0x00	; 0
    2c7c:	81 f4       	brne	.+32     	; 0x2c9e <free+0x3e>
    2c7e:	20 81       	ld	r18, Z
    2c80:	31 81       	ldd	r19, Z+1	; 0x01
    2c82:	82 0f       	add	r24, r18
    2c84:	93 1f       	adc	r25, r19
    2c86:	20 91 3b 09 	lds	r18, 0x093B	; 0x80093b <__brkval>
    2c8a:	30 91 3c 09 	lds	r19, 0x093C	; 0x80093c <__brkval+0x1>
    2c8e:	28 17       	cp	r18, r24
    2c90:	39 07       	cpc	r19, r25
    2c92:	51 f5       	brne	.+84     	; 0x2ce8 <free+0x88>
    2c94:	f0 93 3c 09 	sts	0x093C, r31	; 0x80093c <__brkval+0x1>
    2c98:	e0 93 3b 09 	sts	0x093B, r30	; 0x80093b <__brkval>
    2c9c:	67 c0       	rjmp	.+206    	; 0x2d6c <free+0x10c>
    2c9e:	ed 01       	movw	r28, r26
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	ce 17       	cp	r28, r30
    2ca6:	df 07       	cpc	r29, r31
    2ca8:	40 f4       	brcc	.+16     	; 0x2cba <free+0x5a>
    2caa:	4a 81       	ldd	r20, Y+2	; 0x02
    2cac:	5b 81       	ldd	r21, Y+3	; 0x03
    2cae:	9e 01       	movw	r18, r28
    2cb0:	41 15       	cp	r20, r1
    2cb2:	51 05       	cpc	r21, r1
    2cb4:	f1 f0       	breq	.+60     	; 0x2cf2 <free+0x92>
    2cb6:	ea 01       	movw	r28, r20
    2cb8:	f5 cf       	rjmp	.-22     	; 0x2ca4 <free+0x44>
    2cba:	d3 83       	std	Z+3, r29	; 0x03
    2cbc:	c2 83       	std	Z+2, r28	; 0x02
    2cbe:	40 81       	ld	r20, Z
    2cc0:	51 81       	ldd	r21, Z+1	; 0x01
    2cc2:	84 0f       	add	r24, r20
    2cc4:	95 1f       	adc	r25, r21
    2cc6:	c8 17       	cp	r28, r24
    2cc8:	d9 07       	cpc	r29, r25
    2cca:	59 f4       	brne	.+22     	; 0x2ce2 <free+0x82>
    2ccc:	88 81       	ld	r24, Y
    2cce:	99 81       	ldd	r25, Y+1	; 0x01
    2cd0:	84 0f       	add	r24, r20
    2cd2:	95 1f       	adc	r25, r21
    2cd4:	02 96       	adiw	r24, 0x02	; 2
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cde:	93 83       	std	Z+3, r25	; 0x03
    2ce0:	82 83       	std	Z+2, r24	; 0x02
    2ce2:	21 15       	cp	r18, r1
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	29 f4       	brne	.+10     	; 0x2cf2 <free+0x92>
    2ce8:	f0 93 3e 09 	sts	0x093E, r31	; 0x80093e <__flp+0x1>
    2cec:	e0 93 3d 09 	sts	0x093D, r30	; 0x80093d <__flp>
    2cf0:	3d c0       	rjmp	.+122    	; 0x2d6c <free+0x10c>
    2cf2:	e9 01       	movw	r28, r18
    2cf4:	fb 83       	std	Y+3, r31	; 0x03
    2cf6:	ea 83       	std	Y+2, r30	; 0x02
    2cf8:	49 91       	ld	r20, Y+
    2cfa:	59 91       	ld	r21, Y+
    2cfc:	c4 0f       	add	r28, r20
    2cfe:	d5 1f       	adc	r29, r21
    2d00:	ec 17       	cp	r30, r28
    2d02:	fd 07       	cpc	r31, r29
    2d04:	61 f4       	brne	.+24     	; 0x2d1e <free+0xbe>
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	84 0f       	add	r24, r20
    2d0c:	95 1f       	adc	r25, r21
    2d0e:	02 96       	adiw	r24, 0x02	; 2
    2d10:	e9 01       	movw	r28, r18
    2d12:	99 83       	std	Y+1, r25	; 0x01
    2d14:	88 83       	st	Y, r24
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	9b 83       	std	Y+3, r25	; 0x03
    2d1c:	8a 83       	std	Y+2, r24	; 0x02
    2d1e:	e0 e0       	ldi	r30, 0x00	; 0
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	12 96       	adiw	r26, 0x02	; 2
    2d24:	8d 91       	ld	r24, X+
    2d26:	9c 91       	ld	r25, X
    2d28:	13 97       	sbiw	r26, 0x03	; 3
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	19 f0       	breq	.+6      	; 0x2d34 <free+0xd4>
    2d2e:	fd 01       	movw	r30, r26
    2d30:	dc 01       	movw	r26, r24
    2d32:	f7 cf       	rjmp	.-18     	; 0x2d22 <free+0xc2>
    2d34:	8d 91       	ld	r24, X+
    2d36:	9c 91       	ld	r25, X
    2d38:	11 97       	sbiw	r26, 0x01	; 1
    2d3a:	9d 01       	movw	r18, r26
    2d3c:	2e 5f       	subi	r18, 0xFE	; 254
    2d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d40:	82 0f       	add	r24, r18
    2d42:	93 1f       	adc	r25, r19
    2d44:	20 91 3b 09 	lds	r18, 0x093B	; 0x80093b <__brkval>
    2d48:	30 91 3c 09 	lds	r19, 0x093C	; 0x80093c <__brkval+0x1>
    2d4c:	28 17       	cp	r18, r24
    2d4e:	39 07       	cpc	r19, r25
    2d50:	69 f4       	brne	.+26     	; 0x2d6c <free+0x10c>
    2d52:	30 97       	sbiw	r30, 0x00	; 0
    2d54:	29 f4       	brne	.+10     	; 0x2d60 <free+0x100>
    2d56:	10 92 3e 09 	sts	0x093E, r1	; 0x80093e <__flp+0x1>
    2d5a:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <__flp>
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <free+0x104>
    2d60:	13 82       	std	Z+3, r1	; 0x03
    2d62:	12 82       	std	Z+2, r1	; 0x02
    2d64:	b0 93 3c 09 	sts	0x093C, r27	; 0x80093c <__brkval+0x1>
    2d68:	a0 93 3b 09 	sts	0x093B, r26	; 0x80093b <__brkval>
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <_exit>:
    2d72:	f8 94       	cli

00002d74 <__stop_program>:
    2d74:	ff cf       	rjmp	.-2      	; 0x2d74 <__stop_program>
