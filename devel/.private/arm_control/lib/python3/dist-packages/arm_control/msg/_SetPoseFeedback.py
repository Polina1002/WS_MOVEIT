# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arm_control/SetPoseFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm_control.msg

class SetPoseFeedback(genpy.Message):
  _md5sum = "57a46cd82a7bce3b86dc2d8131f7b485"
  _type = "arm_control/SetPoseFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define a feedback message
arm_control/Pose currentPose
float64 error
float64 time

================================================================================
MSG: arm_control/Pose
float64 x
float64 y
float64 z
float64[] rotx
float64[] roty
float64[] rotz"""
  __slots__ = ['currentPose','error','time']
  _slot_types = ['arm_control/Pose','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       currentPose,error,time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetPoseFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.currentPose is None:
        self.currentPose = arm_control.msg.Pose()
      if self.error is None:
        self.error = 0.
      if self.time is None:
        self.time = 0.
    else:
      self.currentPose = arm_control.msg.Pose()
      self.error = 0.
      self.time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.currentPose.x, _x.currentPose.y, _x.currentPose.z))
      length = len(self.currentPose.rotx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.currentPose.rotx))
      length = len(self.currentPose.roty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.currentPose.roty))
      length = len(self.currentPose.rotz)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.currentPose.rotz))
      _x = self
      buff.write(_get_struct_2d().pack(_x.error, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.currentPose is None:
        self.currentPose = arm_control.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.currentPose.x, _x.currentPose.y, _x.currentPose.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currentPose.rotx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currentPose.roty = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currentPose.rotz = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.error, _x.time,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.currentPose.x, _x.currentPose.y, _x.currentPose.z))
      length = len(self.currentPose.rotx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.currentPose.rotx.tostring())
      length = len(self.currentPose.roty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.currentPose.roty.tostring())
      length = len(self.currentPose.rotz)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.currentPose.rotz.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.error, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.currentPose is None:
        self.currentPose = arm_control.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.currentPose.x, _x.currentPose.y, _x.currentPose.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currentPose.rotx = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currentPose.roty = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currentPose.rotz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.error, _x.time,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
