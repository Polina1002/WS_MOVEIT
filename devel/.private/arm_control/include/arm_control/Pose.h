// Generated by gencpp from file arm_control/Pose.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_POSE_H
#define ARM_CONTROL_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_control
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , rotx()
    , roty()
    , rotz()  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , rotx(_alloc)
    , roty(_alloc)
    , rotz(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rotx_type;
  _rotx_type rotx;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _roty_type;
  _roty_type roty;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rotz_type;
  _rotz_type rotz;





  typedef boost::shared_ptr< ::arm_control::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::arm_control::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::arm_control::Pose > PosePtr;
typedef boost::shared_ptr< ::arm_control::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_control::Pose_<ContainerAllocator1> & lhs, const ::arm_control::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.rotx == rhs.rotx &&
    lhs.roty == rhs.roty &&
    lhs.rotz == rhs.rotz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_control::Pose_<ContainerAllocator1> & lhs, const ::arm_control::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_control::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::Pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "098ea279d162da9763a6edc61767f6d1";
  }

  static const char* value(const ::arm_control::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x098ea279d162da97ULL;
  static const uint64_t static_value2 = 0x63a6edc61767f6d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/Pose";
  }

  static const char* value(const ::arm_control::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64[] rotx\n"
"float64[] roty\n"
"float64[] rotz\n"
;
  }

  static const char* value(const ::arm_control::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rotx);
      stream.next(m.roty);
      stream.next(m.rotz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::Pose_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "rotx[]" << std::endl;
    for (size_t i = 0; i < v.rotx.size(); ++i)
    {
      s << indent << "  rotx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rotx[i]);
    }
    s << indent << "roty[]" << std::endl;
    for (size_t i = 0; i < v.roty.size(); ++i)
    {
      s << indent << "  roty[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.roty[i]);
    }
    s << indent << "rotz[]" << std::endl;
    for (size_t i = 0; i < v.rotz.size(); ++i)
    {
      s << indent << "  rotz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rotz[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_POSE_H
