// Generated by gencpp from file arm_control/SolveIKPoseRequest.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_SOLVEIKPOSEREQUEST_H
#define ARM_CONTROL_MESSAGE_SOLVEIKPOSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arm_control/Pose.h>

namespace arm_control
{
template <class ContainerAllocator>
struct SolveIKPoseRequest_
{
  typedef SolveIKPoseRequest_<ContainerAllocator> Type;

  SolveIKPoseRequest_()
    : initialState()
    , goal()  {
    }
  SolveIKPoseRequest_(const ContainerAllocator& _alloc)
    : initialState(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _initialState_type;
  _initialState_type initialState;

   typedef  ::arm_control::Pose_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SolveIKPoseRequest_

typedef ::arm_control::SolveIKPoseRequest_<std::allocator<void> > SolveIKPoseRequest;

typedef boost::shared_ptr< ::arm_control::SolveIKPoseRequest > SolveIKPoseRequestPtr;
typedef boost::shared_ptr< ::arm_control::SolveIKPoseRequest const> SolveIKPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::SolveIKPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_control::SolveIKPoseRequest_<ContainerAllocator1> & lhs, const ::arm_control::SolveIKPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.initialState == rhs.initialState &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_control::SolveIKPoseRequest_<ContainerAllocator1> & lhs, const ::arm_control::SolveIKPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56b7bdf2e3497ef4b61f71d47b5139e0";
  }

  static const char* value(const ::arm_control::SolveIKPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56b7bdf2e3497ef4ULL;
  static const uint64_t static_value2 = 0xb61f71d47b5139e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/SolveIKPoseRequest";
  }

  static const char* value(const ::arm_control::SolveIKPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] initialState\n"
"arm_control/Pose goal\n"
"\n"
"================================================================================\n"
"MSG: arm_control/Pose\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64[] rotx\n"
"float64[] roty\n"
"float64[] rotz\n"
;
  }

  static const char* value(const ::arm_control::SolveIKPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initialState);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SolveIKPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::SolveIKPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::SolveIKPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "initialState[]" << std::endl;
    for (size_t i = 0; i < v.initialState.size(); ++i)
    {
      s << indent << "  initialState[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initialState[i]);
    }
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::arm_control::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_SOLVEIKPOSEREQUEST_H
