// Generated by gencpp from file arm_control/SolveFKPoseResponse.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_SOLVEFKPOSERESPONSE_H
#define ARM_CONTROL_MESSAGE_SOLVEFKPOSERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arm_control/Pose.h>

namespace arm_control
{
template <class ContainerAllocator>
struct SolveFKPoseResponse_
{
  typedef SolveFKPoseResponse_<ContainerAllocator> Type;

  SolveFKPoseResponse_()
    : solution()
    , result(0)  {
    }
  SolveFKPoseResponse_(const ContainerAllocator& _alloc)
    : solution(_alloc)
    , result(0)  {
  (void)_alloc;
    }



   typedef  ::arm_control::Pose_<ContainerAllocator>  _solution_type;
  _solution_type solution;

   typedef int32_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SolveFKPoseResponse_

typedef ::arm_control::SolveFKPoseResponse_<std::allocator<void> > SolveFKPoseResponse;

typedef boost::shared_ptr< ::arm_control::SolveFKPoseResponse > SolveFKPoseResponsePtr;
typedef boost::shared_ptr< ::arm_control::SolveFKPoseResponse const> SolveFKPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::SolveFKPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_control::SolveFKPoseResponse_<ContainerAllocator1> & lhs, const ::arm_control::SolveFKPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.solution == rhs.solution &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_control::SolveFKPoseResponse_<ContainerAllocator1> & lhs, const ::arm_control::SolveFKPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcad5622c26bbf895d917a21e82df24e";
  }

  static const char* value(const ::arm_control::SolveFKPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcad5622c26bbf89ULL;
  static const uint64_t static_value2 = 0x5d917a21e82df24eULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/SolveFKPoseResponse";
  }

  static const char* value(const ::arm_control::SolveFKPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/Pose solution\n"
"int32 result\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arm_control/Pose\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64[] rotx\n"
"float64[] roty\n"
"float64[] rotz\n"
;
  }

  static const char* value(const ::arm_control::SolveFKPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.solution);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SolveFKPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::SolveFKPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::SolveFKPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "solution: ";
    s << std::endl;
    Printer< ::arm_control::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.solution);
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_SOLVEFKPOSERESPONSE_H
