// Generated by gencpp from file arm_control/SetPoseFeedback.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_SETPOSEFEEDBACK_H
#define ARM_CONTROL_MESSAGE_SETPOSEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arm_control/Pose.h>

namespace arm_control
{
template <class ContainerAllocator>
struct SetPoseFeedback_
{
  typedef SetPoseFeedback_<ContainerAllocator> Type;

  SetPoseFeedback_()
    : currentPose()
    , error(0.0)
    , time(0.0)  {
    }
  SetPoseFeedback_(const ContainerAllocator& _alloc)
    : currentPose(_alloc)
    , error(0.0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef  ::arm_control::Pose_<ContainerAllocator>  _currentPose_type;
  _currentPose_type currentPose;

   typedef double _error_type;
  _error_type error;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::arm_control::SetPoseFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::SetPoseFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct SetPoseFeedback_

typedef ::arm_control::SetPoseFeedback_<std::allocator<void> > SetPoseFeedback;

typedef boost::shared_ptr< ::arm_control::SetPoseFeedback > SetPoseFeedbackPtr;
typedef boost::shared_ptr< ::arm_control::SetPoseFeedback const> SetPoseFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::SetPoseFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::SetPoseFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_control::SetPoseFeedback_<ContainerAllocator1> & lhs, const ::arm_control::SetPoseFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.currentPose == rhs.currentPose &&
    lhs.error == rhs.error &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_control::SetPoseFeedback_<ContainerAllocator1> & lhs, const ::arm_control::SetPoseFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::SetPoseFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SetPoseFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SetPoseFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57a46cd82a7bce3b86dc2d8131f7b485";
  }

  static const char* value(const ::arm_control::SetPoseFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57a46cd82a7bce3bULL;
  static const uint64_t static_value2 = 0x86dc2d8131f7b485ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/SetPoseFeedback";
  }

  static const char* value(const ::arm_control::SetPoseFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"arm_control/Pose currentPose\n"
"float64 error\n"
"float64 time\n"
"\n"
"================================================================================\n"
"MSG: arm_control/Pose\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64[] rotx\n"
"float64[] roty\n"
"float64[] rotz\n"
;
  }

  static const char* value(const ::arm_control::SetPoseFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currentPose);
      stream.next(m.error);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPoseFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::SetPoseFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::SetPoseFeedback_<ContainerAllocator>& v)
  {
    s << indent << "currentPose: ";
    s << std::endl;
    Printer< ::arm_control::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.currentPose);
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_SETPOSEFEEDBACK_H
