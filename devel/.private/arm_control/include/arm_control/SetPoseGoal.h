// Generated by gencpp from file arm_control/SetPoseGoal.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_SETPOSEGOAL_H
#define ARM_CONTROL_MESSAGE_SETPOSEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arm_control/Pose.h>

namespace arm_control
{
template <class ContainerAllocator>
struct SetPoseGoal_
{
  typedef SetPoseGoal_<ContainerAllocator> Type;

  SetPoseGoal_()
    : goal()
    , eps(0.0)  {
    }
  SetPoseGoal_(const ContainerAllocator& _alloc)
    : goal(_alloc)
    , eps(0.0)  {
  (void)_alloc;
    }



   typedef  ::arm_control::Pose_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef double _eps_type;
  _eps_type eps;





  typedef boost::shared_ptr< ::arm_control::SetPoseGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::SetPoseGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SetPoseGoal_

typedef ::arm_control::SetPoseGoal_<std::allocator<void> > SetPoseGoal;

typedef boost::shared_ptr< ::arm_control::SetPoseGoal > SetPoseGoalPtr;
typedef boost::shared_ptr< ::arm_control::SetPoseGoal const> SetPoseGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::SetPoseGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::SetPoseGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_control::SetPoseGoal_<ContainerAllocator1> & lhs, const ::arm_control::SetPoseGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal == rhs.goal &&
    lhs.eps == rhs.eps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_control::SetPoseGoal_<ContainerAllocator1> & lhs, const ::arm_control::SetPoseGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_control::SetPoseGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::SetPoseGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SetPoseGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::SetPoseGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SetPoseGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::SetPoseGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::SetPoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20235d062a0a825673e71bb666e5bec7";
  }

  static const char* value(const ::arm_control::SetPoseGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20235d062a0a8256ULL;
  static const uint64_t static_value2 = 0x73e71bb666e5bec7ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::SetPoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/SetPoseGoal";
  }

  static const char* value(const ::arm_control::SetPoseGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::SetPoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"arm_control/Pose goal\n"
"float64 eps\n"
"\n"
"================================================================================\n"
"MSG: arm_control/Pose\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64[] rotx\n"
"float64[] roty\n"
"float64[] rotz\n"
;
  }

  static const char* value(const ::arm_control::SetPoseGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::SetPoseGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
      stream.next(m.eps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPoseGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::SetPoseGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::SetPoseGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::arm_control::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "eps: ";
    Printer<double>::stream(s, indent + "  ", v.eps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_SETPOSEGOAL_H
