// Auto-generated. Do not edit!

// (in-package arm_control.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let Pose = require('./Pose.js');

//-----------------------------------------------------------

class SetPoseResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.finalPose = null;
      this.error = null;
      this.time = null;
      this.errorCode = null;
    }
    else {
      if (initObj.hasOwnProperty('finalPose')) {
        this.finalPose = initObj.finalPose
      }
      else {
        this.finalPose = new Pose();
      }
      if (initObj.hasOwnProperty('error')) {
        this.error = initObj.error
      }
      else {
        this.error = 0.0;
      }
      if (initObj.hasOwnProperty('time')) {
        this.time = initObj.time
      }
      else {
        this.time = 0.0;
      }
      if (initObj.hasOwnProperty('errorCode')) {
        this.errorCode = initObj.errorCode
      }
      else {
        this.errorCode = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type SetPoseResult
    // Serialize message field [finalPose]
    bufferOffset = Pose.serialize(obj.finalPose, buffer, bufferOffset);
    // Serialize message field [error]
    bufferOffset = _serializer.float64(obj.error, buffer, bufferOffset);
    // Serialize message field [time]
    bufferOffset = _serializer.float64(obj.time, buffer, bufferOffset);
    // Serialize message field [errorCode]
    bufferOffset = _serializer.int32(obj.errorCode, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type SetPoseResult
    let len;
    let data = new SetPoseResult(null);
    // Deserialize message field [finalPose]
    data.finalPose = Pose.deserialize(buffer, bufferOffset);
    // Deserialize message field [error]
    data.error = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [time]
    data.time = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [errorCode]
    data.errorCode = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += Pose.getMessageSize(object.finalPose);
    return length + 20;
  }

  static datatype() {
    // Returns string type for a message object
    return 'arm_control/SetPoseResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '335523dda63c3d3307109552301cda50';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the result
    arm_control/Pose finalPose
    float64 error
    float64 time
    int32 errorCode
    
    ================================================================================
    MSG: arm_control/Pose
    float64 x
    float64 y
    float64 z
    float64[] rotx
    float64[] roty
    float64[] rotz
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new SetPoseResult(null);
    if (msg.finalPose !== undefined) {
      resolved.finalPose = Pose.Resolve(msg.finalPose)
    }
    else {
      resolved.finalPose = new Pose()
    }

    if (msg.error !== undefined) {
      resolved.error = msg.error;
    }
    else {
      resolved.error = 0.0
    }

    if (msg.time !== undefined) {
      resolved.time = msg.time;
    }
    else {
      resolved.time = 0.0
    }

    if (msg.errorCode !== undefined) {
      resolved.errorCode = msg.errorCode;
    }
    else {
      resolved.errorCode = 0
    }

    return resolved;
    }
};

module.exports = SetPoseResult;
